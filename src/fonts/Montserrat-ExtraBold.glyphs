{
.appVersion = "1286";
copyright = "Copyright 2011 The Montserrat Project Authors (https://github.com/JulietaUla/Montserrat)";
customParameters = (
{
name = vendorID;
value = "ULA ";
},
{
name = panose;
value = (
0,
0,
9,
0,
0,
0,
0,
0,
0,
0
);
},
{
name = unicodeRanges;
value = (
0,
1,
2,
3,
9,
29,
32,
33
);
},
{
name = fsType;
value = (
);
}
);
date = "2017-10-17 18:36:54 +0000";
designer = "Julieta Ulanovsky";
designerURL = "http://www.zkysky.com.ar/";
disablesAutomaticAlignment = 1;
familyName = "Montserrat FFS";
featurePrefixes = (
{
code = "lookup lookup_0 {\012sub i by idotless;\012sub j by jdotless;\012sub periodcentered by periodcentered.loclCAT;\012sub dieresiscomb by dieresiscomb.case;\012sub dieresiscomb_gravecomb by dieresiscomb_gravecomb.case;\012sub dieresiscomb_acutecomb by dieresiscomb_acutecomb.case;\012sub dieresiscomb_macroncomb by dieresiscomb_macroncomb.case;\012sub dotaccentcomb by dotaccentcomb.case;\012sub dotaccentcomb_macroncomb by dotaccentcomb_macroncomb.case;\012sub gravecomb by gravecomb.case;\012sub gravecomb_macroncomb by gravecomb_macroncomb.case;\012sub acutecomb by acutecomb.case;\012sub acutecomb_dotaccentcomb by acutecomb_dotaccentcomb.case;\012sub acutecomb_macroncomb by acutecomb_macroncomb.case;\012sub hungarumlautcomb by hungarumlautcomb.case;\012sub circumflexcomb by circumflexcomb.case;\012sub caroncomb by caroncomb.case;\012sub caroncomb_dotaccentcomb by caroncomb_dotaccentcomb.case;\012sub brevecomb by brevecomb.case;\012sub tildecomb by tildecomb.case;\012sub tildecomb_dieresiscomb by tildecomb_dieresiscomb.case;\012sub tildecomb_acutecomb by tildecomb_acutecomb.case;\012sub tildecomb_macroncomb by tildecomb_macroncomb.case;\012sub macroncomb by macroncomb.case;\012sub macroncomb_dieresiscomb by macroncomb_dieresiscomb.case;\012sub macroncomb_gravecomb by macroncomb_gravecomb.case;\012sub macroncomb_acutecomb by macroncomb_acutecomb.case;\012sub hookabovecomb by hookabovecomb.case;\012sub dblgravecomb by dblgravecomb.case;\012sub breveinvertedcomb by breveinvertedcomb.case;\012sub strokeshortcomb by strokeshortcomb.case;\012sub slashshortcomb by slashshortcomb.case;\012sub slashlongcomb by slashlongcomb.case;\012sub brevecomb_acutecomb by brevecomb_acutecomb.case;\012sub brevecomb_gravecomb by brevecomb_gravecomb.case;\012sub brevecomb_hookabovecomb by brevecomb_hookabovecomb.case;\012sub brevecomb_tildecomb by brevecomb_tildecomb.case;\012sub circumflexcomb_acutecomb by circumflexcomb_acutecomb.case;\012sub circumflexcomb_gravecomb by circumflexcomb_gravecomb.case;\012sub circumflexcomb_hookabovecomb by circumflexcomb_hookabovecomb.case;\012sub circumflexcomb_tildecomb by circumflexcomb_tildecomb.case;\012} lookup_0;\012";
disabled = 1;
name = lookup_0;
},
{
code = "lookup lookup_1 {\012sub A by ordfeminine;\012sub O by ordmasculine;\012sub a by ordfeminine;\012sub o by ordmasculine;\012sub zero.numr by zero.dnom;\012sub one.numr by one.dnom;\012sub two.numr by two.dnom;\012sub three.numr by three.dnom;\012sub four.numr by four.dnom;\012sub five.numr by five.dnom;\012sub six.numr by six.dnom;\012sub seven.numr by seven.dnom;\012sub eight.numr by eight.dnom;\012sub nine.numr by nine.dnom;\012sub periodcentered by periodcentered.loclCAT.case;\012} lookup_1;\012";
disabled = 1;
name = lookup_1;
}
);
features = (
{
code = "sub A by a.sc;\012sub Aacute by aacute.sc;\012sub Abreve by abreve.sc;\012sub Abreveacute by abreveacute.sc;\012sub Abrevedotbelow by abrevedotbelow.sc;\012sub Abrevegrave by abrevegrave.sc;\012sub Abrevehookabove by abrevehookabove.sc;\012sub Abrevetilde by abrevetilde.sc;\012sub Acaron by acaron.sc;\012sub Acircumflex by acircumflex.sc;\012sub Acircumflexacute by acircumflexacute.sc;\012sub Acircumflexdotbelow by acircumflexdotbelow.sc;\012sub Acircumflexgrave by acircumflexgrave.sc;\012sub Acircumflexhookabove by acircumflexhookabove.sc;\012sub Acircumflextilde by acircumflextilde.sc;\012sub Adblgrave by adblgrave.sc;\012sub Adieresis by adieresis.sc;\012sub Adotbelow by adotbelow.sc;\012sub Agrave by agrave.sc;\012sub Ahookabove by ahookabove.sc;\012sub Ainvertedbreve by ainvertedbreve.sc;\012sub Amacron by amacron.sc;\012sub Aogonek by aogonek.sc;\012sub Aring by aring.sc;\012sub Aringacute by aringacute.sc;\012sub Atilde by atilde.sc;\012sub AE by ae.sc;\012sub AEacute by aeacute.sc;\012sub B by b.sc;\012sub C by c.sc;\012sub Cacute by cacute.sc;\012sub Ccaron by ccaron.sc;\012sub Ccedilla by ccedilla.sc;\012sub Ccedillaacute by ccedillaacute.sc;\012sub Ccircumflex by ccircumflex.sc;\012sub Cdotaccent by cdotaccent.sc;\012sub D by d.sc;\012sub DZcaron by dzcaron.sc;\012sub Eth by eth.sc;\012sub Dcaron by dcaron.sc;\012sub Dcroat by dcroat.sc;\012sub Ddotbelow by ddotbelow.sc;\012sub Dlinebelow by dlinebelow.sc;\012sub Dzcaron by dzcaron.sc;\012sub E by e.sc;\012sub Eacute by eacute.sc;\012sub Ebreve by ebreve.sc;\012sub Ecaron by ecaron.sc;\012sub Ecedillabreve by ecedillabreve.sc;\012sub Ecircumflex by ecircumflex.sc;\012sub Ecircumflexacute by ecircumflexacute.sc;\012sub Ecircumflexdotbelow by ecircumflexdotbelow.sc;\012sub Ecircumflexgrave by ecircumflexgrave.sc;\012sub Ecircumflexhookabove by ecircumflexhookabove.sc;\012sub Ecircumflextilde by ecircumflextilde.sc;\012sub Edblgrave by edblgrave.sc;\012sub Edieresis by edieresis.sc;\012sub Edotaccent by edotaccent.sc;\012sub Edotbelow by edotbelow.sc;\012sub Egrave by egrave.sc;\012sub Ehookabove by ehookabove.sc;\012sub Einvertedbreve by einvertedbreve.sc;\012sub Emacron by emacron.sc;\012sub Emacronacute by emacronacute.sc;\012sub Emacrongrave by emacrongrave.sc;\012sub Eogonek by eogonek.sc;\012sub Etilde by etilde.sc;\012sub Ezh by ezh.sc;\012sub Ezhcaron by ezhcaron.sc;\012sub F by f.sc;\012sub G by g.sc;\012sub Gbreve by gbreve.sc;\012sub Gcaron by gcaron.sc;\012sub Gcircumflex by gcircumflex.sc;\012sub Gcommaaccent by gcommaaccent.sc;\012sub Gdotaccent by gdotaccent.sc;\012sub Gmacron by gmacron.sc;\012sub Gstroke by gstroke.sc;\012sub H by h.sc;\012sub Hbar by hbar.sc;\012sub Hbrevebelow by hbrevebelow.sc;\012sub Hcaron by hcaron.sc;\012sub Hcircumflex by hcircumflex.sc;\012sub Hdotbelow by hdotbelow.sc;\012sub I by i.sc;\012sub IJ by ij.sc;\012sub Iacute by iacute.sc;\012sub Ibreve by ibreve.sc;\012sub Icircumflex by icircumflex.sc;\012sub Idblgrave by idblgrave.sc;\012sub Idieresis by idieresis.sc;\012sub Idieresisacute by idieresisacute.sc;\012sub Idotaccent by idotaccent.sc;\012sub Idotbelow by idotbelow.sc;\012sub Igrave by igrave.sc;\012sub Ihookabove by ihookabove.sc;\012sub Iinvertedbreve by iinvertedbreve.sc;\012sub Imacron by imacron.sc;\012sub Iogonek by iogonek.sc;\012sub Itilde by itilde.sc;\012sub J by j.sc;\012sub Jcircumflex by jcircumflex.sc;\012sub K by k.sc;\012sub Kcaron by kcaron.sc;\012sub Kcommaaccent by kcommaaccent.sc;\012sub L by l.sc;\012sub LJ by lj.sc;\012sub Lacute by lacute.sc;\012sub Lcaron by lcaron.sc;\012sub Lcommaaccent by lcommaaccent.sc;\012sub Ldot by ldot.sc;\012sub Ldotbelow by ldotbelow.sc;\012sub Lj by lj.sc;\012sub Llinebelow by llinebelow.sc;\012sub Lslash by lslash.sc;\012sub M by m.sc;\012sub Mdotbelow by mdotbelow.sc;\012sub N by n.sc;\012sub NJ by nj.sc;\012sub Nacute by nacute.sc;\012sub Ncaron by ncaron.sc;\012sub Ncommaaccent by ncommaaccent.sc;\012sub Ndotaccent by ndotaccent.sc;\012sub Ndotbelow by ndotbelow.sc;\012sub Eng by eng.sc;\012sub Nj by nj.sc;\012sub Nlinebelow by nlinebelow.sc;\012sub Ntilde by ntilde.sc;\012sub O by o.sc;\012sub Oacute by oacute.sc;\012sub Obreve by obreve.sc;\012sub Ocircumflex by ocircumflex.sc;\012sub Ocircumflexacute by ocircumflexacute.sc;\012sub Ocircumflexdotbelow by ocircumflexdotbelow.sc;\012sub Ocircumflexgrave by ocircumflexgrave.sc;\012sub Ocircumflexhookabove by ocircumflexhookabove.sc;\012sub Ocircumflextilde by ocircumflextilde.sc;\012sub Odblgrave by odblgrave.sc;\012sub Odieresis by odieresis.sc;\012sub Odieresismacron by odieresismacron.sc;\012sub Odotaccentmacron by odotaccentmacron.sc;\012sub Odotbelow by odotbelow.sc;\012sub Ograve by ograve.sc;\012sub Ohookabove by ohookabove.sc;\012sub Ohorn by ohorn.sc;\012sub Ohornacute by ohornacute.sc;\012sub Ohorndotbelow by ohorndotbelow.sc;\012sub Ohorngrave by ohorngrave.sc;\012sub Ohornhookabove by ohornhookabove.sc;\012sub Ohorntilde by ohorntilde.sc;\012sub Ohungarumlaut by ohungarumlaut.sc;\012sub Oinvertedbreve by oinvertedbreve.sc;\012sub Omacron by omacron.sc;\012sub Omacronacute by omacronacute.sc;\012sub Omacrongrave by omacrongrave.sc;\012sub Oogonek by oogonek.sc;\012sub Oslash by oslash.sc;\012sub Oslashacute by oslashacute.sc;\012sub Otilde by otilde.sc;\012sub Otildeacute by otildeacute.sc;\012sub Otildedieresis by otildedieresis.sc;\012sub Otildemacron by otildemacron.sc;\012sub OE by oe.sc;\012sub P by p.sc;\012sub Thorn by thorn.sc;\012sub Q by q.sc;\012sub R by r.sc;\012sub Racute by racute.sc;\012sub Rcaron by rcaron.sc;\012sub Rcommaaccent by rcommaaccent.sc;\012sub Rdblgrave by rdblgrave.sc;\012sub Rdotbelow by rdotbelow.sc;\012sub Rinvertedbreve by rinvertedbreve.sc;\012sub Rlinebelow by rlinebelow.sc;\012sub S by s.sc;\012sub Sacute by sacute.sc;\012sub Sacutedotaccent by sacutedotaccent.sc;\012sub Saltillo by saltillo.sc;\012sub Scaron by scaron.sc;\012sub Scarondotaccent by scarondotaccent.sc;\012sub Scedilla by scedilla.sc;\012sub Scircumflex by scircumflex.sc;\012sub Scommaaccent by scommaaccent.sc;\012sub Sdotaccent by sdotaccent.sc;\012sub Sdotbelow by sdotbelow.sc;\012sub Sdotbelowdotaccent by sdotbelowdotaccent.sc;\012sub Germandbls by germandbls.sc;\012sub Schwa by schwa.sc;\012sub T by t.sc;\012sub Tbar by tbar.sc;\012sub Tcaron by tcaron.sc;\012sub Tcedilla by tcedilla.sc;\012sub Tcommaaccent by tcommaaccent.sc;\012sub Tdotbelow by tdotbelow.sc;\012sub Tlinebelow by tlinebelow.sc;\012sub U by u.sc;\012sub Uacute by uacute.sc;\012sub Ubreve by ubreve.sc;\012sub Ucaron by ucaron.sc;\012sub Ucircumflex by ucircumflex.sc;\012sub Udblgrave by udblgrave.sc;\012sub Udieresis by udieresis.sc;\012sub Udotbelow by udotbelow.sc;\012sub Ugrave by ugrave.sc;\012sub Uhookabove by uhookabove.sc;\012sub Uhorn by uhorn.sc;\012sub Uhornacute by uhornacute.sc;\012sub Uhorndotbelow by uhorndotbelow.sc;\012sub Uhorngrave by uhorngrave.sc;\012sub Uhornhookabove by uhornhookabove.sc;\012sub Uhorntilde by uhorntilde.sc;\012sub Uhungarumlaut by uhungarumlaut.sc;\012sub Uinvertedbreve by uinvertedbreve.sc;\012sub Umacron by umacron.sc;\012sub Umacrondieresis by umacrondieresis.sc;\012sub Uogonek by uogonek.sc;\012sub Uring by uring.sc;\012sub Utilde by utilde.sc;\012sub Utildeacute by utildeacute.sc;\012sub V by v.sc;\012sub W by w.sc;\012sub Wacute by wacute.sc;\012sub Wcircumflex by wcircumflex.sc;\012sub Wdieresis by wdieresis.sc;\012sub Wgrave by wgrave.sc;\012sub X by x.sc;\012sub Y by y.sc;\012sub Yacute by yacute.sc;\012sub Ycircumflex by ycircumflex.sc;\012sub Ydieresis by ydieresis.sc;\012sub Ydotaccent by ydotaccent.sc;\012sub Ydotbelow by ydotbelow.sc;\012sub Ygrave by ygrave.sc;\012sub Yhookabove by yhookabove.sc;\012sub Ymacron by ymacron.sc;\012sub Ytilde by ytilde.sc;\012sub Z by z.sc;\012sub Zacute by zacute.sc;\012sub Zcaron by zcaron.sc;\012sub Zdotaccent by zdotaccent.sc;\012sub Zdotbelow by zdotbelow.sc;\012sub Iacute_J.loclNLD by iacute_j.loclNLD.sc;\012sub exclam by exclam.sc;\012sub exclamdown by exclamdown.sc;\012sub period by period.sc;\012sub question by question.sc;\012sub questiondown by questiondown.sc;\012sub quotedbl by quotedbl.sc;\012sub quotesingle by quotesingle.sc;\012sub guillemetleft by guillemetleft.sc;\012sub guillemetright by guillemetright.sc;\012sub guilsinglleft by guilsinglleft.sc;\012sub guilsinglright by guilsinglright.sc;\012sub quotedblbase by quotedblbase.sc;\012sub quotedblleft by quotedblleft.sc;\012sub quotedblright by quotedblright.sc;\012sub quoteleft by quoteleft.sc;\012sub quoteright by quoteright.sc;\012sub quotesinglbase by quotesinglbase.sc;\012sub ampersand by ampersand.sc;\012sub strokeshortcomb by strokeshortcomb.sc;\012sub strokelongcomb by strokelongcomb.sc;\012sub slashlongcomb by slashlongcomb.sc;\012";
disabled = 1;
name = c2sc;
},
{
code = "sub backslash by backslash.case;\012sub periodcentered by periodcentered.case;\012sub bullet by bullet.case;\012sub slash by slash.case;\012sub periodcentered.loclCAT by periodcentered.loclCAT.case;\012sub braceleft by braceleft.case;\012sub braceright by braceright.case;\012sub bracketleft by bracketleft.case;\012sub bracketright by bracketright.case;\012sub parenleft by parenleft.case;\012sub parenright by parenright.case;\012sub emdash by emdash.case;\012sub endash by endash.case;\012sub hyphen by hyphen.case;\012sub guillemetleft by guillemetleft.case;\012sub guillemetright by guillemetright.case;\012sub guilsinglleft by guilsinglleft.case;\012sub guilsinglright by guilsinglright.case;\012sub upArrow by upArrow.case;\012sub rightArrow by rightArrow.case;\012sub downArrow by downArrow.case;\012sub leftArrow by leftArrow.case;\012sub at by at.case;\012sub dieresiscomb by dieresiscomb.case;\012sub dieresiscomb_gravecomb by dieresiscomb_gravecomb.case;\012sub dieresiscomb_acutecomb by dieresiscomb_acutecomb.case;\012sub dieresiscomb_macroncomb by dieresiscomb_macroncomb.case;\012sub dotaccentcomb by dotaccentcomb.case;\012sub dotaccentcomb_macroncomb by dotaccentcomb_macroncomb.case;\012sub gravecomb by gravecomb.case;\012sub gravecomb_macroncomb by gravecomb_macroncomb.case;\012sub acutecomb by acutecomb.case;\012sub acutecomb_dotaccentcomb by acutecomb_dotaccentcomb.case;\012sub acutecomb_macroncomb by acutecomb_macroncomb.case;\012sub hungarumlautcomb by hungarumlautcomb.case;\012sub circumflexcomb by circumflexcomb.case;\012sub caroncomb by caroncomb.case;\012sub caroncomb_dotaccentcomb by caroncomb_dotaccentcomb.case;\012sub brevecomb by brevecomb.case;\012sub tildecomb by tildecomb.case;\012sub tildecomb_dieresiscomb by tildecomb_dieresiscomb.case;\012sub tildecomb_acutecomb by tildecomb_acutecomb.case;\012sub tildecomb_macroncomb by tildecomb_macroncomb.case;\012sub macroncomb by macroncomb.case;\012sub macroncomb_dieresiscomb by macroncomb_dieresiscomb.case;\012sub macroncomb_gravecomb by macroncomb_gravecomb.case;\012sub macroncomb_acutecomb by macroncomb_acutecomb.case;\012sub hookabovecomb by hookabovecomb.case;\012sub dblgravecomb by dblgravecomb.case;\012sub breveinvertedcomb by breveinvertedcomb.case;\012sub strokeshortcomb by strokeshortcomb.case;\012sub slashshortcomb by slashshortcomb.case;\012sub slashlongcomb by slashlongcomb.case;\012sub brevecomb_acutecomb by brevecomb_acutecomb.case;\012sub brevecomb_gravecomb by brevecomb_gravecomb.case;\012sub brevecomb_hookabovecomb by brevecomb_hookabovecomb.case;\012sub brevecomb_tildecomb by brevecomb_tildecomb.case;\012sub circumflexcomb_acutecomb by circumflexcomb_acutecomb.case;\012sub circumflexcomb_gravecomb by circumflexcomb_gravecomb.case;\012sub circumflexcomb_hookabovecomb by circumflexcomb_hookabovecomb.case;\012sub circumflexcomb_tildecomb by circumflexcomb_tildecomb.case;\012";
disabled = 1;
name = case;
},
{
code = "lookup ccmp0 {\012	sub [i j]' lookup lookup_0 [dieresiscomb dotaccentcomb gravecomb acutecomb hungarumlautcomb circumflexcomb caroncomb brevecomb ringcomb tildecomb macroncomb hookabovecomb dblgravecomb breveinvertedcomb commaturnedabovecomb] ;\012	sub [i j]' lookup lookup_0 [horncomb dotbelowcomb dieresisbelowcomb cedillacomb ogonekcomb brevebelowcomb macronbelowcomb strokeshortcomb strokelongcomb slashshortcomb slashlongcomb] [dieresiscomb dotaccentcomb gravecomb acutecomb hungarumlautcomb circumflexcomb caroncomb brevecomb ringcomb tildecomb macroncomb hookabovecomb dblgravecomb breveinvertedcomb commaturnedabovecomb] ;\012	sub [dieresiscomb dieresiscomb_gravecomb dieresiscomb_acutecomb dieresiscomb_macroncomb dotaccentcomb dotaccentcomb_macroncomb gravecomb gravecomb_macroncomb acutecomb acutecomb_dotaccentcomb acutecomb_macroncomb hungarumlautcomb circumflexcomb caroncomb caroncomb_dotaccentcomb brevecomb tildecomb tildecomb_dieresiscomb tildecomb_acutecomb tildecomb_macroncomb macroncomb macroncomb_dieresiscomb macroncomb_gravecomb macroncomb_acutecomb hookabovecomb dblgravecomb breveinvertedcomb strokeshortcomb slashshortcomb slashlongcomb brevecomb_acutecomb brevecomb_gravecomb brevecomb_hookabovecomb brevecomb_tildecomb circumflexcomb_acutecomb circumflexcomb_gravecomb circumflexcomb_hookabovecomb circumflexcomb_tildecomb] [dieresiscomb dieresiscomb_gravecomb dieresiscomb_acutecomb dieresiscomb_macroncomb dotaccentcomb dotaccentcomb_macroncomb gravecomb gravecomb_macroncomb acutecomb acutecomb_dotaccentcomb acutecomb_macroncomb hungarumlautcomb circumflexcomb caroncomb caroncomb_dotaccentcomb brevecomb tildecomb tildecomb_dieresiscomb tildecomb_acutecomb tildecomb_macroncomb macroncomb macroncomb_dieresiscomb macroncomb_gravecomb macroncomb_acutecomb hookabovecomb dblgravecomb breveinvertedcomb strokeshortcomb slashshortcomb slashlongcomb brevecomb_acutecomb brevecomb_gravecomb brevecomb_hookabovecomb brevecomb_tildecomb circumflexcomb_acutecomb circumflexcomb_gravecomb circumflexcomb_hookabovecomb circumflexcomb_tildecomb]' lookup lookup_0 ;\012	sub [A Aacute Abreve Abreveacute Abrevedotbelow Abrevegrave Abrevehookabove Abrevetilde Acaron Acircumflex Acircumflexacute Acircumflexdotbelow Acircumflexgrave Acircumflexhookabove Acircumflextilde Adblgrave Adieresis Adotbelow Agrave Ahookabove Ainvertedbreve Amacron Aogonek Aring Aringacute Atilde AE AEacute B C Cacute Ccaron Ccedilla Ccedillaacute Ccircumflex Cdotaccent D DZcaron Eth Dcaron Dcroat Ddotbelow Dlinebelow Dzcaron E Eacute Ebreve Ecaron Ecedillabreve Ecircumflex Ecircumflexacute Ecircumflexdotbelow Ecircumflexgrave Ecircumflexhookabove Ecircumflextilde Edblgrave Edieresis Edotaccent Edotbelow Egrave Ehookabove Einvertedbreve Emacron Emacronacute Emacrongrave Eogonek Etilde Ezh Ezhcaron F G Gbreve Gcaron Gcircumflex Gcommaaccent Gdotaccent Gmacron Gstroke H Hbar Hbrevebelow Hcaron Hcircumflex Hdotbelow I IJ Iacute Ibreve Icircumflex Idblgrave Idieresis Idieresisacute Idotaccent Idotbelow Igrave Ihookabove Iinvertedbreve Imacron Iogonek Itilde J Jcircumflex K Kcaron Kcommaaccent L LJ Lacute Lcaron Lcommaaccent Ldot Ldotbelow Lj Llinebelow Lslash M Mdotbelow N NJ Nacute Ncaron Ncommaaccent Ndotaccent Ndotbelow Eng Nj Nlinebelow Ntilde O Oacute Obreve Ocircumflex Ocircumflexacute Ocircumflexdotbelow Ocircumflexgrave Ocircumflexhookabove Ocircumflextilde Odblgrave Odieresis Odieresismacron Odotaccentmacron Odotbelow Ograve Ohookabove Ohorn Ohornacute Ohorndotbelow Ohorngrave Ohornhookabove Ohorntilde Ohungarumlaut Oinvertedbreve Omacron Omacronacute Omacrongrave Oogonek Oslash Oslashacute Otilde Otildeacute Otildedieresis Otildemacron OE P Thorn Q R Racute Rcaron Rcommaaccent Rdblgrave Rdotbelow Rinvertedbreve Rlinebelow S Sacute Sacutedotaccent Saltillo Scaron Scarondotaccent Scedilla Scircumflex Scommaaccent Sdotaccent Sdotbelow Sdotbelowdotaccent Germandbls Schwa T Tbar Tcaron Tcedilla Tcommaaccent Tdotbelow Tlinebelow U Uacute Ubreve Ucaron Ucircumflex Udblgrave Udieresis Udotbelow Ugrave Uhookabove Uhorn Uhornacute Uhorndotbelow Uhorngrave Uhornhookabove Uhorntilde Uhungarumlaut Uinvertedbreve Umacron Umacrondieresis Uogonek Uring Utilde Utildeacute V W Wacute Wcircumflex Wdieresis Wgrave X Y Yacute Ycircumflex Ydieresis Ydotaccent Ydotbelow Ygrave Yhookabove Ymacron Ytilde Z Zacute Zcaron Zdotaccent Zdotbelow Iacute_J.loclNLD A.ss01 Aacute.ss01 Abreve.ss01 Abreveacute.ss01 Abrevedotbelow.ss01 Abrevegrave.ss01 Abrevehookabove.ss01 Abrevetilde.ss01 Acaron.ss01 Acircumflex.ss01 Acircumflexacute.ss01 Acircumflexdotbelow.ss01 Acircumflexgrave.ss01 Acircumflexhookabove.ss01 Acircumflextilde.ss01 Adblgrave.ss01 Adieresis.ss01 Adotbelow.ss01 Agrave.ss01 Ahookabove.ss01 Ainvertedbreve.ss01 Amacron.ss01 Aogonek.ss01 Aring.ss01 Aringacute.ss01 Atilde.ss01 AE.ss01 AEacute.ss01 DZcaron.ss01 Dzcaron.ss01 E.ss01 Eacute.ss01 Ebreve.ss01 Ecaron.ss01 Ecedillabreve.ss01 Ecircumflex.ss01 Ecircumflexacute.ss01 Ecircumflexdotbelow.ss01 Ecircumflexgrave.ss01 Ecircumflexhookabove.ss01 Ecircumflextilde.ss01 Edblgrave.ss01 Edieresis.ss01 Edotaccent.ss01 Edotbelow.ss01 Egrave.ss01 Ehookabove.ss01 Einvertedbreve.ss01 Emacron.ss01 Emacronacute.ss01 Emacrongrave.ss01 Eogonek.ss01 Etilde.ss01 F.ss01 G.ss01 Gbreve.ss01 Gcaron.ss01 Gcircumflex.ss01 Gcommaaccent.ss01 Gdotaccent.ss01 Gmacron.ss01 Gstroke.ss01 I.ss01 IJ.ss01 Iacute.ss01 Iacute_J.loclNLD.ss01 Ibreve.ss01 Icircumflex.ss01 Idblgrave.ss01 Idieresis.ss01 Idieresisacute.ss01 Idotaccent.ss01 Idotbelow.ss01 Igrave.ss01 Ihookabove.ss01 Iinvertedbreve.ss01 Imacron.ss01 Iogonek.ss01 Itilde.ss01 J.ss01 Jcircumflex.ss01 LJ.ss01 M.ss01 Mdotbelow.ss01 N.ss01 NJ.ss01 Nacute.ss01 Ncaron.ss01 Ncommaaccent.ss01 Ndotaccent.ss01 Ndotbelow.ss01 Eng.ss01 Nj.ss01 Nlinebelow.ss01 Ntilde.ss01 Q.ss01 Schwa.ss01 T.ss01 Tbar.ss01 Tcaron.ss01 Tcedilla.ss01 Tcommaaccent.ss01 Tdotbelow.ss01 Tlinebelow.ss01 U.ss01 Uacute.ss01 Ubreve.ss01 Ucaron.ss01 Ucircumflex.ss01 Udblgrave.ss01 Udieresis.ss01 Udotbelow.ss01 Ugrave.ss01 Uhookabove.ss01 Uhorn.ss01 Uhornacute.ss01 Uhorndotbelow.ss01 Uhorngrave.ss01 Uhornhookabove.ss01 Uhorntilde.ss01 Uhungarumlaut.ss01 Uinvertedbreve.ss01 Umacron.ss01 Umacrondieresis.ss01 Uogonek.ss01 Uring.ss01 Utilde.ss01 Utildeacute.ss01 W.ss01 Wacute.ss01 Wcircumflex.ss01 Wdieresis.ss01 Wgrave.ss01 Y.ss01 Yacute.ss01 Ycircumflex.ss01 Ydieresis.ss01 Ydotaccent.ss01 Ydotbelow.ss01 Ygrave.ss01 Yhookabove.ss01 Ymacron.ss01 Ytilde.ss01 Z.ss01 Zacute.ss01 Zcaron.ss01 Zdotaccent.ss01 Zdotbelow.ss01 A-cy Be-cy Ve-cy Ge-cy Gje-cy Gheupturn-cy De-cy Ie-cy Iegrave-cy Io-cy Zhe-cy Ze-cy Ii-cy Iishort-cy Iigrave-cy Iishorttail-cy Ka-cy Kje-cy El-cy Em-cy En-cy O-cy Pe-cy Er-cy Es-cy Te-cy U-cy Ushort-cy Ef-cy Ha-cy Che-cy Tse-cy Sha-cy Shcha-cy Dzhe-cy Softsign-cy Hardsign-cy Yeru-cy Lje-cy Nje-cy Dze-cy E-cy Ereversed-cy I-cy Yi-cy Je-cy Tshe-cy Iu-cy Ia-cy Dje-cy Yat-cy Yusbig-cy Fita-cy Izhitsa-cy Ghestroke-cy Ghemiddlehook-cy Zhedescender-cy Zedescender-cy Kadescender-cy Kaverticalstroke-cy Kastroke-cy Kabashkir-cy Endescender-cy Enghe-cy Pemiddlehook-cy Pedescender-cy Haabkhasian-cy Esdescender-cy Tedescender-cy Ustraight-cy Ustraightstroke-cy Hadescender-cy Tetse-cy Chedescender-cy Cheverticalstroke-cy Shha-cy Shhadescender-cy Cheabkhasian-cy Chedescenderabkhasian-cy Palochka-cy Zhebreve-cy Kahook-cy Enhook-cy Entail-cy Chekhakassian-cy Emtail-cy Abreve-cy Adieresis-cy Aie-cy Iebreve-cy Schwa-cy Schwadieresis-cy Zhedieresis-cy Zedieresis-cy Dzeabkhasian-cy Imacron-cy Idieresis-cy Odieresis-cy Obarred-cy Obarreddieresis-cy Edieresis-cy Umacron-cy Udieresis-cy Uhungarumlaut-cy Chedieresis-cy Gedescender-cy Yerudieresis-cy Gestrokehook-cy Hahook-cy Hastroke-cy Reversedze-cy Elhook-cy Qa-cy We-cy Semisoftsign-cy Ertick-cy EnLeftHook-cy Eldescender-cy De-cy.loclBGR El-cy.loclBGR Ef-cy.loclBGR Ghestroke-cy.loclBSH Zedescender-cy.loclBSH Esdescender-cy.loclBSH Esdescender-cy.loclCHU A-cy.ss01 De-cy.ss01 Ie-cy.ss01 Iegrave-cy.ss01 Io-cy.ss01 Ii-cy.ss01 Iishort-cy.ss01 Iishorttail-cy.ss01 Iigrave-cy.ss01 El-cy.ss01 Er-cy.ss01 Te-cy.ss01 U-cy.ss01 Ushort-cy.ss01 Ef-cy.ss01 Softsign-cy.ss01 Hardsign-cy.ss01 Yeru-cy.ss01 Lje-cy.ss01 Nje-cy.ss01 Je-cy.ss01 Yat-cy.ss01 Tedescender-cy.ss01 Abreve-cy.ss01 Adieresis-cy.ss01 Aie-cy.ss01 Iebreve-cy.ss01 Imacron-cy.ss01 Idieresis-cy.ss01 Umacron-cy.ss01 Udieresis-cy.ss01 Uhungarumlaut-cy.ss01 Yerudieresis-cy.ss01 Qa-cy.ss01 Semisoftsign-cy.ss01 Delta Omega angstrom kelvin] [dieresiscomb dieresiscomb_gravecomb dieresiscomb_acutecomb dieresiscomb_macroncomb dotaccentcomb dotaccentcomb_macroncomb gravecomb gravecomb_macroncomb acutecomb acutecomb_dotaccentcomb acutecomb_macroncomb hungarumlautcomb circumflexcomb caroncomb caroncomb_dotaccentcomb brevecomb tildecomb tildecomb_dieresiscomb tildecomb_acutecomb tildecomb_macroncomb macroncomb macroncomb_dieresiscomb macroncomb_gravecomb macroncomb_acutecomb hookabovecomb dblgravecomb breveinvertedcomb strokeshortcomb slashshortcomb slashlongcomb brevecomb_acutecomb brevecomb_gravecomb brevecomb_hookabovecomb brevecomb_tildecomb circumflexcomb_acutecomb circumflexcomb_gravecomb circumflexcomb_hookabovecomb circumflexcomb_tildecomb]' lookup lookup_0 ;\012} ccmp0;\012lookup ccmp1 {\012	sub [dieresiscomb dieresiscomb_gravecomb dieresiscomb_acutecomb dieresiscomb_macroncomb dotaccentcomb dotaccentcomb_macroncomb gravecomb gravecomb_macroncomb acutecomb acutecomb_dotaccentcomb acutecomb_macroncomb hungarumlautcomb circumflexcomb caroncomb caroncomb_dotaccentcomb brevecomb tildecomb tildecomb_dieresiscomb tildecomb_acutecomb tildecomb_macroncomb macroncomb macroncomb_dieresiscomb macroncomb_gravecomb macroncomb_acutecomb hookabovecomb dblgravecomb breveinvertedcomb strokeshortcomb slashshortcomb slashlongcomb brevecomb_acutecomb brevecomb_gravecomb brevecomb_hookabovecomb brevecomb_tildecomb circumflexcomb_acutecomb circumflexcomb_gravecomb circumflexcomb_hookabovecomb circumflexcomb_tildecomb]' lookup lookup_0 [dieresiscomb.case dieresiscomb_gravecomb.case dieresiscomb_acutecomb.case dieresiscomb_macroncomb.case dotaccentcomb.case dotaccentcomb_macroncomb.case gravecomb.case gravecomb_macroncomb.case acutecomb.case acutecomb_dotaccentcomb.case acutecomb_macroncomb.case hungarumlautcomb.case circumflexcomb.case caroncomb.case caroncomb_dotaccentcomb.case brevecomb.case tildecomb.case tildecomb_dieresiscomb.case tildecomb_acutecomb.case tildecomb_macroncomb.case macroncomb.case macroncomb_dieresiscomb.case macroncomb_gravecomb.case macroncomb_acutecomb.case hookabovecomb.case dblgravecomb.case breveinvertedcomb.case strokeshortcomb.case slashshortcomb.case slashlongcomb.case brevecomb_acutecomb.case brevecomb_gravecomb.case brevecomb_hookabovecomb.case brevecomb_tildecomb.case circumflexcomb_acutecomb.case circumflexcomb_gravecomb.case circumflexcomb_hookabovecomb.case circumflexcomb_tildecomb.case] ;\012	sub [dieresiscomb.case dieresiscomb_gravecomb.case dieresiscomb_acutecomb.case dieresiscomb_macroncomb.case dotaccentcomb.case dotaccentcomb_macroncomb.case gravecomb.case gravecomb_macroncomb.case acutecomb.case acutecomb_dotaccentcomb.case acutecomb_macroncomb.case hungarumlautcomb.case circumflexcomb.case caroncomb.case caroncomb_dotaccentcomb.case brevecomb.case tildecomb.case tildecomb_dieresiscomb.case tildecomb_acutecomb.case tildecomb_macroncomb.case macroncomb.case macroncomb_dieresiscomb.case macroncomb_gravecomb.case macroncomb_acutecomb.case hookabovecomb.case dblgravecomb.case breveinvertedcomb.case strokeshortcomb.case slashshortcomb.case slashlongcomb.case brevecomb_acutecomb.case brevecomb_gravecomb.case brevecomb_hookabovecomb.case brevecomb_tildecomb.case circumflexcomb_acutecomb.case circumflexcomb_gravecomb.case circumflexcomb_hookabovecomb.case circumflexcomb_tildecomb.case] [dieresiscomb dieresiscomb_gravecomb dieresiscomb_acutecomb dieresiscomb_macroncomb dotaccentcomb dotaccentcomb_macroncomb gravecomb gravecomb_macroncomb acutecomb acutecomb_dotaccentcomb acutecomb_macroncomb hungarumlautcomb circumflexcomb caroncomb caroncomb_dotaccentcomb brevecomb tildecomb tildecomb_dieresiscomb tildecomb_acutecomb tildecomb_macroncomb macroncomb macroncomb_dieresiscomb macroncomb_gravecomb macroncomb_acutecomb hookabovecomb dblgravecomb breveinvertedcomb strokeshortcomb slashshortcomb slashlongcomb brevecomb_acutecomb brevecomb_gravecomb brevecomb_hookabovecomb brevecomb_tildecomb circumflexcomb_acutecomb circumflexcomb_gravecomb circumflexcomb_hookabovecomb circumflexcomb_tildecomb]' lookup lookup_0 ;\012} ccmp1;\012lookup ccmp2 {\012	sub dieresiscomb gravecomb by dieresiscomb_gravecomb;\012	sub dieresiscomb acutecomb by dieresiscomb_acutecomb;\012	sub dieresiscomb macroncomb by dieresiscomb_macroncomb;\012	sub dotaccentcomb macroncomb by dotaccentcomb_macroncomb;\012	sub gravecomb macroncomb by gravecomb_macroncomb;\012	sub acutecomb dotaccentcomb by acutecomb_dotaccentcomb;\012	sub acutecomb macroncomb by acutecomb_macroncomb;\012	sub caroncomb dotaccentcomb by caroncomb_dotaccentcomb;\012	sub ringcomb acutecomb by ringcomb_acutecomb;\012	sub tildecomb dieresiscomb by tildecomb_dieresiscomb;\012	sub tildecomb acutecomb by tildecomb_acutecomb;\012	sub tildecomb macroncomb by tildecomb_macroncomb;\012	sub macroncomb dieresiscomb by macroncomb_dieresiscomb;\012	sub macroncomb gravecomb by macroncomb_gravecomb;\012	sub macroncomb acutecomb by macroncomb_acutecomb;\012	sub dieresiscomb.case gravecomb.case by dieresiscomb_gravecomb.case;\012	sub dieresiscomb.case acutecomb.case by dieresiscomb_acutecomb.case;\012	sub dieresiscomb.case macroncomb.case by dieresiscomb_macroncomb.case;\012	sub dotaccentcomb.case macroncomb.case by dotaccentcomb_macroncomb.case;\012	sub gravecomb.case macroncomb.case by gravecomb_macroncomb.case;\012	sub acutecomb.case dotaccentcomb.case by acutecomb_dotaccentcomb.case;\012	sub acutecomb.case macroncomb.case by acutecomb_macroncomb.case;\012	sub caroncomb.case dotaccentcomb.case by caroncomb_dotaccentcomb.case;\012	sub tildecomb.case dieresiscomb.case by tildecomb_dieresiscomb.case;\012	sub tildecomb.case acutecomb.case by tildecomb_acutecomb.case;\012	sub tildecomb.case macroncomb.case by tildecomb_macroncomb.case;\012	sub macroncomb.case dieresiscomb.case by macroncomb_dieresiscomb.case;\012	sub macroncomb.case gravecomb.case by macroncomb_gravecomb.case;\012	sub macroncomb.case acutecomb.case by macroncomb_acutecomb.case;\012} ccmp2;\012lookup ccmp3 {\012	sub dieresiscomb gravecomb by dieresiscomb_gravecomb;\012	sub dieresiscomb acutecomb by dieresiscomb_acutecomb;\012	sub dieresiscomb macroncomb by dieresiscomb_macroncomb;\012	sub dotaccentcomb macroncomb by dotaccentcomb_macroncomb;\012	sub gravecomb macroncomb by gravecomb_macroncomb;\012	sub acutecomb dotaccentcomb by acutecomb_dotaccentcomb;\012	sub acutecomb macroncomb by acutecomb_macroncomb;\012	sub caroncomb dotaccentcomb by caroncomb_dotaccentcomb;\012	sub ringcomb acutecomb by ringcomb_acutecomb;\012	sub tildecomb dieresiscomb by tildecomb_dieresiscomb;\012	sub tildecomb acutecomb by tildecomb_acutecomb;\012	sub tildecomb macroncomb by tildecomb_macroncomb;\012	sub macroncomb dieresiscomb by macroncomb_dieresiscomb;\012	sub macroncomb gravecomb by macroncomb_gravecomb;\012	sub macroncomb acutecomb by macroncomb_acutecomb;\012	sub dieresiscomb.case gravecomb.case by dieresiscomb_gravecomb.case;\012	sub dieresiscomb.case acutecomb.case by dieresiscomb_acutecomb.case;\012	sub dieresiscomb.case macroncomb.case by dieresiscomb_macroncomb.case;\012	sub dotaccentcomb.case macroncomb.case by dotaccentcomb_macroncomb.case;\012	sub gravecomb.case macroncomb.case by gravecomb_macroncomb.case;\012	sub acutecomb.case dotaccentcomb.case by acutecomb_dotaccentcomb.case;\012	sub acutecomb.case macroncomb.case by acutecomb_macroncomb.case;\012	sub caroncomb.case dotaccentcomb.case by caroncomb_dotaccentcomb.case;\012	sub tildecomb.case dieresiscomb.case by tildecomb_dieresiscomb.case;\012	sub tildecomb.case acutecomb.case by tildecomb_acutecomb.case;\012	sub tildecomb.case macroncomb.case by tildecomb_macroncomb.case;\012	sub macroncomb.case dieresiscomb.case by macroncomb_dieresiscomb.case;\012	sub macroncomb.case gravecomb.case by macroncomb_gravecomb.case;\012	sub macroncomb.case acutecomb.case by macroncomb_acutecomb.case;\012} ccmp3;\012lookup ccmp4 {\012	script latn;\012	sub circumflexcomb gravecomb by circumflexcomb_gravecomb;\012	sub circumflexcomb acutecomb by circumflexcomb_acutecomb;\012	sub circumflexcomb tildecomb by circumflexcomb_tildecomb;\012	sub circumflexcomb hookabovecomb by circumflexcomb_hookabovecomb;\012	sub brevecomb gravecomb by brevecomb_gravecomb;\012	sub brevecomb acutecomb by brevecomb_acutecomb;\012	sub brevecomb tildecomb by brevecomb_tildecomb;\012	sub brevecomb hookabovecomb by brevecomb_hookabovecomb;\012	sub circumflexcomb.case gravecomb.case by circumflexcomb_gravecomb.case;\012	sub circumflexcomb.case acutecomb.case by circumflexcomb_acutecomb.case;\012	sub circumflexcomb.case tildecomb.case by circumflexcomb_tildecomb.case;\012	sub circumflexcomb.case hookabovecomb.case by circumflexcomb_hookabovecomb.case;\012	sub brevecomb.case gravecomb.case by brevecomb_gravecomb.case;\012	sub brevecomb.case acutecomb.case by brevecomb_acutecomb.case;\012	sub brevecomb.case tildecomb.case by brevecomb_tildecomb.case;\012	sub brevecomb.case hookabovecomb.case by brevecomb_hookabovecomb.case;\012	sub circumflexcomb gravecomb by circumflexcomb_gravecomb;\012	sub circumflexcomb acutecomb by circumflexcomb_acutecomb;\012	sub circumflexcomb tildecomb by circumflexcomb_tildecomb;\012	sub circumflexcomb hookabovecomb by circumflexcomb_hookabovecomb;\012	sub brevecomb gravecomb by brevecomb_gravecomb;\012	sub brevecomb acutecomb by brevecomb_acutecomb;\012	sub brevecomb tildecomb by brevecomb_tildecomb;\012	sub brevecomb hookabovecomb by brevecomb_hookabovecomb;\012	sub circumflexcomb.case gravecomb.case by circumflexcomb_gravecomb.case;\012	sub circumflexcomb.case acutecomb.case by circumflexcomb_acutecomb.case;\012	sub circumflexcomb.case tildecomb.case by circumflexcomb_tildecomb.case;\012	sub circumflexcomb.case hookabovecomb.case by circumflexcomb_hookabovecomb.case;\012	sub brevecomb.case gravecomb.case by brevecomb_gravecomb.case;\012	sub brevecomb.case acutecomb.case by brevecomb_acutecomb.case;\012	sub brevecomb.case tildecomb.case by brevecomb_tildecomb.case;\012	sub brevecomb.case hookabovecomb.case by brevecomb_hookabovecomb.case;\012} ccmp4;\012";
disabled = 1;
name = ccmp;
},
{
code = "sub T h by T_h;\012";
disabled = 1;
name = dlig;
},
{
code = "sub zero by zero.dnom;\012sub one by one.dnom;\012sub two by two.dnom;\012sub three by three.dnom;\012sub four by four.dnom;\012sub five by five.dnom;\012sub six by six.dnom;\012sub seven by seven.dnom;\012sub eight by eight.dnom;\012sub nine by nine.dnom;\012";
disabled = 1;
name = dnom;
},
{
code = "lookup frac0 {\012	sub slash by fraction;\012} frac0;\012lookup frac1 {\012	sub zero by zero.numr;\012	sub one by one.numr;\012	sub two by two.numr;\012	sub three by three.numr;\012	sub four by four.numr;\012	sub five by five.numr;\012	sub six by six.numr;\012	sub seven by seven.numr;\012	sub eight by eight.numr;\012	sub nine by nine.numr;\012} frac1;\012lookup frac2 {\012	sub fraction [zero.numr one.numr two.numr three.numr four.numr five.numr six.numr seven.numr eight.numr nine.numr]' lookup lookup_1 ;\012	sub [zero.dnom one.dnom two.dnom three.dnom four.dnom five.dnom six.dnom seven.dnom eight.dnom nine.dnom] [zero.numr one.numr two.numr three.numr four.numr five.numr six.numr seven.numr eight.numr nine.numr]' lookup lookup_1 ;\012} frac2;\012";
disabled = 1;
name = frac;
},
{
code = "sub f i by fi;\012sub f l by fl;\012";
disabled = 1;
name = liga;
},
{
code = "sub zero.osf by zero;\012sub one.osf by one;\012sub two.osf by two;\012sub three.osf by three;\012sub four.osf by four;\012sub five.osf by five;\012sub six.osf by six;\012sub seven.osf by seven;\012sub eight.osf by eight;\012sub nine.osf by nine;\012";
disabled = 1;
name = lnum;
},
{
code = "lookup locl0 {\012	script cyrl;\012	language BGR ;\012	sub De-cy by De-cy.loclBGR;\012	sub El-cy by El-cy.loclBGR;\012	sub Ef-cy by Ef-cy.loclBGR;\012	sub ve-cy by ve-cy.loclBGR;\012	sub ge-cy by ge-cy.loclBGR;\012	sub de-cy by de-cy.loclBGR;\012	sub zhe-cy by zhe-cy.loclBGR;\012	sub ze-cy by ze-cy.loclBGR;\012	sub ii-cy by ii-cy.loclBGR;\012	sub iishort-cy by iishort-cy.loclBGR;\012	sub iigrave-cy by iigrave-cy.loclBGR;\012	sub ka-cy by ka-cy.loclBGR;\012	sub el-cy by el-cy.loclBGR;\012	sub en-cy by en-cy.loclBGR;\012	sub pe-cy by pe-cy.loclBGR;\012	sub te-cy by te-cy.loclBGR;\012	sub che-cy by che-cy.loclBGR;\012	sub tse-cy by tse-cy.loclBGR;\012	sub sha-cy by sha-cy.loclBGR;\012	sub shcha-cy by shcha-cy.loclBGR;\012	sub softsign-cy by softsign-cy.loclBGR;\012	sub hardsign-cy by hardsign-cy.loclBGR;\012	sub iu-cy by iu-cy.loclBGR;\012	language BSH ;\012	sub Ghestroke-cy by Ghestroke-cy.loclBSH;\012	sub Zedescender-cy by Zedescender-cy.loclBSH;\012	sub Esdescender-cy by Esdescender-cy.loclBSH;\012	sub ghestroke-cy by ghestroke-cy.loclBSH;\012	sub zedescender-cy by zedescender-cy.loclBSH;\012	language CHU ;\012	sub Esdescender-cy by Esdescender-cy.loclCHU;\012	sub esdescender-cy by esdescender-cy.loclCHU;\012	language MKD ;\012	sub gje-cy by gje-cy.loclMKD;\012	language SRB ;\012	sub be-cy by be-cy.loclSRB;\012	sub ge-cy by ge-cy.loclSRB;\012	sub de-cy by de-cy.loclSRB;\012	sub pe-cy by pe-cy.loclSRB;\012	sub te-cy by te-cy.loclSRB;\012} locl0;\012lookup locl1 {\012	script latn;\012	language AZE ;\012	sub i by idotaccent;\012	language CAT ;\012	sub l periodcentered' lookup lookup_0 l ;\012	sub L periodcentered' lookup lookup_1 L ;\012	language CRT ;\012	sub i by idotaccent;\012	language KAZ ;\012	sub i by idotaccent;\012	language MOL ;\012	sub Scedilla by Scommaaccent;\012	sub Tcedilla by Tcommaaccent;\012	sub scedilla by scommaaccent;\012	sub tcedilla by tcommaaccent;\012	language NLD ;\012	sub Iacute J by Iacute_J.loclNLD;\012	sub iacute j by iacute_j.loclNLD;\012	language ROM ;\012	sub Scedilla by Scommaaccent;\012	sub Tcedilla by Tcommaaccent;\012	sub scedilla by scommaaccent;\012	sub tcedilla by tcommaaccent;\012	language TAT ;\012	sub i by idotaccent;\012	language TRK ;\012	sub i by idotaccent;\012} locl1;\012";
disabled = 1;
name = locl;
},
{
code = "sub zero by zero.numr;\012sub one by one.numr;\012sub two by two.numr;\012sub three by three.numr;\012sub four by four.numr;\012sub five by five.numr;\012sub six by six.numr;\012sub seven by seven.numr;\012sub eight by eight.numr;\012sub nine by nine.numr;\012";
disabled = 1;
name = numr;
},
{
code = "sub zero by zero.osf;\012sub one by one.osf;\012sub two by two.osf;\012sub three by three.osf;\012sub four by four.osf;\012sub five by five.osf;\012sub six by six.osf;\012sub seven by seven.osf;\012sub eight by eight.osf;\012sub nine by nine.osf;\012sub zero.tf by zero.tosf;\012sub one.tf by one.tosf;\012sub two.tf by two.tosf;\012sub three.tf by three.tosf;\012sub four.tf by four.tosf;\012sub five.tf by five.tosf;\012sub six.tf by six.tosf;\012sub seven.tf by seven.tosf;\012sub eight.tf by eight.tosf;\012sub nine.tf by nine.tosf;\012";
disabled = 1;
name = onum;
},
{
code = "lookup ordn0 {\012	sub [zero one two three four five six seven eight nine] [A a]' lookup lookup_1 ;\012	sub [zero one two three four five six seven eight nine] [O o]' lookup lookup_1 ;\012} ordn0;\012lookup ordn1 {\012	sub N o period by numero;\012} ordn1;\012";
disabled = 1;
name = ordn;
},
{
code = "sub zero.tf by zero;\012sub one.tf by one;\012sub two.tf by two;\012sub three.tf by three;\012sub four.tf by four;\012sub five.tf by five;\012sub six.tf by six;\012sub seven.tf by seven;\012sub eight.tf by eight;\012sub nine.tf by nine;\012sub zero.tosf by zero.osf;\012sub one.tosf by one.osf;\012sub two.tosf by two.osf;\012sub three.tosf by three.osf;\012sub four.tosf by four.osf;\012sub five.tosf by five.osf;\012sub six.tosf by six.osf;\012sub seven.tosf by seven.osf;\012sub eight.tosf by eight.osf;\012sub nine.tosf by nine.osf;\012";
disabled = 1;
name = pnum;
},
{
code = "sub A by A.ss01;\012sub Aacute by Aacute.ss01;\012sub Abreve by Abreve.ss01;\012sub Abreveacute by Abreveacute.ss01;\012sub Abrevedotbelow by Abrevedotbelow.ss01;\012sub Abrevegrave by Abrevegrave.ss01;\012sub Abrevehookabove by Abrevehookabove.ss01;\012sub Abrevetilde by Abrevetilde.ss01;\012sub Acaron by Acaron.ss01;\012sub Acircumflex by Acircumflex.ss01;\012sub Acircumflexacute by Acircumflexacute.ss01;\012sub Acircumflexdotbelow by Acircumflexdotbelow.ss01;\012sub Acircumflexgrave by Acircumflexgrave.ss01;\012sub Acircumflexhookabove by Acircumflexhookabove.ss01;\012sub Acircumflextilde by Acircumflextilde.ss01;\012sub Adblgrave by Adblgrave.ss01;\012sub Adieresis by Adieresis.ss01;\012sub Adotbelow by Adotbelow.ss01;\012sub Agrave by Agrave.ss01;\012sub Ahookabove by Ahookabove.ss01;\012sub Ainvertedbreve by Ainvertedbreve.ss01;\012sub Amacron by Amacron.ss01;\012sub Aogonek by Aogonek.ss01;\012sub Aring by Aring.ss01;\012sub Aringacute by Aringacute.ss01;\012sub Atilde by Atilde.ss01;\012sub AE by AE.ss01;\012sub AEacute by AEacute.ss01;\012sub DZcaron by DZcaron.ss01;\012sub Dzcaron by Dzcaron.ss01;\012sub E by E.ss01;\012sub Eacute by Eacute.ss01;\012sub Ebreve by Ebreve.ss01;\012sub Ecaron by Ecaron.ss01;\012sub Ecedillabreve by Ecedillabreve.ss01;\012sub Ecircumflex by Ecircumflex.ss01;\012sub Ecircumflexacute by Ecircumflexacute.ss01;\012sub Ecircumflexdotbelow by Ecircumflexdotbelow.ss01;\012sub Ecircumflexgrave by Ecircumflexgrave.ss01;\012sub Ecircumflexhookabove by Ecircumflexhookabove.ss01;\012sub Ecircumflextilde by Ecircumflextilde.ss01;\012sub Edblgrave by Edblgrave.ss01;\012sub Edieresis by Edieresis.ss01;\012sub Edotaccent by Edotaccent.ss01;\012sub Edotbelow by Edotbelow.ss01;\012sub Egrave by Egrave.ss01;\012sub Ehookabove by Ehookabove.ss01;\012sub Einvertedbreve by Einvertedbreve.ss01;\012sub Emacron by Emacron.ss01;\012sub Emacronacute by Emacronacute.ss01;\012sub Emacrongrave by Emacrongrave.ss01;\012sub Eogonek by Eogonek.ss01;\012sub Etilde by Etilde.ss01;\012sub F by F.ss01;\012sub G by G.ss01;\012sub Gbreve by Gbreve.ss01;\012sub Gcaron by Gcaron.ss01;\012sub Gcircumflex by Gcircumflex.ss01;\012sub Gcommaaccent by Gcommaaccent.ss01;\012sub Gdotaccent by Gdotaccent.ss01;\012sub Gmacron by Gmacron.ss01;\012sub Gstroke by Gstroke.ss01;\012sub I by I.ss01;\012sub IJ by IJ.ss01;\012sub Iacute by Iacute.ss01;\012sub Ibreve by Ibreve.ss01;\012sub Icircumflex by Icircumflex.ss01;\012sub Idblgrave by Idblgrave.ss01;\012sub Idieresis by Idieresis.ss01;\012sub Idieresisacute by Idieresisacute.ss01;\012sub Idotaccent by Idotaccent.ss01;\012sub Idotbelow by Idotbelow.ss01;\012sub Igrave by Igrave.ss01;\012sub Ihookabove by Ihookabove.ss01;\012sub Iinvertedbreve by Iinvertedbreve.ss01;\012sub Imacron by Imacron.ss01;\012sub Iogonek by Iogonek.ss01;\012sub Itilde by Itilde.ss01;\012sub J by J.ss01;\012sub Jcircumflex by Jcircumflex.ss01;\012sub LJ by LJ.ss01;\012sub M by M.ss01;\012sub Mdotbelow by Mdotbelow.ss01;\012sub N by N.ss01;\012sub NJ by NJ.ss01;\012sub Nacute by Nacute.ss01;\012sub Ncaron by Ncaron.ss01;\012sub Ncommaaccent by Ncommaaccent.ss01;\012sub Ndotaccent by Ndotaccent.ss01;\012sub Ndotbelow by Ndotbelow.ss01;\012sub Eng by Eng.ss01;\012sub Nj by Nj.ss01;\012sub Nlinebelow by Nlinebelow.ss01;\012sub Ntilde by Ntilde.ss01;\012sub Q by Q.ss01;\012sub Schwa by Schwa.ss01;\012sub T by T.ss01;\012sub Tbar by Tbar.ss01;\012sub Tcaron by Tcaron.ss01;\012sub Tcedilla by Tcedilla.ss01;\012sub Tcommaaccent by Tcommaaccent.ss01;\012sub Tdotbelow by Tdotbelow.ss01;\012sub Tlinebelow by Tlinebelow.ss01;\012sub U by U.ss01;\012sub Uacute by Uacute.ss01;\012sub Ubreve by Ubreve.ss01;\012sub Ucaron by Ucaron.ss01;\012sub Ucircumflex by Ucircumflex.ss01;\012sub Udblgrave by Udblgrave.ss01;\012sub Udieresis by Udieresis.ss01;\012sub Udotbelow by Udotbelow.ss01;\012sub Ugrave by Ugrave.ss01;\012sub Uhookabove by Uhookabove.ss01;\012sub Uhorn by Uhorn.ss01;\012sub Uhornacute by Uhornacute.ss01;\012sub Uhorndotbelow by Uhorndotbelow.ss01;\012sub Uhorngrave by Uhorngrave.ss01;\012sub Uhornhookabove by Uhornhookabove.ss01;\012sub Uhorntilde by Uhorntilde.ss01;\012sub Uhungarumlaut by Uhungarumlaut.ss01;\012sub Uinvertedbreve by Uinvertedbreve.ss01;\012sub Umacron by Umacron.ss01;\012sub Umacrondieresis by Umacrondieresis.ss01;\012sub Uogonek by Uogonek.ss01;\012sub Uring by Uring.ss01;\012sub Utilde by Utilde.ss01;\012sub Utildeacute by Utildeacute.ss01;\012sub W by W.ss01;\012sub Wacute by Wacute.ss01;\012sub Wcircumflex by Wcircumflex.ss01;\012sub Wdieresis by Wdieresis.ss01;\012sub Wgrave by Wgrave.ss01;\012sub Y by Y.ss01;\012sub Yacute by Yacute.ss01;\012sub Ycircumflex by Ycircumflex.ss01;\012sub Ydieresis by Ydieresis.ss01;\012sub Ydotaccent by Ydotaccent.ss01;\012sub Ydotbelow by Ydotbelow.ss01;\012sub Ygrave by Ygrave.ss01;\012sub Yhookabove by Yhookabove.ss01;\012sub Ymacron by Ymacron.ss01;\012sub Ytilde by Ytilde.ss01;\012sub Z by Z.ss01;\012sub Zacute by Zacute.ss01;\012sub Zcaron by Zcaron.ss01;\012sub Zdotaccent by Zdotaccent.ss01;\012sub Zdotbelow by Zdotbelow.ss01;\012sub Iacute_J.loclNLD by Iacute_J.loclNLD.ss01;\012sub a by a.ss01;\012sub aacute by aacute.ss01;\012sub abreve by abreve.ss01;\012sub abreveacute by abreveacute.ss01;\012sub abrevedotbelow by abrevedotbelow.ss01;\012sub abrevegrave by abrevegrave.ss01;\012sub abrevehookabove by abrevehookabove.ss01;\012sub abrevetilde by abrevetilde.ss01;\012sub acaron by acaron.ss01;\012sub acircumflex by acircumflex.ss01;\012sub acircumflexacute by acircumflexacute.ss01;\012sub acircumflexdotbelow by acircumflexdotbelow.ss01;\012sub acircumflexgrave by acircumflexgrave.ss01;\012sub acircumflexhookabove by acircumflexhookabove.ss01;\012sub acircumflextilde by acircumflextilde.ss01;\012sub adblgrave by adblgrave.ss01;\012sub adieresis by adieresis.ss01;\012sub adotbelow by adotbelow.ss01;\012sub agrave by agrave.ss01;\012sub ahookabove by ahookabove.ss01;\012sub ainvertedbreve by ainvertedbreve.ss01;\012sub amacron by amacron.ss01;\012sub aogonek by aogonek.ss01;\012sub aring by aring.ss01;\012sub aringacute by aringacute.ss01;\012sub atilde by atilde.ss01;\012sub ae by ae.ss01;\012sub aeacute by aeacute.ss01;\012sub dzcaron by dzcaron.ss01;\012sub e by e.ss01;\012sub eacute by eacute.ss01;\012sub ebreve by ebreve.ss01;\012sub ecaron by ecaron.ss01;\012sub ecedillabreve by ecedillabreve.ss01;\012sub ecircumflex by ecircumflex.ss01;\012sub ecircumflexacute by ecircumflexacute.ss01;\012sub ecircumflexdotbelow by ecircumflexdotbelow.ss01;\012sub ecircumflexgrave by ecircumflexgrave.ss01;\012sub ecircumflexhookabove by ecircumflexhookabove.ss01;\012sub ecircumflextilde by ecircumflextilde.ss01;\012sub edblgrave by edblgrave.ss01;\012sub edieresis by edieresis.ss01;\012sub edotaccent by edotaccent.ss01;\012sub edotbelow by edotbelow.ss01;\012sub egrave by egrave.ss01;\012sub ehookabove by ehookabove.ss01;\012sub einvertedbreve by einvertedbreve.ss01;\012sub emacron by emacron.ss01;\012sub emacronacute by emacronacute.ss01;\012sub emacrongrave by emacrongrave.ss01;\012sub eogonek by eogonek.ss01;\012sub etilde by etilde.ss01;\012sub schwa by schwa.ss01;\012sub f by f.ss01;\012sub l by l.ss01;\012sub lacute by lacute.ss01;\012sub lcaron by lcaron.ss01;\012sub lcommaaccent by lcommaaccent.ss01;\012sub ldot by ldot.ss01;\012sub ldotbelow by ldotbelow.ss01;\012sub lj by lj.ss01;\012sub llinebelow by llinebelow.ss01;\012sub lslash by lslash.ss01;\012sub oe by oe.ss01;\012sub t by t.ss01;\012sub tbar by tbar.ss01;\012sub tcaron by tcaron.ss01;\012sub tcedilla by tcedilla.ss01;\012sub tcommaaccent by tcommaaccent.ss01;\012sub tdieresis by tdieresis.ss01;\012sub tdotbelow by tdotbelow.ss01;\012sub tlinebelow by tlinebelow.ss01;\012sub w by w.ss01;\012sub wacute by wacute.ss01;\012sub wcircumflex by wcircumflex.ss01;\012sub wdieresis by wdieresis.ss01;\012sub wgrave by wgrave.ss01;\012sub y by y.ss01;\012sub yacute by yacute.ss01;\012sub ycircumflex by ycircumflex.ss01;\012sub ydieresis by ydieresis.ss01;\012sub ydotbelow by ydotbelow.ss01;\012sub ygrave by ygrave.ss01;\012sub yhookabove by yhookabove.ss01;\012sub ymacron by ymacron.ss01;\012sub ytilde by ytilde.ss01;\012sub z by z.ss01;\012sub zacute by zacute.ss01;\012sub zcaron by zcaron.ss01;\012sub zdotaccent by zdotaccent.ss01;\012sub zdotbelow by zdotbelow.ss01;\012sub fi by fi.ss01;\012sub fl by fl.ss01;\012sub a.sc by a.sc.ss01;\012sub aacute.sc by aacute.sc.ss01;\012sub abreve.sc by abreve.sc.ss01;\012sub abreveacute.sc by abreveacute.sc.ss01;\012sub abrevedotbelow.sc by abrevedotbelow.sc.ss01;\012sub abrevegrave.sc by abrevegrave.sc.ss01;\012sub abrevehookabove.sc by abrevehookabove.sc.ss01;\012sub abrevetilde.sc by abrevetilde.sc.ss01;\012sub acaron.sc by acaron.sc.ss01;\012sub acircumflex.sc by acircumflex.sc.ss01;\012sub acircumflexacute.sc by acircumflexacute.sc.ss01;\012sub acircumflexdotbelow.sc by acircumflexdotbelow.sc.ss01;\012sub acircumflexgrave.sc by acircumflexgrave.sc.ss01;\012sub acircumflexhookabove.sc by acircumflexhookabove.sc.ss01;\012sub acircumflextilde.sc by acircumflextilde.sc.ss01;\012sub adblgrave.sc by adblgrave.sc.ss01;\012sub adieresis.sc by adieresis.sc.ss01;\012sub adotbelow.sc by adotbelow.sc.ss01;\012sub agrave.sc by agrave.sc.ss01;\012sub ahookabove.sc by ahookabove.sc.ss01;\012sub ainvertedbreve.sc by ainvertedbreve.sc.ss01;\012sub amacron.sc by amacron.sc.ss01;\012sub aogonek.sc by aogonek.sc.ss01;\012sub aring.sc by aring.sc.ss01;\012sub aringacute.sc by aringacute.sc.ss01;\012sub atilde.sc by atilde.sc.ss01;\012sub ae.sc by ae.sc.ss01;\012sub aeacute.sc by aeacute.sc.ss01;\012sub dzcaron.sc by dzcaron.sc.ss01;\012sub e.sc by e.sc.ss01;\012sub eacute.sc by eacute.sc.ss01;\012sub ebreve.sc by ebreve.sc.ss01;\012sub ecaron.sc by ecaron.sc.ss01;\012sub ecedillabreve.sc by ecedillabreve.sc.ss01;\012sub ecircumflex.sc by ecircumflex.sc.ss01;\012sub ecircumflexacute.sc by ecircumflexacute.sc.ss01;\012sub ecircumflexdotbelow.sc by ecircumflexdotbelow.sc.ss01;\012sub ecircumflexgrave.sc by ecircumflexgrave.sc.ss01;\012sub ecircumflexhookabove.sc by ecircumflexhookabove.sc.ss01;\012sub ecircumflextilde.sc by ecircumflextilde.sc.ss01;\012sub edblgrave.sc by edblgrave.sc.ss01;\012sub edieresis.sc by edieresis.sc.ss01;\012sub edotaccent.sc by edotaccent.sc.ss01;\012sub edotbelow.sc by edotbelow.sc.ss01;\012sub egrave.sc by egrave.sc.ss01;\012sub ehookabove.sc by ehookabove.sc.ss01;\012sub einvertedbreve.sc by einvertedbreve.sc.ss01;\012sub emacron.sc by emacron.sc.ss01;\012sub emacronacute.sc by emacronacute.sc.ss01;\012sub emacrongrave.sc by emacrongrave.sc.ss01;\012sub eogonek.sc by eogonek.sc.ss01;\012sub etilde.sc by etilde.sc.ss01;\012sub schwa.sc by schwa.sc.ss01;\012sub f.sc by f.sc.ss01;\012sub g.sc by g.sc.ss01;\012sub gbreve.sc by gbreve.sc.ss01;\012sub gcaron.sc by gcaron.sc.ss01;\012sub gcircumflex.sc by gcircumflex.sc.ss01;\012sub gcommaaccent.sc by gcommaaccent.sc.ss01;\012sub gdotaccent.sc by gdotaccent.sc.ss01;\012sub gmacron.sc by gmacron.sc.ss01;\012sub gstroke.sc by gstroke.sc.ss01;\012sub i.sc by i.sc.ss01;\012sub idotless.sc by idotless.sc.ss01;\012sub iacute.sc by iacute.sc.ss01;\012sub iacute_j.loclNLD.sc by iacute_j.loclNLD.sc.ss01;\012sub ibreve.sc by ibreve.sc.ss01;\012sub icircumflex.sc by icircumflex.sc.ss01;\012sub idblgrave.sc by idblgrave.sc.ss01;\012sub idieresis.sc by idieresis.sc.ss01;\012sub idieresisacute.sc by idieresisacute.sc.ss01;\012sub idotbelow.sc by idotbelow.sc.ss01;\012sub igrave.sc by igrave.sc.ss01;\012sub ihookabove.sc by ihookabove.sc.ss01;\012sub iinvertedbreve.sc by iinvertedbreve.sc.ss01;\012sub ij.sc by ij.sc.ss01;\012sub imacron.sc by imacron.sc.ss01;\012sub iogonek.sc by iogonek.sc.ss01;\012sub itilde.sc by itilde.sc.ss01;\012sub j.sc by j.sc.ss01;\012sub jcircumflex.sc by jcircumflex.sc.ss01;\012sub lj.sc by lj.sc.ss01;\012sub m.sc by m.sc.ss01;\012sub mdotbelow.sc by mdotbelow.sc.ss01;\012sub n.sc by n.sc.ss01;\012sub nacute.sc by nacute.sc.ss01;\012sub ncaron.sc by ncaron.sc.ss01;\012sub ncommaaccent.sc by ncommaaccent.sc.ss01;\012sub ndotaccent.sc by ndotaccent.sc.ss01;\012sub ndotbelow.sc by ndotbelow.sc.ss01;\012sub eng.sc by eng.sc.ss01;\012sub nj.sc by nj.sc.ss01;\012sub nlinebelow.sc by nlinebelow.sc.ss01;\012sub ntilde.sc by ntilde.sc.ss01;\012sub q.sc by q.sc.ss01;\012sub t.sc by t.sc.ss01;\012sub tbar.sc by tbar.sc.ss01;\012sub tcaron.sc by tcaron.sc.ss01;\012sub tcedilla.sc by tcedilla.sc.ss01;\012sub tcommaaccent.sc by tcommaaccent.sc.ss01;\012sub tdieresis.sc by tdieresis.sc.ss01;\012sub tdotbelow.sc by tdotbelow.sc.ss01;\012sub tlinebelow.sc by tlinebelow.sc.ss01;\012sub u.sc by u.sc.ss01;\012sub uacute.sc by uacute.sc.ss01;\012sub ubreve.sc by ubreve.sc.ss01;\012sub ucaron.sc by ucaron.sc.ss01;\012sub ucircumflex.sc by ucircumflex.sc.ss01;\012sub udblgrave.sc by udblgrave.sc.ss01;\012sub udieresis.sc by udieresis.sc.ss01;\012sub udotbelow.sc by udotbelow.sc.ss01;\012sub ugrave.sc by ugrave.sc.ss01;\012sub uhookabove.sc by uhookabove.sc.ss01;\012sub uhorn.sc by uhorn.sc.ss01;\012sub uhornacute.sc by uhornacute.sc.ss01;\012sub uhorndotbelow.sc by uhorndotbelow.sc.ss01;\012sub uhorngrave.sc by uhorngrave.sc.ss01;\012sub uhornhookabove.sc by uhornhookabove.sc.ss01;\012sub uhorntilde.sc by uhorntilde.sc.ss01;\012sub uhungarumlaut.sc by uhungarumlaut.sc.ss01;\012sub uinvertedbreve.sc by uinvertedbreve.sc.ss01;\012sub umacron.sc by umacron.sc.ss01;\012sub umacrondieresis.sc by umacrondieresis.sc.ss01;\012sub uogonek.sc by uogonek.sc.ss01;\012sub uring.sc by uring.sc.ss01;\012sub utilde.sc by utilde.sc.ss01;\012sub utildeacute.sc by utildeacute.sc.ss01;\012sub w.sc by w.sc.ss01;\012sub wacute.sc by wacute.sc.ss01;\012sub wcircumflex.sc by wcircumflex.sc.ss01;\012sub wdieresis.sc by wdieresis.sc.ss01;\012sub wgrave.sc by wgrave.sc.ss01;\012sub y.sc by y.sc.ss01;\012sub yacute.sc by yacute.sc.ss01;\012sub ycircumflex.sc by ycircumflex.sc.ss01;\012sub ydieresis.sc by ydieresis.sc.ss01;\012sub ydotaccent.sc by ydotaccent.sc.ss01;\012sub ydotbelow.sc by ydotbelow.sc.ss01;\012sub ygrave.sc by ygrave.sc.ss01;\012sub yhookabove.sc by yhookabove.sc.ss01;\012sub ymacron.sc by ymacron.sc.ss01;\012sub ytilde.sc by ytilde.sc.ss01;\012sub z.sc by z.sc.ss01;\012sub zacute.sc by zacute.sc.ss01;\012sub zcaron.sc by zcaron.sc.ss01;\012sub zdotaccent.sc by zdotaccent.sc.ss01;\012sub zdotbelow.sc by zdotbelow.sc.ss01;\012sub A-cy by A-cy.ss01;\012sub De-cy by De-cy.ss01;\012sub Ie-cy by Ie-cy.ss01;\012sub Iegrave-cy by Iegrave-cy.ss01;\012sub Io-cy by Io-cy.ss01;\012sub Ii-cy by Ii-cy.ss01;\012sub Iishort-cy by Iishort-cy.ss01;\012sub Iigrave-cy by Iigrave-cy.ss01;\012sub Iishorttail-cy by Iishorttail-cy.ss01;\012sub El-cy by El-cy.ss01;\012sub Er-cy by Er-cy.ss01;\012sub Te-cy by Te-cy.ss01;\012sub U-cy by U-cy.ss01;\012sub Ushort-cy by Ushort-cy.ss01;\012sub Ef-cy by Ef-cy.ss01;\012sub Softsign-cy by Softsign-cy.ss01;\012sub Hardsign-cy by Hardsign-cy.ss01;\012sub Yeru-cy by Yeru-cy.ss01;\012sub Lje-cy by Lje-cy.ss01;\012sub Nje-cy by Nje-cy.ss01;\012sub Je-cy by Je-cy.ss01;\012sub Yat-cy by Yat-cy.ss01;\012sub Tedescender-cy by Tedescender-cy.ss01;\012sub Abreve-cy by Abreve-cy.ss01;\012sub Adieresis-cy by Adieresis-cy.ss01;\012sub Aie-cy by Aie-cy.ss01;\012sub Iebreve-cy by Iebreve-cy.ss01;\012sub Imacron-cy by Imacron-cy.ss01;\012sub Idieresis-cy by Idieresis-cy.ss01;\012sub Umacron-cy by Umacron-cy.ss01;\012sub Udieresis-cy by Udieresis-cy.ss01;\012sub Uhungarumlaut-cy by Uhungarumlaut-cy.ss01;\012sub Yerudieresis-cy by Yerudieresis-cy.ss01;\012sub Qa-cy by Qa-cy.ss01;\012sub Semisoftsign-cy by Semisoftsign-cy.ss01;\012sub a-cy by a-cy.ss01;\012sub de-cy by de-cy.ss01;\012sub ie-cy by ie-cy.ss01;\012sub iegrave-cy by iegrave-cy.ss01;\012sub io-cy by io-cy.ss01;\012sub ii-cy by ii-cy.ss01;\012sub iishort-cy by iishort-cy.ss01;\012sub iigrave-cy by iigrave-cy.ss01;\012sub iishorttail-cy by iishorttail-cy.ss01;\012sub er-cy by er-cy.ss01;\012sub te-cy by te-cy.ss01;\012sub u-cy by u-cy.ss01;\012sub ushort-cy by ushort-cy.ss01;\012sub softsign-cy by softsign-cy.ss01;\012sub hardsign-cy by hardsign-cy.ss01;\012sub yeru-cy by yeru-cy.ss01;\012sub lje-cy by lje-cy.ss01;\012sub nje-cy by nje-cy.ss01;\012sub yat-cy by yat-cy.ss01;\012sub abreve-cy by abreve-cy.ss01;\012sub adieresis-cy by adieresis-cy.ss01;\012sub aie-cy by aie-cy.ss01;\012sub iebreve-cy by iebreve-cy.ss01;\012sub schwa-cy by schwa-cy.ss01;\012sub schwadieresis-cy by schwadieresis-cy.ss01;\012sub imacron-cy by imacron-cy.ss01;\012sub idieresis-cy by idieresis-cy.ss01;\012sub umacron-cy by umacron-cy.ss01;\012sub udieresis-cy by udieresis-cy.ss01;\012sub uhungarumlaut-cy by uhungarumlaut-cy.ss01;\012sub yerudieresis-cy by yerudieresis-cy.ss01;\012sub semisoftsign-cy by semisoftsign-cy.ss01;\012sub numero by numero.ss01;\012";
disabled = 1;
name = salt;
},
{
code = "sub zero by zero.sinf;\012sub one by one.sinf;\012sub two by two.sinf;\012sub three by three.sinf;\012sub four by four.sinf;\012sub five by five.sinf;\012sub six by six.sinf;\012sub seven by seven.sinf;\012sub eight by eight.sinf;\012sub nine by nine.sinf;\012";
disabled = 1;
name = sinf;
},
{
code = "sub a by a.sc;\012sub aacute by aacute.sc;\012sub abreve by abreve.sc;\012sub abreveacute by abreveacute.sc;\012sub abrevedotbelow by abrevedotbelow.sc;\012sub abrevegrave by abrevegrave.sc;\012sub abrevehookabove by abrevehookabove.sc;\012sub abrevetilde by abrevetilde.sc;\012sub acaron by acaron.sc;\012sub acircumflex by acircumflex.sc;\012sub acircumflexacute by acircumflexacute.sc;\012sub acircumflexdotbelow by acircumflexdotbelow.sc;\012sub acircumflexgrave by acircumflexgrave.sc;\012sub acircumflexhookabove by acircumflexhookabove.sc;\012sub acircumflextilde by acircumflextilde.sc;\012sub adblgrave by adblgrave.sc;\012sub adieresis by adieresis.sc;\012sub adotbelow by adotbelow.sc;\012sub agrave by agrave.sc;\012sub ahookabove by ahookabove.sc;\012sub ainvertedbreve by ainvertedbreve.sc;\012sub amacron by amacron.sc;\012sub aogonek by aogonek.sc;\012sub aring by aring.sc;\012sub aringacute by aringacute.sc;\012sub atilde by atilde.sc;\012sub ae by ae.sc;\012sub aeacute by aeacute.sc;\012sub b by b.sc;\012sub c by c.sc;\012sub cacute by cacute.sc;\012sub ccaron by ccaron.sc;\012sub ccedilla by ccedilla.sc;\012sub ccedillaacute by ccedillaacute.sc;\012sub ccircumflex by ccircumflex.sc;\012sub cdotaccent by cdotaccent.sc;\012sub d by d.sc;\012sub eth by eth.sc;\012sub dcaron by dcaron.sc;\012sub dcroat by dcroat.sc;\012sub ddotbelow by ddotbelow.sc;\012sub dlinebelow by dlinebelow.sc;\012sub dzcaron by dzcaron.sc;\012sub e by e.sc;\012sub eacute by eacute.sc;\012sub ebreve by ebreve.sc;\012sub ecaron by ecaron.sc;\012sub ecedillabreve by ecedillabreve.sc;\012sub ecircumflex by ecircumflex.sc;\012sub ecircumflexacute by ecircumflexacute.sc;\012sub ecircumflexdotbelow by ecircumflexdotbelow.sc;\012sub ecircumflexgrave by ecircumflexgrave.sc;\012sub ecircumflexhookabove by ecircumflexhookabove.sc;\012sub ecircumflextilde by ecircumflextilde.sc;\012sub edblgrave by edblgrave.sc;\012sub edieresis by edieresis.sc;\012sub edotaccent by edotaccent.sc;\012sub edotbelow by edotbelow.sc;\012sub egrave by egrave.sc;\012sub ehookabove by ehookabove.sc;\012sub einvertedbreve by einvertedbreve.sc;\012sub emacron by emacron.sc;\012sub emacronacute by emacronacute.sc;\012sub emacrongrave by emacrongrave.sc;\012sub eogonek by eogonek.sc;\012sub etilde by etilde.sc;\012sub schwa by schwa.sc;\012sub ezh by ezh.sc;\012sub ezhcaron by ezhcaron.sc;\012sub f by f.sc;\012sub g by g.sc;\012sub gbreve by gbreve.sc;\012sub gcaron by gcaron.sc;\012sub gcircumflex by gcircumflex.sc;\012sub gcommaaccent by gcommaaccent.sc;\012sub gdotaccent by gdotaccent.sc;\012sub gmacron by gmacron.sc;\012sub gstroke by gstroke.sc;\012sub h by h.sc;\012sub hbar by hbar.sc;\012sub hbrevebelow by hbrevebelow.sc;\012sub hcaron by hcaron.sc;\012sub hcircumflex by hcircumflex.sc;\012sub hdotbelow by hdotbelow.sc;\012sub i by i.sc;\012sub idotless by idotless.sc;\012sub iacute by iacute.sc;\012sub ibreve by ibreve.sc;\012sub icircumflex by icircumflex.sc;\012sub idblgrave by idblgrave.sc;\012sub idieresis by idieresis.sc;\012sub idieresisacute by idieresisacute.sc;\012sub idotaccent by idotaccent.sc;\012sub idotbelow by idotbelow.sc;\012sub igrave by igrave.sc;\012sub ihookabove by ihookabove.sc;\012sub iinvertedbreve by iinvertedbreve.sc;\012sub ij by ij.sc;\012sub imacron by imacron.sc;\012sub iogonek by iogonek.sc;\012sub itilde by itilde.sc;\012sub j by j.sc;\012sub jcircumflex by jcircumflex.sc;\012sub k by k.sc;\012sub kcaron by kcaron.sc;\012sub kcommaaccent by kcommaaccent.sc;\012sub kgreenlandic by kgreenlandic.sc;\012sub l by l.sc;\012sub lacute by lacute.sc;\012sub lcaron by lcaron.sc;\012sub lcommaaccent by lcommaaccent.sc;\012sub ldot by ldot.sc;\012sub ldotbelow by ldotbelow.sc;\012sub lj by lj.sc;\012sub llinebelow by llinebelow.sc;\012sub lslash by lslash.sc;\012sub m by m.sc;\012sub mdotbelow by mdotbelow.sc;\012sub n by n.sc;\012sub nacute by nacute.sc;\012sub ncaron by ncaron.sc;\012sub ncommaaccent by ncommaaccent.sc;\012sub ndotaccent by ndotaccent.sc;\012sub ndotbelow by ndotbelow.sc;\012sub eng by eng.sc;\012sub nj by nj.sc;\012sub nlinebelow by nlinebelow.sc;\012sub ntilde by ntilde.sc;\012sub o by o.sc;\012sub oacute by oacute.sc;\012sub obreve by obreve.sc;\012sub ocircumflex by ocircumflex.sc;\012sub ocircumflexacute by ocircumflexacute.sc;\012sub ocircumflexdotbelow by ocircumflexdotbelow.sc;\012sub ocircumflexgrave by ocircumflexgrave.sc;\012sub ocircumflexhookabove by ocircumflexhookabove.sc;\012sub ocircumflextilde by ocircumflextilde.sc;\012sub odblgrave by odblgrave.sc;\012sub odieresis by odieresis.sc;\012sub odieresismacron by odieresismacron.sc;\012sub odotaccentmacron by odotaccentmacron.sc;\012sub odotbelow by odotbelow.sc;\012sub ograve by ograve.sc;\012sub ohookabove by ohookabove.sc;\012sub ohorn by ohorn.sc;\012sub ohornacute by ohornacute.sc;\012sub ohorndotbelow by ohorndotbelow.sc;\012sub ohorngrave by ohorngrave.sc;\012sub ohornhookabove by ohornhookabove.sc;\012sub ohorntilde by ohorntilde.sc;\012sub ohungarumlaut by ohungarumlaut.sc;\012sub oinvertedbreve by oinvertedbreve.sc;\012sub omacron by omacron.sc;\012sub omacronacute by omacronacute.sc;\012sub omacrongrave by omacrongrave.sc;\012sub oogonek by oogonek.sc;\012sub oslash by oslash.sc;\012sub oslashacute by oslashacute.sc;\012sub otilde by otilde.sc;\012sub otildeacute by otildeacute.sc;\012sub otildedieresis by otildedieresis.sc;\012sub otildemacron by otildemacron.sc;\012sub oe by oe.sc;\012sub p by p.sc;\012sub thorn by thorn.sc;\012sub q by q.sc;\012sub r by r.sc;\012sub racute by racute.sc;\012sub rcaron by rcaron.sc;\012sub rcommaaccent by rcommaaccent.sc;\012sub rdblgrave by rdblgrave.sc;\012sub rdotbelow by rdotbelow.sc;\012sub rinvertedbreve by rinvertedbreve.sc;\012sub rlinebelow by rlinebelow.sc;\012sub s by s.sc;\012sub sacute by sacute.sc;\012sub sacutedotaccent by sacutedotaccent.sc;\012sub saltillo by saltillo.sc;\012sub scaron by scaron.sc;\012sub scarondotaccent by scarondotaccent.sc;\012sub scedilla by scedilla.sc;\012sub scircumflex by scircumflex.sc;\012sub scommaaccent by scommaaccent.sc;\012sub sdotaccent by sdotaccent.sc;\012sub sdotbelow by sdotbelow.sc;\012sub sdotbelowdotaccent by sdotbelowdotaccent.sc;\012sub germandbls by germandbls.sc;\012sub t by t.sc;\012sub tbar by tbar.sc;\012sub tcaron by tcaron.sc;\012sub tcedilla by tcedilla.sc;\012sub tcommaaccent by tcommaaccent.sc;\012sub tdieresis by tdieresis.sc;\012sub tdotbelow by tdotbelow.sc;\012sub tlinebelow by tlinebelow.sc;\012sub u by u.sc;\012sub uacute by uacute.sc;\012sub ubreve by ubreve.sc;\012sub ucaron by ucaron.sc;\012sub ucircumflex by ucircumflex.sc;\012sub udblgrave by udblgrave.sc;\012sub udieresis by udieresis.sc;\012sub udotbelow by udotbelow.sc;\012sub ugrave by ugrave.sc;\012sub uhookabove by uhookabove.sc;\012sub uhorn by uhorn.sc;\012sub uhornacute by uhornacute.sc;\012sub uhorndotbelow by uhorndotbelow.sc;\012sub uhorngrave by uhorngrave.sc;\012sub uhornhookabove by uhornhookabove.sc;\012sub uhorntilde by uhorntilde.sc;\012sub uhungarumlaut by uhungarumlaut.sc;\012sub uinvertedbreve by uinvertedbreve.sc;\012sub umacron by umacron.sc;\012sub umacrondieresis by umacrondieresis.sc;\012sub uogonek by uogonek.sc;\012sub uring by uring.sc;\012sub utilde by utilde.sc;\012sub utildeacute by utildeacute.sc;\012sub v by v.sc;\012sub w by w.sc;\012sub wacute by wacute.sc;\012sub wcircumflex by wcircumflex.sc;\012sub wdieresis by wdieresis.sc;\012sub wgrave by wgrave.sc;\012sub x by x.sc;\012sub y by y.sc;\012sub yacute by yacute.sc;\012sub ycircumflex by ycircumflex.sc;\012sub ydieresis by ydieresis.sc;\012sub ydotaccent by ydotaccent.sc;\012sub ydotbelow by ydotbelow.sc;\012sub ygrave by ygrave.sc;\012sub yhookabove by yhookabove.sc;\012sub ymacron by ymacron.sc;\012sub ytilde by ytilde.sc;\012sub z by z.sc;\012sub zacute by zacute.sc;\012sub zcaron by zcaron.sc;\012sub zdotaccent by zdotaccent.sc;\012sub zdotbelow by zdotbelow.sc;\012sub iacute_j.loclNLD by iacute_j.loclNLD.sc;\012sub exclam by exclam.sc;\012sub exclamdown by exclamdown.sc;\012sub period by period.sc;\012sub question by question.sc;\012sub questiondown by questiondown.sc;\012sub quotedbl by quotedbl.sc;\012sub quotesingle by quotesingle.sc;\012sub guillemetleft by guillemetleft.sc;\012sub guillemetright by guillemetright.sc;\012sub guilsinglleft by guilsinglleft.sc;\012sub guilsinglright by guilsinglright.sc;\012sub quotedblbase by quotedblbase.sc;\012sub quotedblleft by quotedblleft.sc;\012sub quotedblright by quotedblright.sc;\012sub quoteleft by quoteleft.sc;\012sub quoteright by quoteright.sc;\012sub quotesinglbase by quotesinglbase.sc;\012sub ampersand by ampersand.sc;\012sub strokeshortcomb by strokeshortcomb.sc;\012sub strokelongcomb by strokelongcomb.sc;\012sub slashlongcomb by slashlongcomb.sc;\012";
disabled = 1;
name = smcp;
},
{
code = "sub A by A.ss01;\012sub Aacute by Aacute.ss01;\012sub Abreve by Abreve.ss01;\012sub Abreveacute by Abreveacute.ss01;\012sub Abrevedotbelow by Abrevedotbelow.ss01;\012sub Abrevegrave by Abrevegrave.ss01;\012sub Abrevehookabove by Abrevehookabove.ss01;\012sub Abrevetilde by Abrevetilde.ss01;\012sub Acaron by Acaron.ss01;\012sub Acircumflex by Acircumflex.ss01;\012sub Acircumflexacute by Acircumflexacute.ss01;\012sub Acircumflexdotbelow by Acircumflexdotbelow.ss01;\012sub Acircumflexgrave by Acircumflexgrave.ss01;\012sub Acircumflexhookabove by Acircumflexhookabove.ss01;\012sub Acircumflextilde by Acircumflextilde.ss01;\012sub Adblgrave by Adblgrave.ss01;\012sub Adieresis by Adieresis.ss01;\012sub Adotbelow by Adotbelow.ss01;\012sub Agrave by Agrave.ss01;\012sub Ahookabove by Ahookabove.ss01;\012sub Ainvertedbreve by Ainvertedbreve.ss01;\012sub Amacron by Amacron.ss01;\012sub Aogonek by Aogonek.ss01;\012sub Aring by Aring.ss01;\012sub Aringacute by Aringacute.ss01;\012sub Atilde by Atilde.ss01;\012sub AE by AE.ss01;\012sub AEacute by AEacute.ss01;\012sub DZcaron by DZcaron.ss01;\012sub Dzcaron by Dzcaron.ss01;\012sub E by E.ss01;\012sub Eacute by Eacute.ss01;\012sub Ebreve by Ebreve.ss01;\012sub Ecaron by Ecaron.ss01;\012sub Ecedillabreve by Ecedillabreve.ss01;\012sub Ecircumflex by Ecircumflex.ss01;\012sub Ecircumflexacute by Ecircumflexacute.ss01;\012sub Ecircumflexdotbelow by Ecircumflexdotbelow.ss01;\012sub Ecircumflexgrave by Ecircumflexgrave.ss01;\012sub Ecircumflexhookabove by Ecircumflexhookabove.ss01;\012sub Ecircumflextilde by Ecircumflextilde.ss01;\012sub Edblgrave by Edblgrave.ss01;\012sub Edieresis by Edieresis.ss01;\012sub Edotaccent by Edotaccent.ss01;\012sub Edotbelow by Edotbelow.ss01;\012sub Egrave by Egrave.ss01;\012sub Ehookabove by Ehookabove.ss01;\012sub Einvertedbreve by Einvertedbreve.ss01;\012sub Emacron by Emacron.ss01;\012sub Emacronacute by Emacronacute.ss01;\012sub Emacrongrave by Emacrongrave.ss01;\012sub Eogonek by Eogonek.ss01;\012sub Etilde by Etilde.ss01;\012sub F by F.ss01;\012sub G by G.ss01;\012sub Gbreve by Gbreve.ss01;\012sub Gcaron by Gcaron.ss01;\012sub Gcircumflex by Gcircumflex.ss01;\012sub Gcommaaccent by Gcommaaccent.ss01;\012sub Gdotaccent by Gdotaccent.ss01;\012sub Gmacron by Gmacron.ss01;\012sub Gstroke by Gstroke.ss01;\012sub I by I.ss01;\012sub IJ by IJ.ss01;\012sub Iacute by Iacute.ss01;\012sub Ibreve by Ibreve.ss01;\012sub Icircumflex by Icircumflex.ss01;\012sub Idblgrave by Idblgrave.ss01;\012sub Idieresis by Idieresis.ss01;\012sub Idieresisacute by Idieresisacute.ss01;\012sub Idotaccent by Idotaccent.ss01;\012sub Idotbelow by Idotbelow.ss01;\012sub Igrave by Igrave.ss01;\012sub Ihookabove by Ihookabove.ss01;\012sub Iinvertedbreve by Iinvertedbreve.ss01;\012sub Imacron by Imacron.ss01;\012sub Iogonek by Iogonek.ss01;\012sub Itilde by Itilde.ss01;\012sub J by J.ss01;\012sub Jcircumflex by Jcircumflex.ss01;\012sub LJ by LJ.ss01;\012sub M by M.ss01;\012sub Mdotbelow by Mdotbelow.ss01;\012sub N by N.ss01;\012sub NJ by NJ.ss01;\012sub Nacute by Nacute.ss01;\012sub Ncaron by Ncaron.ss01;\012sub Ncommaaccent by Ncommaaccent.ss01;\012sub Ndotaccent by Ndotaccent.ss01;\012sub Ndotbelow by Ndotbelow.ss01;\012sub Eng by Eng.ss01;\012sub Nj by Nj.ss01;\012sub Nlinebelow by Nlinebelow.ss01;\012sub Ntilde by Ntilde.ss01;\012sub Q by Q.ss01;\012sub Schwa by Schwa.ss01;\012sub T by T.ss01;\012sub Tbar by Tbar.ss01;\012sub Tcaron by Tcaron.ss01;\012sub Tcedilla by Tcedilla.ss01;\012sub Tcommaaccent by Tcommaaccent.ss01;\012sub Tdotbelow by Tdotbelow.ss01;\012sub Tlinebelow by Tlinebelow.ss01;\012sub U by U.ss01;\012sub Uacute by Uacute.ss01;\012sub Ubreve by Ubreve.ss01;\012sub Ucaron by Ucaron.ss01;\012sub Ucircumflex by Ucircumflex.ss01;\012sub Udblgrave by Udblgrave.ss01;\012sub Udieresis by Udieresis.ss01;\012sub Udotbelow by Udotbelow.ss01;\012sub Ugrave by Ugrave.ss01;\012sub Uhookabove by Uhookabove.ss01;\012sub Uhorn by Uhorn.ss01;\012sub Uhornacute by Uhornacute.ss01;\012sub Uhorndotbelow by Uhorndotbelow.ss01;\012sub Uhorngrave by Uhorngrave.ss01;\012sub Uhornhookabove by Uhornhookabove.ss01;\012sub Uhorntilde by Uhorntilde.ss01;\012sub Uhungarumlaut by Uhungarumlaut.ss01;\012sub Uinvertedbreve by Uinvertedbreve.ss01;\012sub Umacron by Umacron.ss01;\012sub Umacrondieresis by Umacrondieresis.ss01;\012sub Uogonek by Uogonek.ss01;\012sub Uring by Uring.ss01;\012sub Utilde by Utilde.ss01;\012sub Utildeacute by Utildeacute.ss01;\012sub W by W.ss01;\012sub Wacute by Wacute.ss01;\012sub Wcircumflex by Wcircumflex.ss01;\012sub Wdieresis by Wdieresis.ss01;\012sub Wgrave by Wgrave.ss01;\012sub Y by Y.ss01;\012sub Yacute by Yacute.ss01;\012sub Ycircumflex by Ycircumflex.ss01;\012sub Ydieresis by Ydieresis.ss01;\012sub Ydotaccent by Ydotaccent.ss01;\012sub Ydotbelow by Ydotbelow.ss01;\012sub Ygrave by Ygrave.ss01;\012sub Yhookabove by Yhookabove.ss01;\012sub Ymacron by Ymacron.ss01;\012sub Ytilde by Ytilde.ss01;\012sub Z by Z.ss01;\012sub Zacute by Zacute.ss01;\012sub Zcaron by Zcaron.ss01;\012sub Zdotaccent by Zdotaccent.ss01;\012sub Zdotbelow by Zdotbelow.ss01;\012sub Iacute_J.loclNLD by Iacute_J.loclNLD.ss01;\012sub a by a.ss01;\012sub aacute by aacute.ss01;\012sub abreve by abreve.ss01;\012sub abreveacute by abreveacute.ss01;\012sub abrevedotbelow by abrevedotbelow.ss01;\012sub abrevegrave by abrevegrave.ss01;\012sub abrevehookabove by abrevehookabove.ss01;\012sub abrevetilde by abrevetilde.ss01;\012sub acaron by acaron.ss01;\012sub acircumflex by acircumflex.ss01;\012sub acircumflexacute by acircumflexacute.ss01;\012sub acircumflexdotbelow by acircumflexdotbelow.ss01;\012sub acircumflexgrave by acircumflexgrave.ss01;\012sub acircumflexhookabove by acircumflexhookabove.ss01;\012sub acircumflextilde by acircumflextilde.ss01;\012sub adblgrave by adblgrave.ss01;\012sub adieresis by adieresis.ss01;\012sub adotbelow by adotbelow.ss01;\012sub agrave by agrave.ss01;\012sub ahookabove by ahookabove.ss01;\012sub ainvertedbreve by ainvertedbreve.ss01;\012sub amacron by amacron.ss01;\012sub aogonek by aogonek.ss01;\012sub aring by aring.ss01;\012sub aringacute by aringacute.ss01;\012sub atilde by atilde.ss01;\012sub ae by ae.ss01;\012sub aeacute by aeacute.ss01;\012sub dzcaron by dzcaron.ss01;\012sub e by e.ss01;\012sub eacute by eacute.ss01;\012sub ebreve by ebreve.ss01;\012sub ecaron by ecaron.ss01;\012sub ecedillabreve by ecedillabreve.ss01;\012sub ecircumflex by ecircumflex.ss01;\012sub ecircumflexacute by ecircumflexacute.ss01;\012sub ecircumflexdotbelow by ecircumflexdotbelow.ss01;\012sub ecircumflexgrave by ecircumflexgrave.ss01;\012sub ecircumflexhookabove by ecircumflexhookabove.ss01;\012sub ecircumflextilde by ecircumflextilde.ss01;\012sub edblgrave by edblgrave.ss01;\012sub edieresis by edieresis.ss01;\012sub edotaccent by edotaccent.ss01;\012sub edotbelow by edotbelow.ss01;\012sub egrave by egrave.ss01;\012sub ehookabove by ehookabove.ss01;\012sub einvertedbreve by einvertedbreve.ss01;\012sub emacron by emacron.ss01;\012sub emacronacute by emacronacute.ss01;\012sub emacrongrave by emacrongrave.ss01;\012sub eogonek by eogonek.ss01;\012sub etilde by etilde.ss01;\012sub schwa by schwa.ss01;\012sub f by f.ss01;\012sub l by l.ss01;\012sub lacute by lacute.ss01;\012sub lcaron by lcaron.ss01;\012sub lcommaaccent by lcommaaccent.ss01;\012sub ldot by ldot.ss01;\012sub ldotbelow by ldotbelow.ss01;\012sub lj by lj.ss01;\012sub llinebelow by llinebelow.ss01;\012sub lslash by lslash.ss01;\012sub oe by oe.ss01;\012sub t by t.ss01;\012sub tbar by tbar.ss01;\012sub tcaron by tcaron.ss01;\012sub tcedilla by tcedilla.ss01;\012sub tcommaaccent by tcommaaccent.ss01;\012sub tdieresis by tdieresis.ss01;\012sub tdotbelow by tdotbelow.ss01;\012sub tlinebelow by tlinebelow.ss01;\012sub w by w.ss01;\012sub wacute by wacute.ss01;\012sub wcircumflex by wcircumflex.ss01;\012sub wdieresis by wdieresis.ss01;\012sub wgrave by wgrave.ss01;\012sub y by y.ss01;\012sub yacute by yacute.ss01;\012sub ycircumflex by ycircumflex.ss01;\012sub ydieresis by ydieresis.ss01;\012sub ydotbelow by ydotbelow.ss01;\012sub ygrave by ygrave.ss01;\012sub yhookabove by yhookabove.ss01;\012sub ymacron by ymacron.ss01;\012sub ytilde by ytilde.ss01;\012sub z by z.ss01;\012sub zacute by zacute.ss01;\012sub zcaron by zcaron.ss01;\012sub zdotaccent by zdotaccent.ss01;\012sub zdotbelow by zdotbelow.ss01;\012sub fi by fi.ss01;\012sub fl by fl.ss01;\012sub a.sc by a.sc.ss01;\012sub aacute.sc by aacute.sc.ss01;\012sub abreve.sc by abreve.sc.ss01;\012sub abreveacute.sc by abreveacute.sc.ss01;\012sub abrevedotbelow.sc by abrevedotbelow.sc.ss01;\012sub abrevegrave.sc by abrevegrave.sc.ss01;\012sub abrevehookabove.sc by abrevehookabove.sc.ss01;\012sub abrevetilde.sc by abrevetilde.sc.ss01;\012sub acaron.sc by acaron.sc.ss01;\012sub acircumflex.sc by acircumflex.sc.ss01;\012sub acircumflexacute.sc by acircumflexacute.sc.ss01;\012sub acircumflexdotbelow.sc by acircumflexdotbelow.sc.ss01;\012sub acircumflexgrave.sc by acircumflexgrave.sc.ss01;\012sub acircumflexhookabove.sc by acircumflexhookabove.sc.ss01;\012sub acircumflextilde.sc by acircumflextilde.sc.ss01;\012sub adblgrave.sc by adblgrave.sc.ss01;\012sub adieresis.sc by adieresis.sc.ss01;\012sub adotbelow.sc by adotbelow.sc.ss01;\012sub agrave.sc by agrave.sc.ss01;\012sub ahookabove.sc by ahookabove.sc.ss01;\012sub ainvertedbreve.sc by ainvertedbreve.sc.ss01;\012sub amacron.sc by amacron.sc.ss01;\012sub aogonek.sc by aogonek.sc.ss01;\012sub aring.sc by aring.sc.ss01;\012sub aringacute.sc by aringacute.sc.ss01;\012sub atilde.sc by atilde.sc.ss01;\012sub ae.sc by ae.sc.ss01;\012sub aeacute.sc by aeacute.sc.ss01;\012sub dzcaron.sc by dzcaron.sc.ss01;\012sub e.sc by e.sc.ss01;\012sub eacute.sc by eacute.sc.ss01;\012sub ebreve.sc by ebreve.sc.ss01;\012sub ecaron.sc by ecaron.sc.ss01;\012sub ecedillabreve.sc by ecedillabreve.sc.ss01;\012sub ecircumflex.sc by ecircumflex.sc.ss01;\012sub ecircumflexacute.sc by ecircumflexacute.sc.ss01;\012sub ecircumflexdotbelow.sc by ecircumflexdotbelow.sc.ss01;\012sub ecircumflexgrave.sc by ecircumflexgrave.sc.ss01;\012sub ecircumflexhookabove.sc by ecircumflexhookabove.sc.ss01;\012sub ecircumflextilde.sc by ecircumflextilde.sc.ss01;\012sub edblgrave.sc by edblgrave.sc.ss01;\012sub edieresis.sc by edieresis.sc.ss01;\012sub edotaccent.sc by edotaccent.sc.ss01;\012sub edotbelow.sc by edotbelow.sc.ss01;\012sub egrave.sc by egrave.sc.ss01;\012sub ehookabove.sc by ehookabove.sc.ss01;\012sub einvertedbreve.sc by einvertedbreve.sc.ss01;\012sub emacron.sc by emacron.sc.ss01;\012sub emacronacute.sc by emacronacute.sc.ss01;\012sub emacrongrave.sc by emacrongrave.sc.ss01;\012sub eogonek.sc by eogonek.sc.ss01;\012sub etilde.sc by etilde.sc.ss01;\012sub schwa.sc by schwa.sc.ss01;\012sub f.sc by f.sc.ss01;\012sub g.sc by g.sc.ss01;\012sub gbreve.sc by gbreve.sc.ss01;\012sub gcaron.sc by gcaron.sc.ss01;\012sub gcircumflex.sc by gcircumflex.sc.ss01;\012sub gcommaaccent.sc by gcommaaccent.sc.ss01;\012sub gdotaccent.sc by gdotaccent.sc.ss01;\012sub gmacron.sc by gmacron.sc.ss01;\012sub gstroke.sc by gstroke.sc.ss01;\012sub i.sc by i.sc.ss01;\012sub idotless.sc by idotless.sc.ss01;\012sub iacute.sc by iacute.sc.ss01;\012sub iacute_j.loclNLD.sc by iacute_j.loclNLD.sc.ss01;\012sub ibreve.sc by ibreve.sc.ss01;\012sub icircumflex.sc by icircumflex.sc.ss01;\012sub idblgrave.sc by idblgrave.sc.ss01;\012sub idieresis.sc by idieresis.sc.ss01;\012sub idieresisacute.sc by idieresisacute.sc.ss01;\012sub idotbelow.sc by idotbelow.sc.ss01;\012sub igrave.sc by igrave.sc.ss01;\012sub ihookabove.sc by ihookabove.sc.ss01;\012sub iinvertedbreve.sc by iinvertedbreve.sc.ss01;\012sub ij.sc by ij.sc.ss01;\012sub imacron.sc by imacron.sc.ss01;\012sub iogonek.sc by iogonek.sc.ss01;\012sub itilde.sc by itilde.sc.ss01;\012sub j.sc by j.sc.ss01;\012sub jcircumflex.sc by jcircumflex.sc.ss01;\012sub lj.sc by lj.sc.ss01;\012sub m.sc by m.sc.ss01;\012sub mdotbelow.sc by mdotbelow.sc.ss01;\012sub n.sc by n.sc.ss01;\012sub nacute.sc by nacute.sc.ss01;\012sub ncaron.sc by ncaron.sc.ss01;\012sub ncommaaccent.sc by ncommaaccent.sc.ss01;\012sub ndotaccent.sc by ndotaccent.sc.ss01;\012sub ndotbelow.sc by ndotbelow.sc.ss01;\012sub eng.sc by eng.sc.ss01;\012sub nj.sc by nj.sc.ss01;\012sub nlinebelow.sc by nlinebelow.sc.ss01;\012sub ntilde.sc by ntilde.sc.ss01;\012sub q.sc by q.sc.ss01;\012sub t.sc by t.sc.ss01;\012sub tbar.sc by tbar.sc.ss01;\012sub tcaron.sc by tcaron.sc.ss01;\012sub tcedilla.sc by tcedilla.sc.ss01;\012sub tcommaaccent.sc by tcommaaccent.sc.ss01;\012sub tdieresis.sc by tdieresis.sc.ss01;\012sub tdotbelow.sc by tdotbelow.sc.ss01;\012sub tlinebelow.sc by tlinebelow.sc.ss01;\012sub u.sc by u.sc.ss01;\012sub uacute.sc by uacute.sc.ss01;\012sub ubreve.sc by ubreve.sc.ss01;\012sub ucaron.sc by ucaron.sc.ss01;\012sub ucircumflex.sc by ucircumflex.sc.ss01;\012sub udblgrave.sc by udblgrave.sc.ss01;\012sub udieresis.sc by udieresis.sc.ss01;\012sub udotbelow.sc by udotbelow.sc.ss01;\012sub ugrave.sc by ugrave.sc.ss01;\012sub uhookabove.sc by uhookabove.sc.ss01;\012sub uhorn.sc by uhorn.sc.ss01;\012sub uhornacute.sc by uhornacute.sc.ss01;\012sub uhorndotbelow.sc by uhorndotbelow.sc.ss01;\012sub uhorngrave.sc by uhorngrave.sc.ss01;\012sub uhornhookabove.sc by uhornhookabove.sc.ss01;\012sub uhorntilde.sc by uhorntilde.sc.ss01;\012sub uhungarumlaut.sc by uhungarumlaut.sc.ss01;\012sub uinvertedbreve.sc by uinvertedbreve.sc.ss01;\012sub umacron.sc by umacron.sc.ss01;\012sub umacrondieresis.sc by umacrondieresis.sc.ss01;\012sub uogonek.sc by uogonek.sc.ss01;\012sub uring.sc by uring.sc.ss01;\012sub utilde.sc by utilde.sc.ss01;\012sub utildeacute.sc by utildeacute.sc.ss01;\012sub w.sc by w.sc.ss01;\012sub wacute.sc by wacute.sc.ss01;\012sub wcircumflex.sc by wcircumflex.sc.ss01;\012sub wdieresis.sc by wdieresis.sc.ss01;\012sub wgrave.sc by wgrave.sc.ss01;\012sub y.sc by y.sc.ss01;\012sub yacute.sc by yacute.sc.ss01;\012sub ycircumflex.sc by ycircumflex.sc.ss01;\012sub ydieresis.sc by ydieresis.sc.ss01;\012sub ydotaccent.sc by ydotaccent.sc.ss01;\012sub ydotbelow.sc by ydotbelow.sc.ss01;\012sub ygrave.sc by ygrave.sc.ss01;\012sub yhookabove.sc by yhookabove.sc.ss01;\012sub ymacron.sc by ymacron.sc.ss01;\012sub ytilde.sc by ytilde.sc.ss01;\012sub z.sc by z.sc.ss01;\012sub zacute.sc by zacute.sc.ss01;\012sub zcaron.sc by zcaron.sc.ss01;\012sub zdotaccent.sc by zdotaccent.sc.ss01;\012sub zdotbelow.sc by zdotbelow.sc.ss01;\012sub A-cy by A-cy.ss01;\012sub De-cy by De-cy.ss01;\012sub Ie-cy by Ie-cy.ss01;\012sub Iegrave-cy by Iegrave-cy.ss01;\012sub Io-cy by Io-cy.ss01;\012sub Ii-cy by Ii-cy.ss01;\012sub Iishort-cy by Iishort-cy.ss01;\012sub Iigrave-cy by Iigrave-cy.ss01;\012sub Iishorttail-cy by Iishorttail-cy.ss01;\012sub El-cy by El-cy.ss01;\012sub Er-cy by Er-cy.ss01;\012sub Te-cy by Te-cy.ss01;\012sub U-cy by U-cy.ss01;\012sub Ushort-cy by Ushort-cy.ss01;\012sub Ef-cy by Ef-cy.ss01;\012sub Softsign-cy by Softsign-cy.ss01;\012sub Hardsign-cy by Hardsign-cy.ss01;\012sub Yeru-cy by Yeru-cy.ss01;\012sub Lje-cy by Lje-cy.ss01;\012sub Nje-cy by Nje-cy.ss01;\012sub Je-cy by Je-cy.ss01;\012sub Yat-cy by Yat-cy.ss01;\012sub Tedescender-cy by Tedescender-cy.ss01;\012sub Abreve-cy by Abreve-cy.ss01;\012sub Adieresis-cy by Adieresis-cy.ss01;\012sub Aie-cy by Aie-cy.ss01;\012sub Iebreve-cy by Iebreve-cy.ss01;\012sub Imacron-cy by Imacron-cy.ss01;\012sub Idieresis-cy by Idieresis-cy.ss01;\012sub Umacron-cy by Umacron-cy.ss01;\012sub Udieresis-cy by Udieresis-cy.ss01;\012sub Uhungarumlaut-cy by Uhungarumlaut-cy.ss01;\012sub Yerudieresis-cy by Yerudieresis-cy.ss01;\012sub Qa-cy by Qa-cy.ss01;\012sub Semisoftsign-cy by Semisoftsign-cy.ss01;\012sub a-cy by a-cy.ss01;\012sub de-cy by de-cy.ss01;\012sub ie-cy by ie-cy.ss01;\012sub iegrave-cy by iegrave-cy.ss01;\012sub io-cy by io-cy.ss01;\012sub ii-cy by ii-cy.ss01;\012sub iishort-cy by iishort-cy.ss01;\012sub iigrave-cy by iigrave-cy.ss01;\012sub iishorttail-cy by iishorttail-cy.ss01;\012sub er-cy by er-cy.ss01;\012sub te-cy by te-cy.ss01;\012sub u-cy by u-cy.ss01;\012sub ushort-cy by ushort-cy.ss01;\012sub softsign-cy by softsign-cy.ss01;\012sub hardsign-cy by hardsign-cy.ss01;\012sub yeru-cy by yeru-cy.ss01;\012sub lje-cy by lje-cy.ss01;\012sub nje-cy by nje-cy.ss01;\012sub yat-cy by yat-cy.ss01;\012sub abreve-cy by abreve-cy.ss01;\012sub adieresis-cy by adieresis-cy.ss01;\012sub aie-cy by aie-cy.ss01;\012sub iebreve-cy by iebreve-cy.ss01;\012sub schwa-cy by schwa-cy.ss01;\012sub schwadieresis-cy by schwadieresis-cy.ss01;\012sub imacron-cy by imacron-cy.ss01;\012sub idieresis-cy by idieresis-cy.ss01;\012sub umacron-cy by umacron-cy.ss01;\012sub udieresis-cy by udieresis-cy.ss01;\012sub uhungarumlaut-cy by uhungarumlaut-cy.ss01;\012sub yerudieresis-cy by yerudieresis-cy.ss01;\012sub semisoftsign-cy by semisoftsign-cy.ss01;\012sub numero by numero.ss01;\012";
disabled = 1;
name = ss01;
},
{
code = "sub zero by zeroinferior;\012sub one by oneinferior;\012sub two by twoinferior;\012sub three by threeinferior;\012sub four by fourinferior;\012sub five by fiveinferior;\012sub six by sixinferior;\012sub seven by seveninferior;\012sub eight by eightinferior;\012sub nine by nineinferior;\012";
disabled = 1;
name = subs;
},
{
code = "sub zero by zerosuperior;\012sub one by onesuperior;\012sub two by twosuperior;\012sub three by threesuperior;\012sub four by foursuperior;\012sub five by fivesuperior;\012sub six by sixsuperior;\012sub seven by sevensuperior;\012sub eight by eightsuperior;\012sub nine by ninesuperior;\012";
disabled = 1;
name = sups;
},
{
code = "sub zero by zero.tf;\012sub one by one.tf;\012sub two by two.tf;\012sub three by three.tf;\012sub four by four.tf;\012sub five by five.tf;\012sub six by six.tf;\012sub seven by seven.tf;\012sub eight by eight.tf;\012sub nine by nine.tf;\012sub zero.osf by zero.tosf;\012sub one.osf by one.tosf;\012sub two.osf by two.tosf;\012sub three.osf by three.tosf;\012sub four.osf by four.tosf;\012sub five.osf by five.tosf;\012sub six.osf by six.tosf;\012sub seven.osf by seven.tosf;\012sub eight.osf by eight.tosf;\012sub nine.osf by nine.tosf;\012";
disabled = 1;
name = tnum;
}
);
fontMaster = (
{
ascender = 968;
capHeight = 700;
custom = Ultra;
customParameters = (
{
name = typoAscender;
value = 968;
},
{
name = typoDescender;
value = -251;
},
{
name = typoLineGap;
value = 0;
},
{
name = winAscent;
value = 1109;
},
{
name = winDescent;
value = 270;
},
{
name = hheaAscender;
value = 968;
},
{
name = hheaDescender;
value = -251;
},
{
name = strikeoutPosition;
value = 325;
},
{
name = strikeoutSize;
value = 50;
},
{
name = "Prep Table Assembly";
value = "SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\012200 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 1 \012INSTCTRL[ ]	/* SetInstrExecControl */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012WCVTF[ ]	/* WriteCVTInFUnits */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012NPUSHB[ ]	/* 9 values pushed */\0120 107 91 75 59 0 39 7 0 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012NPUSHB[ ]	/* 16 values pushed */\012112 2 96 8 80 8 64 8 52 6 44 4 30 7 7 8 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 7 \012WS[ ]	/* WriteStore */\012NPUSHB[ ]	/* 16 values pushed */\012114 0 104 6 88 6 72 6 58 4 48 2 37 5 7 8 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 14 \012WS[ ]	/* WriteStore */\012NPUSHW[ ]	/* 9 values pushed */\0127232 6208 5184 4160 3392 2880 1984 7 9 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 21 \012WS[ ]	/* WriteStore */\012NPUSHW[ ]	/* 9 values pushed */\01264 64 64 64 64 64 64 7 9 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01236 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GETINFO[ ]	/* GetInfo */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0123 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 2 values pushed */\01238 1 \012GETINFO[ ]	/* GetInfo */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHW[ ]	/* 3 values pushed */\0122176 1 1088 \012GETINFO[ ]	/* GetInfo */\012MUL[ ]	/* Multiply */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0123 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 16 values pushed */\012114 0 98 6 82 6 66 6 54 4 46 2 32 5 7 12 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHW[ ]	/* 1 value pushed */\012511 \012SCANCTRL[ ]	/* ScanConversionControl */\012PUSHB[ ]	/* 1 value pushed */\0124 \012SCANTYPE[ ]	/* ScanType */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 4 values pushed */\0125 100 6 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */";
},
{
name = "Fpgm Table Assembly";
value = "PUSHB[ ]	/* 1 value pushed */\0120 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012RCVT[ ]	/* ReadCVT */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHW[ ]	/* 1 value pushed */\01214 \012LTEQ[ ]	/* LessThenOrEqual */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\0126 \012GTEQ[ ]	/* GreaterThanOrEqual */\012AND[ ]	/* LogicalAnd */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01252 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01240 \012EIF[ ]	/* EndIf */\012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012AND[ ]	/* LogicalAnd */\012PUSHB[ ]	/* 3 values pushed */\01240 1 11 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012EIF[ ]	/* EndIf */\012GT[ ]	/* GreaterThan */\012OR[ ]	/* LogicalOr */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012ROLL[ ]	/* RollTopThreeStack */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01280 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 11 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01240 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 2 values pushed */\0121 11 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01230 \012MPPEM[ ]	/* MeasurePixelPerEm */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 1 value pushed */\0124096 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121280 \012DIV[ ]	/* Divide */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ABS[ ]	/* Absolute */\012SUB[ ]	/* Subtract */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0125 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0124 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 2 values pushed */\0125 98 \012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 11 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 2 values pushed */\0121 11 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0127 \012ADD[ ]	/* Add */\012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0123 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\01248 5 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012SUB[ ]	/* Subtract */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012EIF[ ]	/* EndIf */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0125 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0127 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 3 values pushed */\0120 2 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0126 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0127 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0125 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0127 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0128 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0127 12 0 \012RS[ ]	/* ReadStore */\012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01211 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01236 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01212 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01211 10 3 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01213 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 2 \012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\012100 \012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01214 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01213 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01213 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01214 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01215 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012MUL[ ]	/* Multiply */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01215 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01215 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01216 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01213 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01217 \012FDEF[ ]	/* FunctionDefinition */\012MPPEM[ ]	/* MeasurePixelPerEm */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012MPPEM[ ]	/* MeasurePixelPerEm */\012GTEQ[ ]	/* GreaterThanOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0124 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012DEPTH[ ]	/* GetDepthStack */\012PUSHB[ ]	/* 1 value pushed */\01219 \012NEG[ ]	/* Negate */\012SWAP[ ]	/* SwapTopStack */\012JROT[ ]	/* JumpRelativeOnTrue */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01218 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 16 \012RS[ ]	/* ReadStore */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01216 16 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01215 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01213 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01214 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 2 values pushed */\0121 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01213 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01214 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\0120 0 \012SZP0[ ]	/* SetZonePointer0 */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MIAP[0]	/* MoveIndirectAbsPt */\012PUSHB[ ]	/* 3 values pushed */\0121 1 1 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01219 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01216 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01212 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 6 values pushed */\01218 18 1 0 15 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\01218 6 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012137 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01220 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 19 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01221 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 19 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01222 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 19 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01223 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 19 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01224 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 19 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01225 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 19 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01226 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 19 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01227 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 19 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01228 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 19 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01229 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 19 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01241 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0126 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP1[ ]	/* DeltaExceptionP1 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01242 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01222 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP2[ ]	/* DeltaExceptionP2 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01243 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01216 \012DIV[ ]	/* Divide */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\01238 \012ADD[ ]	/* Add */\012MPPEM[ ]	/* MeasurePixelPerEm */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012DELTAP3[ ]	/* DeltaExceptionP3 */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01230 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01213 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01216 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012PUSHB[ ]	/* 1 value pushed */\01212 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01211 \012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0127 \012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 6 values pushed */\01218 18 1 0 15 0 \012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\01218 6 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\012137 \012CALL[ ]	/* CallFunction */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01231 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 30 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 30 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01233 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 30 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01234 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0123 30 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01235 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0124 30 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01236 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0125 30 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01237 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0126 30 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01238 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0127 30 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01239 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 30 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01240 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0129 30 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01244 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01245 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01218 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01244 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01246 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01245 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01245 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01248 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01212 13 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01247 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01249 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\01213 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0120 2 \012RCVT[ ]	/* ReadCVT */\012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012PUSHB[ ]	/* 2 values pushed */\01212 13 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01247 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012CLEAR[ ]	/* ClearStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01250 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012SHC[1]	/* ShiftContourByLastPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01251 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 2 values pushed */\01212 13 \012RCVT[ ]	/* ReadCVT */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 5 values pushed */\0120 0 0 0 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012MIAP[0]	/* MoveIndirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01250 1 \012SZP2[ ]	/* SetZonePointer2 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01252 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01253 \012FDEF[ ]	/* FunctionDefinition */\012MDAP[0]	/* MoveDirectAbsPt */\012SLOOP[ ]	/* SetLoopVariable */\012ALIGNRP[ ]	/* AlignRelativePt */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01254 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01212 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01255 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012SZPS[ ]	/* SetZonePointerS */\012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01254 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01256 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01217 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 2 values pushed */\01210 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0129 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012NEG[ ]	/* Negate */\012ROLL[ ]	/* RollTopThreeStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01217 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01210 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0129 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0122 32 3 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0122 38 3 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0123 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012RS[ ]	/* ReadStore */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01258 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01217 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01259 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01217 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01260 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01217 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012IF[ ]	/* If */\012DIV[ ]	/* Divide */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012MUL[ ]	/* Multiply */\012PUSHW[ ]	/* 1 value pushed */\0121024 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01261 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01217 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01262 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01217 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01246 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01263 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01217 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012GT[ ]	/* GreaterThan */\012ELSE[ ]	/* Else */\012LT[ ]	/* LessThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01246 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01264 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01217 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01217 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012GT[ ]	/* GreaterThan */\012ELSE[ ]	/* Else */\012LT[ ]	/* LessThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01246 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01265 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01256 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01217 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01246 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01266 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01257 \012CALL[ ]	/* CallFunction */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0124 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01217 \012RS[ ]	/* ReadStore */\012IF[ ]	/* If */\012LT[ ]	/* LessThan */\012ELSE[ ]	/* Else */\012GT[ ]	/* GreaterThan */\012EIF[ ]	/* EndIf */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01246 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01246 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01267 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0129 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01246 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01268 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 4 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01210 0 \012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0129 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0122 32 3 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0122 38 3 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0123 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01264 \012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\0121 \012MUL[ ]	/* Multiply */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\01246 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01269 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 56 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01246 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01270 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 57 \012CALL[ ]	/* CallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0124 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01246 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01246 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01271 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01252 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01272 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01252 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01273 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 1 \012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012PUSHB[ ]	/* 1 value pushed */\01253 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01274 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01255 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01275 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012RCVT[ ]	/* ReadCVT */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01246 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01276 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01275 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01277 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01278 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01279 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01280 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 68 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01281 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01282 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01283 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01284 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 69 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01285 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 65 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01286 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 0 65 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01287 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 0 65 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01288 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 0 65 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01289 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 1 65 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01290 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 1 65 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01291 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 1 65 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01292 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 1 65 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01293 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01294 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01295 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01296 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 67 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01297 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01298 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0120 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01299 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 0 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012100 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 3 values pushed */\0121 1 70 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012101 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 0 66 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012102 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 0 66 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012103 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 0 66 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012104 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 0 66 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012105 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 0 1 66 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012106 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0120 1 1 66 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012107 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 0 1 66 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012108 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0121 1 1 66 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012109 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 58 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01246 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012110 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 58 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01262 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012111 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 58 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01263 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012112 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0120 58 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012113 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 58 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01262 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012114 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 58 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01263 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012115 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 2 values pushed */\0121 58 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012116 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 59 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01246 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012117 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 59 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01262 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012118 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 59 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01263 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012119 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 59 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012120 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 59 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01262 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012121 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 59 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01263 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012122 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 59 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012123 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01246 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01262 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012125 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01263 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012126 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012127 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01262 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012128 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01263 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012129 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 60 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012130 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\01246 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012131 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01262 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012132 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01263 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012133 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012134 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01262 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012135 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01263 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012136 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0121 61 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01264 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\012137 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 4 values pushed */\0129 4 2 3 \012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0128 \012NEG[ ]	/* Negate */\012PUSHB[ ]	/* 1 value pushed */\0123 \012DEPTH[ ]	/* GetDepthStack */\012LT[ ]	/* LessThan */\012JROT[ ]	/* JumpRelativeOnTrue */\012PUSHB[ ]	/* 2 values pushed */\0125 1 \012SZP2[ ]	/* SetZonePointer2 */\012RCVT[ ]	/* ReadCVT */\012IF[ ]	/* If */\012IUP[0]	/* InterpolateUntPts */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = (
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
0,
192,
192,
151,
151,
700,
0,
542,
0,
-194,
714,
-14,
551,
-9,
-203,
194,
194,
154,
154,
578,
0,
591,
-13,
194,
194,
154,
154,
578,
578,
0,
0,
578,
591,
-13,
-13,
192,
192,
151,
151,
700,
0,
742,
542,
0,
-194,
714,
-14,
804,
551,
-9,
-203,
192,
192,
151,
151,
315,
-100,
742,
542,
0,
-194,
324,
-109,
804,
551,
-9,
-194,
192,
192,
151,
151,
742,
327,
742,
542,
0,
-194,
751,
318,
804,
551,
-9,
-203,
24,
24,
24,
24
);
}
);
descender = -251;
id = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
name = UltraBold;
weight = Bold;
weightValue = 800;
widthValue = 5;
xHeight = 542;
}
);
glyphs = (
{
glyphname = A;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"594 0 LINE",
"800 0 LINE",
"490 700 LINE",
"295 700 LINE",
"-14 0 LINE",
"188 0 LINE",
"243 136 LINE",
"539 136 LINE",
"539 136 LINE"
);
},
{
closed = 1;
nodes = (
"301 282 LINE",
"391 506 LINE",
"481 282 LINE",
"481 282 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */\0129 1 4 2 1 74 5 1 4 0 0 1 4 0 102 0 2 2 66 75 3 1 1 1 67 1 76 8 8 8 10 8 10 17 17 17 16 6 10 24 \012CALL[ ]	/* CallFunction */";
};
width = 786;
}
);
leftKerningGroup = A;
note = A;
rightKerningGroup = A;
unicode = 0041;
},
{
glyphname = B;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"653 388 OFFCURVE",
"702 467 OFFCURVE",
"702 517 QCURVE SMOOTH",
"702 601 OFFCURVE",
"562 700 OFFCURVE",
"428 700 QCURVE SMOOTH",
"70 700 LINE",
"70 0 LINE",
"448 0 LINE SMOOTH",
"588 0 OFFCURVE",
"736 100 OFFCURVE",
"736 192 QCURVE SMOOTH",
"736 255 OFFCURVE",
"668 344 OFFCURVE",
"608 365 QCURVE",
"608 365 LINE"
);
},
{
closed = 1;
nodes = (
"402 557 LINE SMOOTH",
"502 557 OFFCURVE",
"502 490 QCURVE SMOOTH",
"502 422 OFFCURVE",
"402 422 QCURVE SMOOTH",
"266 422 LINE",
"266 557 LINE",
"266 557 LINE"
);
},
{
closed = 1;
nodes = (
"266 143 LINE",
"266 285 LINE",
"432 285 LINE SMOOTH",
"536 285 OFFCURVE",
"536 214 QCURVE SMOOTH",
"536 143 OFFCURVE",
"432 143 QCURVE",
"432 143 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */\01214 1 4 2 1 74 0 2 0 4 5 2 4 101 6 1 3 3 1 93 0 1 1 66 75 7 1 5 5 0 93 0 0 0 67 0 76 22 22 15 15 22 28 22 27 26 24 15 21 15 20 39 33 36 8 10 23 \012CALL[ ]	/* CallFunction */";
};
width = 769;
}
);
leftKerningGroup = B;
note = B;
rightKerningGroup = B;
unicode = 0042;
},
{
glyphname = C;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"515 -14 OFFCURVE",
"669 54 OFFCURVE",
"720 118 QCURVE",
"594 232 LINE",
"526 150 OFFCURVE",
"429 150 QCURVE SMOOTH",
"372 150 OFFCURVE",
"283 200 OFFCURVE",
"234 291 OFFCURVE",
"234 350 QCURVE SMOOTH",
"234 409 OFFCURVE",
"283 500 OFFCURVE",
"372 550 OFFCURVE",
"429 550 QCURVE SMOOTH",
"526 550 OFFCURVE",
"594 468 QCURVE",
"720 582 LINE",
"669 646 OFFCURVE",
"515 714 OFFCURVE",
"419 714 QCURVE SMOOTH",
"309 714 OFFCURVE",
"134 621 OFFCURVE",
"34 455 OFFCURVE",
"34 350 QCURVE SMOOTH",
"34 245 OFFCURVE",
"134 79 OFFCURVE",
"309 -14 OFFCURVE",
"419 -14 QCURVE",
"419 -14 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */\01210 1 1 0 23 11 2 2 1 24 1 3 2 3 74 0 1 1 0 95 0 0 0 72 75 0 2 2 3 95 4 1 3 3 73 3 76 0 0 0 27 0 26 38 36 38 5 10 23 \012CALL[ ]	/* CallFunction */";
};
width = 738;
}
);
leftKerningGroup = C;
note = C;
rightKerningGroup = C;
unicode = 0043;
},
{
glyphname = D;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"70 0 LINE",
"401 0 LINE SMOOTH",
"516 0 OFFCURVE",
"694 86 OFFCURVE",
"792 244 OFFCURVE",
"792 350 QCURVE SMOOTH",
"792 456 OFFCURVE",
"694 614 OFFCURVE",
"516 700 OFFCURVE",
"401 700 QCURVE SMOOTH",
"70 700 LINE",
"70 700 LINE"
);
},
{
closed = 1;
nodes = (
"268 158 LINE",
"268 542 LINE",
"393 542 LINE SMOOTH",
"483 542 OFFCURVE",
"592 440 OFFCURVE",
"592 350 QCURVE SMOOTH",
"592 260 OFFCURVE",
"483 158 OFFCURVE",
"393 158 QCURVE",
"393 158 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */\0120 3 3 0 93 0 0 0 66 75 4 1 2 2 1 93 0 1 1 67 1 76 12 11 18 16 11 19 12 19 38 32 5 10 22 \012CALL[ ]	/* CallFunction */";
};
width = 826;
}
);
leftKerningGroup = B;
note = D;
rightKerningGroup = D;
unicode = 0044;
},
{
glyphname = E;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"266 153 LINE",
"266 281 LINE",
"577 281 LINE",
"577 429 LINE",
"266 429 LINE",
"266 547 LINE",
"619 547 LINE",
"619 700 LINE",
"70 700 LINE",
"70 0 LINE",
"632 0 LINE",
"632 153 LINE",
"632 153 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */\0120 3 0 4 5 3 4 101 0 2 2 1 93 0 1 1 66 75 6 1 5 5 0 93 0 0 0 67 0 76 0 0 0 11 0 11 17 17 17 17 17 7 10 25 \012CALL[ ]	/* CallFunction */";
};
width = 672;
}
);
leftKerningGroup = B;
note = E;
rightKerningGroup = AE;
unicode = 0045;
},
{
glyphname = F;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"619 547 LINE",
"619 700 LINE",
"70 700 LINE",
"70 0 LINE",
"268 0 LINE",
"268 240 LINE",
"577 240 LINE",
"577 393 LINE",
"268 393 LINE",
"268 547 LINE",
"268 547 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */\0120 0 0 1 2 0 1 101 5 1 4 4 3 93 0 3 3 66 75 0 2 2 67 2 76 0 0 0 9 0 9 17 17 17 17 6 10 24 \012CALL[ ]	/* CallFunction */";
};
width = 642;
}
);
leftKerningGroup = B;
note = F;
rightKerningGroup = F;
unicode = 0046;
},
{
glyphname = G;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"539 173 LINE",
"489 150 OFFCURVE",
"432 150 QCURVE SMOOTH",
"374 150 OFFCURVE",
"284 201 OFFCURVE",
"234 292 OFFCURVE",
"234 350 QCURVE SMOOTH",
"234 441 OFFCURVE",
"344 550 OFFCURVE",
"434 550 QCURVE SMOOTH",
"533 550 OFFCURVE",
"604 472 QCURVE",
"730 586 LINE",
"678 648 OFFCURVE",
"522 714 OFFCURVE",
"424 714 QCURVE SMOOTH",
"312 714 OFFCURVE",
"134 621 OFFCURVE",
"34 455 OFFCURVE",
"34 350 QCURVE SMOOTH",
"34 245 OFFCURVE",
"134 79 OFFCURVE",
"310 -14 OFFCURVE",
"420 -14 QCURVE SMOOTH",
"498 -14 OFFCURVE",
"654 32 OFFCURVE",
"714 75 QCURVE",
"714 365 LINE",
"539 365 LINE",
"539 365 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */\01216 1 3 2 17 1 0 3 28 1 4 0 2 1 1 4 4 74 0 0 3 4 3 0 4 126 0 3 3 2 95 0 2 2 72 75 0 4 4 1 95 0 1 1 73 1 76 37 36 38 35 16 5 10 25 \012CALL[ ]	/* CallFunction */";
};
width = 770;
}
);
leftKerningGroup = C;
note = G;
rightKerningGroup = G;
unicode = 0047;
},
{
glyphname = H;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"538 700 LINE",
"538 437 LINE",
"268 437 LINE",
"268 700 LINE",
"70 700 LINE",
"70 0 LINE",
"268 0 LINE",
"268 273 LINE",
"538 273 LINE",
"538 0 LINE",
"736 0 LINE",
"736 700 LINE",
"736 700 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */\0120 4 0 1 0 4 1 101 6 5 2 3 3 66 75 2 1 0 0 67 0 76 0 0 0 11 0 11 17 17 17 17 17 7 10 25 \012CALL[ ]	/* CallFunction */";
};
width = 806;
}
);
leftKerningGroup = B;
note = H;
rightKerningGroup = H;
unicode = 0048;
},
{
glyphname = I;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"70 0 LINE",
"268 0 LINE",
"268 700 LINE",
"70 700 LINE",
"70 700 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */\0120 0 0 66 75 0 1 1 67 1 76 17 16 2 10 22 \012CALL[ ]	/* CallFunction */";
};
width = 339;
}
);
leftKerningGroup = B;
note = I;
rightKerningGroup = H;
unicode = 0049;
},
{
glyphname = J;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"356 -14 OFFCURVE",
"493 122 OFFCURVE",
"493 258 QCURVE SMOOTH",
"493 700 LINE",
"55 700 LINE",
"55 547 LINE",
"297 547 LINE",
"297 246 LINE SMOOTH",
"297 196 OFFCURVE",
"252 144 OFFCURVE",
"209 144 QCURVE SMOOTH",
"144 144 OFFCURVE",
"88 217 QCURVE",
"-20 89 LINE",
"20 39 OFFCURVE",
"146 -14 OFFCURVE",
"223 -14 QCURVE",
"223 -14 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */\0123 1 0 1 2 1 3 0 2 74 0 1 1 2 93 0 2 2 66 75 0 0 0 3 95 4 1 3 3 73 3 76 0 0 0 16 0 15 17 19 36 5 10 23 \012CALL[ ]	/* CallFunction */";
};
width = 557;
}
);
leftKerningGroup = J;
note = J;
rightKerningGroup = IJ;
unicode = 004A;
},
{
glyphname = K;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"540 0 LINE",
"770 0 LINE",
"469 390 LINE",
"755 700 LINE",
"537 700 LINE",
"266 409 LINE",
"266 700 LINE",
"70 700 LINE",
"70 0 LINE",
"266 0 LINE",
"266 175 LINE",
"340 254 LINE",
"340 254 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */\0129 6 1 3 0 1 1 74 2 1 1 1 66 75 3 1 0 0 67 0 76 18 18 17 18 4 10 24 \012CALL[ ]	/* CallFunction */";
};
width = 752;
}
);
leftKerningGroup = B;
note = K;
rightKerningGroup = K;
unicode = 004B;
},
{
glyphname = L;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"70 0 LINE",
"602 0 LINE",
"602 157 LINE",
"268 157 LINE",
"268 700 LINE",
"70 700 LINE",
"70 700 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */\0120 0 0 66 75 0 1 1 2 94 0 2 2 67 2 76 17 17 16 3 10 23 \012CALL[ ]	/* CallFunction */";
};
width = 610;
}
);
leftKerningGroup = B;
note = L;
rightKerningGroup = L;
unicode = 004C;
},
{
glyphname = M;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"884 0 LINE",
"882 700 LINE",
"719 700 LINE",
"479 296 LINE",
"233 700 LINE",
"70 700 LINE",
"70 0 LINE",
"253 0 LINE",
"253 361 LINE",
"432 69 LINE",
"520 69 LINE",
"700 371 LINE",
"702 0 LINE",
"702 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */\0129 4 1 3 0 2 1 74 0 0 2 1 2 0 1 126 3 1 2 2 66 75 5 4 2 1 1 67 1 76 0 0 0 12 0 12 18 17 18 18 6 10 24 \012CALL[ ]	/* CallFunction */";
};
width = 954;
}
);
leftKerningGroup = B;
note = M;
rightKerningGroup = H;
unicode = 004D;
},
{
glyphname = N;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"542 700 LINE",
"542 327 LINE",
"233 700 LINE",
"70 700 LINE",
"70 0 LINE",
"264 0 LINE",
"264 373 LINE",
"573 0 LINE",
"736 0 LINE",
"736 700 LINE",
"736 700 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */\0128 3 2 0 2 1 74 4 3 2 2 2 66 75 1 1 0 0 67 0 76 0 0 0 9 0 9 17 18 17 5 10 23 \012CALL[ ]	/* CallFunction */";
};
width = 806;
}
);
leftKerningGroup = B;
note = N;
rightKerningGroup = H;
unicode = 004E;
},
{
glyphname = O;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"534 -14 OFFCURVE",
"711 80 OFFCURVE",
"812 246 OFFCURVE",
"812 350 QCURVE SMOOTH",
"812 454 OFFCURVE",
"711 620 OFFCURVE",
"534 714 OFFCURVE",
"423 714 QCURVE SMOOTH",
"312 714 OFFCURVE",
"135 620 OFFCURVE",
"34 454 OFFCURVE",
"34 350 QCURVE SMOOTH",
"34 246 OFFCURVE",
"135 80 OFFCURVE",
"312 -14 OFFCURVE",
"423 -14 QCURVE",
"423 -14 LINE"
);
},
{
closed = 1;
nodes = (
"370 150 OFFCURVE",
"284 200 OFFCURVE",
"234 291 OFFCURVE",
"234 350 QCURVE SMOOTH",
"234 409 OFFCURVE",
"284 500 OFFCURVE",
"370 550 OFFCURVE",
"423 550 QCURVE SMOOTH",
"476 550 OFFCURVE",
"562 500 OFFCURVE",
"612 409 OFFCURVE",
"612 350 QCURVE SMOOTH",
"612 291 OFFCURVE",
"562 200 OFFCURVE",
"476 150 OFFCURVE",
"423 150 QCURVE",
"423 150 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */\0120 2 2 0 95 0 0 0 72 75 5 1 3 3 1 95 4 1 1 1 73 1 76 16 16 0 0 16 31 16 30 24 22 0 15 0 14 38 6 10 21 \012CALL[ ]	/* CallFunction */";
};
width = 846;
}
);
leftKerningGroup = C;
note = O;
rightKerningGroup = D;
unicode = 004F;
},
{
glyphname = P;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"70 700 LINE",
"70 0 LINE",
"268 0 LINE",
"268 183 LINE",
"390 183 LINE SMOOTH",
"485 183 OFFCURVE",
"625 246 OFFCURVE",
"701 362 OFFCURVE",
"701 441 QCURVE SMOOTH",
"701 520 OFFCURVE",
"625 637 OFFCURVE",
"485 700 OFFCURVE",
"390 700 QCURVE",
"390 700 LINE"
);
},
{
closed = 1;
nodes = (
"268 339 LINE",
"268 544 LINE",
"378 544 LINE SMOOTH",
"439 544 OFFCURVE",
"501 490 OFFCURVE",
"501 441 QCURVE SMOOTH",
"501 392 OFFCURVE",
"439 339 OFFCURVE",
"378 339 QCURVE",
"378 339 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */\0126 1 4 0 0 1 4 0 101 0 3 3 2 93 5 1 2 2 66 75 0 1 1 67 1 76 13 13 0 0 13 21 13 20 19 17 0 12 0 11 17 38 7 10 22 \012CALL[ ]	/* CallFunction */";
};
width = 737;
}
);
leftKerningGroup = B;
note = P;
rightKerningGroup = P;
unicode = 0050;
},
{
glyphname = Q;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"762 21 LINE",
"715 -28 OFFCURVE",
"656 -28 QCURVE SMOOTH",
"633 -28 OFFCURVE",
"594 -10 OFFCURVE",
"574 12 QCURVE",
"683 51 OFFCURVE",
"812 232 OFFCURVE",
"812 350 QCURVE SMOOTH",
"812 454 OFFCURVE",
"711 620 OFFCURVE",
"534 714 OFFCURVE",
"423 714 QCURVE SMOOTH",
"312 714 OFFCURVE",
"135 620 OFFCURVE",
"34 454 OFFCURVE",
"34 350 QCURVE SMOOTH",
"34 259 OFFCURVE",
"113 107 OFFCURVE",
"255 7 OFFCURVE",
"346 -8 QCURVE",
"405 -70 OFFCURVE",
"500 -139 OFFCURVE",
"594 -169 OFFCURVE",
"652 -169 QCURVE SMOOTH",
"712 -169 OFFCURVE",
"813 -124 OFFCURVE",
"848 -81 QCURVE",
"848 -81 LINE"
);
},
{
closed = 1;
nodes = (
"234 409 OFFCURVE",
"284 500 OFFCURVE",
"370 550 OFFCURVE",
"423 550 QCURVE SMOOTH",
"476 550 OFFCURVE",
"562 500 OFFCURVE",
"612 409 OFFCURVE",
"612 350 QCURVE SMOOTH",
"612 291 OFFCURVE",
"562 200 OFFCURVE",
"476 150 OFFCURVE",
"423 150 QCURVE SMOOTH",
"370 150 OFFCURVE",
"284 200 OFFCURVE",
"234 291 OFFCURVE",
"234 350 QCURVE",
"234 350 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */\01227 22 2 2 3 1 74 0 3 4 2 4 3 2 126 0 2 0 0 2 0 99 0 4 4 1 95 0 1 1 72 4 76 38 36 40 42 34 5 10 25 \012CALL[ ]	/* CallFunction */";
};
width = 846;
}
);
leftKerningGroup = C;
note = Q;
rightKerningGroup = D;
unicode = 0051;
},
{
glyphname = R;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"503 0 LINE",
"715 0 LINE",
"564 220 LINE",
"630 252 OFFCURVE",
"701 365 OFFCURVE",
"701 441 QCURVE SMOOTH",
"701 520 OFFCURVE",
"625 637 OFFCURVE",
"485 700 OFFCURVE",
"390 700 QCURVE SMOOTH",
"70 700 LINE",
"70 0 LINE",
"268 0 LINE",
"268 186 LINE",
"376 186 LINE",
"376 186 LINE"
);
},
{
closed = 1;
nodes = (
"501 392 OFFCURVE",
"439 339 OFFCURVE",
"378 339 QCURVE SMOOTH",
"268 339 LINE",
"268 544 LINE",
"378 544 LINE SMOOTH",
"439 544 OFFCURVE",
"501 490 OFFCURVE",
"501 441 QCURVE",
"501 441 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 40 values pushed */\01212 1 0 5 1 74 0 5 0 0 1 5 0 101 0 4 4 2 93 0 2 2 66 75 3 1 1 1 67 1 76 33 34 23 33 17 16 6 10 26 \012CALL[ ]	/* CallFunction */";
};
width = 740;
}
);
leftKerningGroup = B;
note = R;
rightKerningGroup = R;
unicode = 0052;
},
{
glyphname = S;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"416 -14 OFFCURVE",
"556 47 OFFCURVE",
"626 149 OFFCURVE",
"626 212 QCURVE SMOOTH",
"626 285 OFFCURVE",
"549 370 OFFCURVE",
"444 409 OFFCURVE",
"364 426 QCURVE SMOOTH",
"293 441 OFFCURVE",
"229 469 OFFCURVE",
"229 497 QCURVE SMOOTH",
"229 525 OFFCURVE",
"283 560 OFFCURVE",
"342 560 QCURVE SMOOTH",
"436 560 OFFCURVE",
"536 506 QCURVE",
"597 653 LINE",
"546 683 OFFCURVE",
"412 714 OFFCURVE",
"343 714 QCURVE SMOOTH",
"242 714 OFFCURVE",
"103 654 OFFCURVE",
"33 551 OFFCURVE",
"33 487 QCURVE SMOOTH",
"33 414 OFFCURVE",
"109 328 OFFCURVE",
"215 289 OFFCURVE",
"294 272 QCURVE SMOOTH",
"366 256 OFFCURVE",
"431 227 OFFCURVE",
"431 197 QCURVE SMOOTH",
"431 140 OFFCURVE",
"317 140 QCURVE SMOOTH",
"257 140 OFFCURVE",
"133 178 OFFCURVE",
"86 209 QCURVE",
"21 63 LINE",
"71 28 OFFCURVE",
"231 -14 OFFCURVE",
"316 -14 QCURVE",
"316 -14 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */\01222 1 2 1 23 3 2 0 2 2 1 3 0 3 74 0 2 2 1 95 0 1 1 72 75 0 0 0 3 95 4 1 3 3 73 3 76 0 0 0 39 0 38 36 43 37 5 10 23 \012CALL[ ]	/* CallFunction */";
};
width = 647;
}
);
leftKerningGroup = S;
note = S;
rightKerningGroup = S;
unicode = 0053;
},
{
glyphname = T;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"219 0 LINE",
"417 0 LINE",
"417 543 LINE",
"631 543 LINE",
"631 700 LINE",
"4 700 LINE",
"4 543 LINE",
"219 543 LINE",
"219 543 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 24 values pushed */\0122 1 0 0 1 93 0 1 1 66 75 0 3 3 67 3 76 17 17 17 16 4 10 24 \012CALL[ ]	/* CallFunction */";
};
width = 635;
}
);
leftKerningGroup = T;
note = T;
rightKerningGroup = T;
unicode = 0054;
},
{
glyphname = U;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"549 -14 OFFCURVE",
"722 156 OFFCURVE",
"722 312 QCURVE SMOOTH",
"722 700 LINE",
"527 700 LINE",
"527 318 LINE SMOOTH",
"527 150 OFFCURVE",
"395 150 QCURVE SMOOTH",
"262 150 OFFCURVE",
"262 318 QCURVE SMOOTH",
"262 700 LINE",
"64 700 LINE",
"64 312 LINE SMOOTH",
"64 156 OFFCURVE",
"237 -14 OFFCURVE",
"393 -14 QCURVE",
"393 -14 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */\0122 1 0 0 66 75 0 1 1 3 96 4 1 3 3 73 3 76 0 0 0 15 0 14 18 34 19 5 10 23 \012CALL[ ]	/* CallFunction */";
};
width = 786;
}
);
leftKerningGroup = U;
note = U;
rightKerningGroup = IJ;
unicode = 0055;
},
{
glyphname = V;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"584 700 LINE",
"390 244 LINE",
"200 700 LINE",
"-14 700 LINE",
"285 0 LINE",
"480 0 LINE",
"780 700 LINE",
"780 700 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */\0125 1 0 1 1 74 3 2 2 1 1 66 75 0 0 0 67 0 76 0 0 0 6 0 6 17 17 4 10 22 \012CALL[ ]	/* CallFunction */";
};
width = 766;
}
);
leftKerningGroup = V;
note = V;
rightKerningGroup = V;
unicode = 0056;
},
{
glyphname = W;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"979 700 LINE",
"832 249 LINE",
"691 700 LINE",
"509 700 LINE",
"361 253 LINE",
"220 700 LINE",
"16 700 LINE",
"243 0 LINE",
"455 0 LINE",
"595 426 LINE",
"729 0 LINE",
"941 0 LINE",
"1168 700 LINE",
"1168 700 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */\01211 8 3 3 0 2 1 74 5 4 3 3 2 2 66 75 1 1 0 0 67 0 76 0 0 0 12 0 12 18 17 18 17 6 10 24 \012CALL[ ]	/* CallFunction */";
};
width = 1184;
}
);
leftKerningGroup = V;
note = W;
rightKerningGroup = V;
unicode = 0057;
},
{
glyphname = X;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"740 0 LINE",
"480 362 LINE",
"724 700 LINE",
"510 700 LINE",
"372 498 LINE",
"232 700 LINE",
"9 700 LINE",
"253 354 LINE",
"-2 0 LINE",
"224 0 LINE",
"367 217 LINE",
"512 0 LINE",
"512 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */\01210 7 4 1 4 0 1 1 74 2 1 1 1 66 75 4 3 2 0 0 67 0 76 0 0 0 11 0 11 18 18 18 5 10 23 \012CALL[ ]	/* CallFunction */";
};
width = 737;
}
);
leftKerningGroup = X;
note = X;
rightKerningGroup = X;
unicode = 0058;
},
{
glyphname = Y;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"713 700 LINE",
"521 700 LINE",
"355 422 LINE",
"189 700 LINE",
"-20 700 LINE",
"247 254 LINE",
"247 0 LINE",
"445 0 LINE",
"445 251 LINE",
"445 251 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 26 values pushed */\0126 3 0 3 0 1 1 74 2 1 1 1 66 75 0 0 0 67 0 76 18 18 17 3 10 23 \012CALL[ ]	/* CallFunction */";
};
width = 693;
}
);
leftKerningGroup = Y;
note = Y;
rightKerningGroup = Y;
unicode = 0059;
},
{
glyphname = Z;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"294 157 LINE",
"647 576 LINE",
"647 700 LINE",
"44 700 LINE",
"44 543 LINE",
"388 543 LINE",
"35 124 LINE",
"35 0 LINE",
"662 0 LINE",
"662 157 LINE",
"662 157 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */\0128 1 1 2 3 1 0 3 2 74 0 1 1 2 93 0 2 2 66 75 4 1 3 3 0 93 0 0 0 67 0 76 0 0 0 9 0 9 17 18 17 5 10 23 \012CALL[ ]	/* CallFunction */";
};
width = 679;
}
);
leftKerningGroup = Z;
note = Z;
rightKerningGroup = DZcaron;
unicode = 005A;
},
{
glyphname = a;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"227 551 OFFCURVE",
"98 518 OFFCURVE",
"53 488 QCURVE",
"117 359 LINE",
"145 381 OFFCURVE",
"225 406 OFFCURVE",
"264 406 QCURVE SMOOTH",
"374 406 OFFCURVE",
"379 320 QCURVE",
"271 320 LINE SMOOTH",
"148 320 OFFCURVE",
"30 235 OFFCURVE",
"30 158 QCURVE SMOOTH",
"30 110 OFFCURVE",
"77 35 OFFCURVE",
"169 -9 OFFCURVE",
"232 -9 QCURVE SMOOTH",
"351 -9 OFFCURVE",
"392 70 QCURVE",
"392 0 LINE",
"569 0 LINE",
"569 301 LINE SMOOTH",
"569 428 OFFCURVE",
"427 551 OFFCURVE",
"292 551 QCURVE",
"292 551 LINE"
);
},
{
closed = 1;
nodes = (
"252 111 OFFCURVE",
"214 141 OFFCURVE",
"214 166 QCURVE SMOOTH",
"214 221 OFFCURVE",
"297 221 QCURVE SMOOTH",
"379 221 LINE",
"379 174 LINE",
"368 143 OFFCURVE",
"318 111 OFFCURVE",
"285 111 QCURVE",
"285 111 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */\01221 1 3 4 20 1 2 3 27 1 6 5 5 1 0 6 4 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01227 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 32 values pushed */\0120 2 0 5 6 2 5 101 0 3 3 4 95 7 1 4 4 75 75 8 1 6 6 0 95 1 1 0 0 67 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 36 values pushed */\0120 2 0 5 6 2 5 101 0 3 3 4 95 7 1 4 4 75 75 0 0 0 67 75 8 1 6 6 1 95 0 1 1 76 1 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 21 values pushed */\01225 25 0 0 25 34 25 33 30 28 0 24 0 23 33 37 34 19 9 10 24 \012CALL[ ]	/* CallFunction */";
};
width = 628;
}
);
leftKerningGroup = a;
note = a;
rightKerningGroup = a;
unicode = 0061;
},
{
glyphname = b;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"306 551 OFFCURVE",
"251 495 QCURVE",
"251 742 LINE",
"61 742 LINE",
"61 0 LINE",
"242 0 LINE",
"242 54 LINE",
"295 -9 OFFCURVE",
"402 -9 QCURVE SMOOTH",
"476 -9 OFFCURVE",
"597 60 OFFCURVE",
"668 188 OFFCURVE",
"668 272 QCURVE SMOOTH",
"668 356 OFFCURVE",
"597 483 OFFCURVE",
"476 551 OFFCURVE",
"402 551 QCURVE",
"402 551 LINE"
);
},
{
closed = 1;
nodes = (
"312 142 OFFCURVE",
"248 211 OFFCURVE",
"248 272 QCURVE SMOOTH",
"248 332 OFFCURVE",
"312 400 OFFCURVE",
"362 400 QCURVE SMOOTH",
"412 400 OFFCURVE",
"476 332 OFFCURVE",
"476 272 QCURVE SMOOTH",
"476 211 OFFCURVE",
"412 142 OFFCURVE",
"362 142 QCURVE",
"362 142 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01227 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 10 values pushed */\01214 1 4 3 9 1 0 5 2 74 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 10 values pushed */\01214 1 4 3 9 1 1 5 2 74 \012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01212 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 29 values pushed */\0120 2 2 68 75 0 4 4 3 95 6 1 3 3 75 75 7 1 5 5 0 95 1 1 0 0 76 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01227 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 35 values pushed */\0120 2 2 0 95 1 1 0 0 76 75 0 4 4 3 95 6 1 3 3 75 75 7 1 5 5 0 95 1 1 0 0 76 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 33 values pushed */\0120 4 4 3 95 6 1 3 3 75 75 0 2 2 1 93 0 1 1 67 75 7 1 5 5 0 95 0 0 0 76 0 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 20 values pushed */\01217 17 0 0 17 28 17 27 23 21 0 16 0 15 17 18 38 8 10 23 \012CALL[ ]	/* CallFunction */";
};
width = 695;
}
);
leftKerningGroup = b;
note = b;
rightKerningGroup = b;
unicode = 0062;
},
{
glyphname = c;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"430 -9 OFFCURVE",
"564 70 OFFCURVE",
"592 140 QCURVE",
"445 215 LINE",
"408 142 OFFCURVE",
"337 142 QCURVE SMOOTH",
"286 142 OFFCURVE",
"219 211 OFFCURVE",
"219 272 QCURVE SMOOTH",
"219 332 OFFCURVE",
"286 400 OFFCURVE",
"337 400 QCURVE SMOOTH",
"408 400 OFFCURVE",
"445 327 QCURVE",
"592 402 LINE",
"564 472 OFFCURVE",
"430 551 OFFCURVE",
"338 551 QCURVE SMOOTH",
"248 551 OFFCURVE",
"106 480 OFFCURVE",
"27 353 OFFCURVE",
"27 272 QCURVE SMOOTH",
"27 191 OFFCURVE",
"106 63 OFFCURVE",
"248 -9 OFFCURVE",
"338 -9 QCURVE",
"338 -9 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */\01210 1 1 0 21 11 2 2 1 22 1 3 2 3 74 0 1 1 0 95 0 0 0 75 75 0 2 2 3 95 4 1 3 3 76 3 76 0 0 0 25 0 24 36 36 38 5 10 23 \012CALL[ ]	/* CallFunction */";
};
width = 603;
}
);
leftKerningGroup = c;
note = c;
rightKerningGroup = c;
unicode = 0063;
},
{
glyphname = d;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"447 742 LINE",
"447 495 LINE",
"394 551 OFFCURVE",
"297 551 QCURVE SMOOTH",
"223 551 OFFCURVE",
"101 483 OFFCURVE",
"30 356 OFFCURVE",
"30 272 QCURVE SMOOTH",
"30 188 OFFCURVE",
"101 60 OFFCURVE",
"223 -9 OFFCURVE",
"297 -9 QCURVE SMOOTH",
"403 -9 OFFCURVE",
"456 54 QCURVE",
"456 0 LINE",
"637 0 LINE",
"637 742 LINE",
"637 742 LINE"
);
},
{
closed = 1;
nodes = (
"287 142 OFFCURVE",
"223 211 OFFCURVE",
"223 272 QCURVE SMOOTH",
"223 332 OFFCURVE",
"287 400 OFFCURVE",
"337 400 QCURVE SMOOTH",
"387 400 OFFCURVE",
"450 332 OFFCURVE",
"450 272 QCURVE SMOOTH",
"450 211 OFFCURVE",
"386 142 OFFCURVE",
"337 142 QCURVE",
"337 142 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */\01215 1 4 2 3 1 0 5 2 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01212 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 29 values pushed */\0126 1 3 3 68 75 0 4 4 2 95 0 2 2 75 75 7 1 5 5 0 95 1 1 0 0 67 0 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01227 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 35 values pushed */\0126 1 3 3 0 95 1 1 0 0 67 75 0 4 4 2 95 0 2 2 75 75 7 1 5 5 0 95 1 1 0 0 67 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 33 values pushed */\0120 4 4 2 95 0 2 2 75 75 6 1 3 3 0 93 0 0 0 67 75 7 1 5 5 1 95 0 1 1 76 1 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 20 values pushed */\01217 17 0 0 17 28 17 27 23 21 0 16 0 16 38 34 17 8 10 23 \012CALL[ ]	/* CallFunction */";
};
width = 698;
}
);
leftKerningGroup = c;
note = d;
rightKerningGroup = d;
unicode = 0064;
},
{
glyphname = e;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"615 357 OFFCURVE",
"538 484 OFFCURVE",
"406 551 OFFCURVE",
"325 551 QCURVE SMOOTH",
"240 551 OFFCURVE",
"104 479 OFFCURVE",
"27 352 OFFCURVE",
"27 272 QCURVE SMOOTH",
"27 191 OFFCURVE",
"106 63 OFFCURVE",
"250 -9 OFFCURVE",
"345 -9 QCURVE SMOOTH",
"497 -9 OFFCURVE",
"576 79 QCURVE",
"476 183 LINE",
"447 158 OFFCURVE",
"390 136 OFFCURVE",
"351 136 QCURVE SMOOTH",
"299 136 OFFCURVE",
"230 181 OFFCURVE",
"218 223 QCURVE",
"612 223 LINE",
"615 268 OFFCURVE",
"615 270 QCURVE",
"615 270 LINE"
);
},
{
closed = 1;
nodes = (
"370 416 OFFCURVE",
"429 366 OFFCURVE",
"437 323 QCURVE",
"215 323 LINE",
"223 366 OFFCURVE",
"282 416 OFFCURVE",
"326 416 QCURVE",
"326 416 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */\0128 1 1 0 9 1 2 1 2 74 0 4 0 0 1 4 0 101 6 1 5 5 3 95 0 3 3 75 75 0 1 1 2 95 0 2 2 76 2 76 24 24 24 30 24 29 22 38 36 34 17 7 10 25 \012CALL[ ]	/* CallFunction */";
};
width = 642;
}
);
leftKerningGroup = c;
note = e;
rightKerningGroup = ae;
unicode = 0065;
},
{
glyphname = f;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"268 534 LINE SMOOTH",
"268 569 OFFCURVE",
"301 605 OFFCURVE",
"331 605 QCURVE SMOOTH",
"360 605 OFFCURVE",
"388 589 QCURVE",
"435 723 LINE",
"413 737 OFFCURVE",
"345 751 OFFCURVE",
"309 751 QCURVE SMOOTH",
"202 751 OFFCURVE",
"83 635 OFFCURVE",
"83 536 QCURVE SMOOTH",
"83 522 LINE",
"4 522 LINE",
"4 380 LINE",
"83 380 LINE",
"83 0 LINE",
"273 0 LINE",
"273 380 LINE",
"397 380 LINE",
"397 522 LINE",
"268 522 LINE",
"268 522 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */\01216 1 6 5 17 1 0 6 2 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01212 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 28 values pushed */\0120 6 6 5 95 0 5 5 68 75 3 1 1 1 0 93 4 1 0 0 69 75 0 2 2 67 2 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01225 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 26 values pushed */\0120 5 0 6 0 5 6 103 3 1 1 1 0 93 4 1 0 0 69 75 0 2 2 67 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 24 values pushed */\0120 5 0 6 0 5 6 103 4 1 0 3 1 1 2 0 1 101 0 2 2 67 2 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 10 values pushed */\01236 35 17 17 17 17 16 7 10 27 \012CALL[ ]	/* CallFunction */";
};
width = 406;
}
);
note = f;
rightKerningGroup = f;
unicode = 0066;
},
{
glyphname = g;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"463 542 LINE",
"463 476 LINE",
"409 551 OFFCURVE",
"293 551 QCURVE SMOOTH",
"221 551 OFFCURVE",
"99 486 OFFCURVE",
"27 367 OFFCURVE",
"27 290 QCURVE SMOOTH",
"27 212 OFFCURVE",
"99 93 OFFCURVE",
"221 28 OFFCURVE",
"293 28 QCURVE SMOOTH",
"399 28 OFFCURVE",
"454 92 QCURVE",
"454 74 LINE SMOOTH",
"454 9 OFFCURVE",
"384 -57 OFFCURVE",
"309 -57 QCURVE SMOOTH",
"260 -57 OFFCURVE",
"159 -26 OFFCURVE",
"126 1 QCURVE",
"57 -132 LINE",
"106 -167 OFFCURVE",
"246 -203 OFFCURVE",
"326 -203 QCURVE SMOOTH",
"480 -203 OFFCURVE",
"644 -52 OFFCURVE",
"644 99 QCURVE SMOOTH",
"644 542 LINE",
"644 542 LINE"
);
},
{
closed = 1;
nodes = (
"287 179 OFFCURVE",
"219 241 OFFCURVE",
"219 290 QCURVE SMOOTH",
"219 339 OFFCURVE",
"286 400 OFFCURVE",
"338 400 QCURVE SMOOTH",
"390 400 OFFCURVE",
"456 339 OFFCURVE",
"456 290 QCURVE SMOOTH",
"456 241 OFFCURVE",
"389 179 OFFCURVE",
"338 179 QCURVE",
"338 179 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01227 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 18 values pushed */\01227 1 5 3 15 1 2 6 8 1 1 2 7 1 0 1 4 74 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 18 values pushed */\01227 1 5 4 15 1 2 6 8 1 1 2 7 1 0 1 4 74 \012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01227 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 32 values pushed */\0128 1 6 0 2 1 6 2 103 0 5 5 3 95 7 4 2 3 3 75 75 0 1 1 0 96 0 0 0 77 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 36 values pushed */\0128 1 6 0 2 1 6 2 103 7 1 4 4 69 75 0 5 5 3 95 0 3 3 75 75 0 1 1 0 96 0 0 0 77 0 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 21 values pushed */\01229 29 0 0 29 40 29 39 35 33 0 28 0 28 38 36 37 35 9 10 24 \012CALL[ ]	/* CallFunction */";
};
width = 705;
}
);
leftKerningGroup = c;
note = g;
rightKerningGroup = Lj;
unicode = 0067;
},
{
glyphname = h;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"366 551 OFFCURVE",
"282 521 OFFCURVE",
"251 492 QCURVE",
"251 742 LINE",
"61 742 LINE",
"61 0 LINE",
"251 0 LINE",
"251 262 LINE SMOOTH",
"251 326 OFFCURVE",
"310 390 OFFCURVE",
"359 390 QCURVE SMOOTH",
"448 390 OFFCURVE",
"448 279 QCURVE SMOOTH",
"448 0 LINE",
"638 0 LINE",
"638 310 LINE SMOOTH",
"638 431 OFFCURVE",
"515 551 OFFCURVE",
"414 551 QCURVE",
"414 551 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\01215 1 1 4 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01212 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 23 values pushed */\0120 3 3 68 75 0 1 1 4 95 5 1 4 4 75 75 2 1 0 0 67 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 23 values pushed */\0120 1 1 4 95 5 1 4 4 75 75 0 3 3 0 93 2 1 0 0 67 0 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 13 values pushed */\0120 0 0 18 0 17 17 19 34 19 6 10 24 \012CALL[ ]	/* CallFunction */";
};
width = 696;
}
);
leftKerningGroup = b;
note = h;
rightKerningGroup = a;
unicode = 0068;
},
{
glyphname = i;
layers = (
{
components = (
{
name = idotless;
},
{
name = dotaccentcomb.i;
transform = "{1, 0, 0, 1, 456, 0}";
}
);
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
width = 313;
}
);
leftKerningGroup = i;
note = i;
rightKerningGroup = Lj;
unicode = 0069;
},
{
glyphname = j;
layers = (
{
components = (
{
name = jdotless;
},
{
name = dotaccentcomb.i;
transform = "{1, 0, 0, 1, 464, 0}";
}
);
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
width = 320;
}
);
leftKerningGroup = j;
note = j;
rightKerningGroup = Lj;
unicode = 006A;
},
{
glyphname = k;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"459 0 LINE",
"689 0 LINE",
"445 310 LINE",
"670 542 LINE",
"445 542 LINE",
"251 353 LINE",
"251 742 LINE",
"61 742 LINE",
"61 0 LINE",
"251 0 LINE",
"251 133 LINE",
"307 190 LINE",
"307 190 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */\0129 6 1 3 0 2 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01212 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 17 values pushed */\0120 1 1 68 75 0 2 2 69 75 3 1 0 0 67 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 23 values pushed */\0120 1 1 0 93 3 1 0 0 67 75 0 2 2 69 75 3 1 0 0 67 0 76 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 7 values pushed */\01218 18 17 18 4 10 24 \012CALL[ ]	/* CallFunction */";
};
width = 686;
}
);
leftKerningGroup = b;
note = k;
rightKerningGroup = k;
unicode = 006B;
},
{
glyphname = l;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"61 0 LINE",
"251 0 LINE",
"251 742 LINE",
"61 742 LINE",
"61 742 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01212 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 11 values pushed */\0120 0 0 68 75 0 1 1 67 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 11 values pushed */\0120 0 0 1 93 0 1 1 67 1 76 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 5 values pushed */\01217 16 2 10 22 \012CALL[ ]	/* CallFunction */";
};
width = 313;
}
);
leftKerningGroup = b;
note = l;
rightKerningGroup = d;
unicode = 006C;
},
{
glyphname = m;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"709 551 OFFCURVE",
"611 507 OFFCURVE",
"579 466 QCURVE",
"551 509 OFFCURVE",
"461 551 OFFCURVE",
"404 551 QCURVE SMOOTH",
"355 551 OFFCURVE",
"272 518 OFFCURVE",
"242 485 QCURVE",
"242 542 LINE",
"61 542 LINE",
"61 0 LINE",
"251 0 LINE",
"251 269 LINE SMOOTH",
"251 330 OFFCURVE",
"303 390 OFFCURVE",
"347 390 QCURVE SMOOTH",
"429 390 OFFCURVE",
"429 279 QCURVE SMOOTH",
"429 0 LINE",
"619 0 LINE",
"619 269 LINE SMOOTH",
"619 330 OFFCURVE",
"671 390 OFFCURVE",
"714 390 QCURVE SMOOTH",
"753 390 OFFCURVE",
"796 336 OFFCURVE",
"796 279 QCURVE SMOOTH",
"796 0 LINE",
"986 0 LINE",
"986 310 LINE SMOOTH",
"986 431 OFFCURVE",
"867 551 OFFCURVE",
"767 551 QCURVE",
"767 551 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 7 values pushed */\01230 24 2 1 5 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01227 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 22 values pushed */\0123 1 1 1 5 95 8 7 6 3 5 5 69 75 4 2 2 0 0 67 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 26 values pushed */\0120 5 5 69 75 3 1 1 1 6 95 8 7 2 6 6 75 75 4 2 2 0 0 67 0 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 16 values pushed */\0120 0 0 33 0 32 35 17 19 34 19 35 19 9 10 27 \012CALL[ ]	/* CallFunction */";
};
width = 1045;
}
);
leftKerningGroup = i;
note = m;
rightKerningGroup = a;
unicode = 006D;
},
{
glyphname = n;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"362 551 OFFCURVE",
"274 516 OFFCURVE",
"242 483 QCURVE",
"242 542 LINE",
"61 542 LINE",
"61 0 LINE",
"251 0 LINE",
"251 262 LINE SMOOTH",
"251 326 OFFCURVE",
"310 390 OFFCURVE",
"359 390 QCURVE SMOOTH",
"448 390 OFFCURVE",
"448 279 QCURVE SMOOTH",
"448 0 LINE",
"638 0 LINE",
"638 310 LINE SMOOTH",
"638 431 OFFCURVE",
"515 551 OFFCURVE",
"414 551 QCURVE",
"414 551 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\01215 1 1 3 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01227 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 19 values pushed */\0120 1 1 3 95 5 4 2 3 3 69 75 2 1 0 0 67 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 23 values pushed */\0120 3 3 69 75 0 1 1 4 95 5 1 4 4 75 75 2 1 0 0 67 0 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 13 values pushed */\0120 0 0 18 0 17 17 19 34 19 6 10 24 \012CALL[ ]	/* CallFunction */";
};
width = 696;
}
);
leftKerningGroup = i;
note = n;
rightKerningGroup = a;
unicode = 006E;
},
{
glyphname = o;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"421 -9 OFFCURVE",
"561 63 OFFCURVE",
"639 191 OFFCURVE",
"639 272 QCURVE SMOOTH",
"639 353 OFFCURVE",
"561 480 OFFCURVE",
"421 551 OFFCURVE",
"333 551 QCURVE SMOOTH",
"245 551 OFFCURVE",
"106 480 OFFCURVE",
"27 352 OFFCURVE",
"27 272 QCURVE SMOOTH",
"27 191 OFFCURVE",
"106 63 OFFCURVE",
"246 -9 OFFCURVE",
"333 -9 QCURVE",
"333 -9 LINE"
);
},
{
closed = 1;
nodes = (
"283 142 OFFCURVE",
"219 211 OFFCURVE",
"219 272 QCURVE SMOOTH",
"219 332 OFFCURVE",
"283 400 OFFCURVE",
"333 400 QCURVE SMOOTH",
"383 400 OFFCURVE",
"447 332 OFFCURVE",
"447 272 QCURVE SMOOTH",
"447 211 OFFCURVE",
"383 142 OFFCURVE",
"333 142 QCURVE",
"333 142 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */\0120 2 2 0 95 0 0 0 75 75 5 1 3 3 1 95 4 1 1 1 76 1 76 16 16 0 0 16 27 16 26 22 20 0 15 0 14 38 6 10 21 \012CALL[ ]	/* CallFunction */";
};
width = 666;
}
);
leftKerningGroup = c;
note = o;
rightKerningGroup = b;
unicode = 006F;
},
{
glyphname = p;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"295 551 OFFCURVE",
"242 488 QCURVE",
"242 542 LINE",
"61 542 LINE",
"61 -194 LINE",
"251 -194 LINE",
"251 48 LINE",
"307 -9 OFFCURVE",
"402 -9 QCURVE SMOOTH",
"476 -9 OFFCURVE",
"597 60 OFFCURVE",
"668 187 OFFCURVE",
"668 271 QCURVE SMOOTH",
"668 355 OFFCURVE",
"597 482 OFFCURVE",
"476 551 OFFCURVE",
"402 551 QCURVE",
"402 551 LINE"
);
},
{
closed = 1;
nodes = (
"312 142 OFFCURVE",
"248 211 OFFCURVE",
"248 271 QCURVE SMOOTH",
"248 331 OFFCURVE",
"312 400 OFFCURVE",
"362 400 QCURVE SMOOTH",
"412 400 OFFCURVE",
"476 331 OFFCURVE",
"476 271 QCURVE SMOOTH",
"476 211 OFFCURVE",
"412 142 OFFCURVE",
"362 142 QCURVE",
"362 142 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */\01214 1 4 2 9 1 0 5 2 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01227 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 29 values pushed */\0120 4 4 2 95 6 3 2 2 2 69 75 7 1 5 5 0 95 0 0 0 76 75 0 1 1 71 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 33 values pushed */\0120 2 2 69 75 0 4 4 3 95 6 1 3 3 75 75 7 1 5 5 0 95 0 0 0 76 75 0 1 1 71 1 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 20 values pushed */\01217 17 0 0 17 28 17 27 23 21 0 16 0 15 17 18 38 8 10 23 \012CALL[ ]	/* CallFunction */";
};
width = 695;
}
);
leftKerningGroup = i;
note = p;
rightKerningGroup = b;
unicode = 0070;
},
{
glyphname = q;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"453 542 LINE",
"453 488 LINE",
"400 551 OFFCURVE",
"293 551 QCURVE SMOOTH",
"219 551 OFFCURVE",
"98 482 OFFCURVE",
"27 355 OFFCURVE",
"27 271 QCURVE SMOOTH",
"27 187 OFFCURVE",
"98 60 OFFCURVE",
"219 -9 OFFCURVE",
"293 -9 QCURVE SMOOTH",
"389 -9 OFFCURVE",
"444 48 QCURVE",
"444 -194 LINE",
"634 -194 LINE",
"634 542 LINE",
"634 542 LINE"
);
},
{
closed = 1;
nodes = (
"283 142 OFFCURVE",
"219 211 OFFCURVE",
"219 271 QCURVE SMOOTH",
"219 331 OFFCURVE",
"283 400 OFFCURVE",
"333 400 QCURVE SMOOTH",
"383 400 OFFCURVE",
"447 331 OFFCURVE",
"447 271 QCURVE SMOOTH",
"447 211 OFFCURVE",
"383 142 OFFCURVE",
"333 142 QCURVE",
"333 142 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01227 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 10 values pushed */\01215 1 4 2 3 1 1 5 2 74 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 10 values pushed */\01215 1 4 3 3 1 1 5 2 74 \012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01227 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 29 values pushed */\0120 4 4 2 95 6 3 2 2 2 75 75 7 1 5 5 1 95 0 1 1 76 75 0 0 0 71 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 33 values pushed */\0126 1 3 3 69 75 0 4 4 2 95 0 2 2 75 75 7 1 5 5 1 95 0 1 1 76 75 0 0 0 71 0 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 20 values pushed */\01217 17 0 0 17 28 17 27 23 21 0 16 0 16 38 34 17 8 10 23 \012CALL[ ]	/* CallFunction */";
};
width = 695;
}
);
leftKerningGroup = c;
note = q;
rightKerningGroup = Lj;
unicode = 0071;
},
{
glyphname = r;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"242 542 LINE",
"61 542 LINE",
"61 0 LINE",
"251 0 LINE",
"251 249 LINE SMOOTH",
"251 317 OFFCURVE",
"320 383 OFFCURVE",
"381 383 QCURVE SMOOTH",
"398 383 OFFCURVE",
"424 380 QCURVE",
"424 551 LINE",
"364 551 OFFCURVE",
"271 514 OFFCURVE",
"242 477 QCURVE",
"242 477 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01227 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 10 values pushed */\01213 1 1 0 3 1 2 1 2 74 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 10 values pushed */\01213 1 1 3 3 1 2 1 2 74 \012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01227 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 17 values pushed */\0120 1 1 0 95 3 1 0 0 75 75 0 2 2 67 2 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 21 values pushed */\0120 3 3 69 75 0 1 1 0 95 0 0 0 75 75 0 2 2 67 2 76 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 7 values pushed */\01217 19 34 17 4 10 24 \012CALL[ ]	/* CallFunction */";
};
width = 443;
}
);
leftKerningGroup = i;
note = r;
rightKerningGroup = r;
unicode = 0072;
},
{
glyphname = s;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"343 -9 OFFCURVE",
"464 37 OFFCURVE",
"526 118 OFFCURVE",
"526 169 QCURVE SMOOTH",
"526 231 OFFCURVE",
"461 300 OFFCURVE",
"373 326 OFFCURVE",
"306 336 QCURVE SMOOTH",
"253 344 OFFCURVE",
"207 359 OFFCURVE",
"207 378 QCURVE SMOOTH",
"207 395 OFFCURVE",
"249 416 OFFCURVE",
"294 416 QCURVE SMOOTH",
"378 416 OFFCURVE",
"450 376 QCURVE",
"507 505 LINE",
"468 527 OFFCURVE",
"352 551 OFFCURVE",
"293 551 QCURVE SMOOTH",
"210 551 OFFCURVE",
"91 504 OFFCURVE",
"29 423 OFFCURVE",
"29 371 QCURVE SMOOTH",
"29 308 OFFCURVE",
"95 238 OFFCURVE",
"186 212 OFFCURVE",
"251 204 QCURVE SMOOTH",
"302 197 OFFCURVE",
"349 182 OFFCURVE",
"349 164 QCURVE SMOOTH",
"349 146 OFFCURVE",
"310 127 OFFCURVE",
"264 127 QCURVE SMOOTH",
"214 127 OFFCURVE",
"112 154 OFFCURVE",
"75 177 QCURVE",
"18 47 LINE",
"58 22 OFFCURVE",
"190 -9 OFFCURVE",
"258 -9 QCURVE",
"258 -9 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */\01223 1 2 1 24 3 2 0 2 2 1 3 0 3 74 0 2 2 1 95 0 1 1 75 75 0 0 0 3 95 4 1 3 3 76 3 76 0 0 0 40 0 39 36 44 37 5 10 23 \012CALL[ ]	/* CallFunction */";
};
width = 547;
}
);
leftKerningGroup = s;
note = s;
rightKerningGroup = s;
unicode = 0073;
},
{
glyphname = t;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"388 155 LINE",
"363 138 OFFCURVE",
"330 138 QCURVE SMOOTH",
"304 138 OFFCURVE",
"273 171 OFFCURVE",
"273 200 QCURVE SMOOTH",
"273 380 LINE",
"397 380 LINE",
"397 522 LINE",
"273 522 LINE",
"273 663 LINE",
"83 663 LINE",
"83 522 LINE",
"4 522 LINE",
"4 380 LINE",
"83 380 LINE",
"83 198 LINE SMOOTH",
"83 95 OFFCURVE",
"197 -9 OFFCURVE",
"303 -9 QCURVE SMOOTH",
"342 -9 OFFCURVE",
"411 7 OFFCURVE",
"435 22 QCURVE",
"435 22 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\01222 1 6 1 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01225 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 28 values pushed */\0120 3 2 3 131 5 1 1 1 2 93 4 1 2 2 69 75 0 6 6 0 96 0 0 0 76 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 26 values pushed */\0120 3 2 3 131 4 1 2 5 1 1 6 2 1 101 0 6 6 0 96 0 0 0 76 0 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 10 values pushed */\01235 17 17 17 17 19 34 7 10 27 \012CALL[ ]	/* CallFunction */";
};
width = 447;
}
);
leftKerningGroup = t;
note = t;
rightKerningGroup = t;
unicode = 0074;
},
{
glyphname = u;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"441 542 LINE",
"441 281 LINE SMOOTH",
"441 216 OFFCURVE",
"384 153 OFFCURVE",
"339 153 QCURVE SMOOTH",
"295 153 OFFCURVE",
"249 209 OFFCURVE",
"249 270 QCURVE SMOOTH",
"249 542 LINE",
"59 542 LINE",
"59 239 LINE SMOOTH",
"59 115 OFFCURVE",
"184 -9 OFFCURVE",
"289 -9 QCURVE SMOOTH",
"336 -9 OFFCURVE",
"420 25 OFFCURVE",
"450 58 QCURVE",
"450 0 LINE",
"631 0 LINE",
"631 542 LINE",
"631 542 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\0123 1 0 3 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01227 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 19 values pushed */\0125 4 2 2 2 69 75 0 3 3 0 96 1 1 0 0 67 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 23 values pushed */\0125 4 2 2 2 69 75 0 0 0 67 75 0 3 3 1 96 0 1 1 76 1 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 13 values pushed */\0120 0 0 19 0 19 35 19 35 17 6 10 24 \012CALL[ ]	/* CallFunction */";
};
width = 692;
}
);
leftKerningGroup = u;
note = u;
rightKerningGroup = Lj;
unicode = 0075;
},
{
glyphname = v;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"451 542 LINE",
"314 211 LINE",
"184 542 LINE",
"-11 542 LINE",
"212 0 LINE",
"408 0 LINE",
"632 542 LINE",
"632 542 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */\0125 1 0 1 1 74 3 2 2 1 1 69 75 0 0 0 67 0 76 0 0 0 6 0 6 17 17 4 10 22 \012CALL[ ]	/* CallFunction */";
};
width = 620;
}
);
leftKerningGroup = v;
note = v;
rightKerningGroup = v;
unicode = 0076;
},
{
glyphname = w;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"792 542 LINE",
"677 211 LINE",
"565 542 LINE",
"403 542 LINE",
"288 214 LINE",
"177 542 LINE",
"-3 542 LINE",
"190 0 LINE",
"374 0 LINE",
"480 295 LINE",
"582 0 LINE",
"766 0 LINE",
"959 542 LINE",
"959 542 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */\01211 8 3 3 0 2 1 74 5 4 3 3 2 2 69 75 1 1 0 0 67 0 76 0 0 0 12 0 12 18 17 18 17 6 10 24 \012CALL[ ]	/* CallFunction */";
};
width = 956;
}
);
leftKerningGroup = v;
note = w;
rightKerningGroup = v;
unicode = 0077;
},
{
glyphname = x;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"622 0 LINE",
"415 278 LINE",
"615 542 LINE",
"414 542 LINE",
"314 405 LINE",
"218 542 LINE",
"4 542 LINE",
"204 271 LINE",
"-2 0 LINE",
"204 0 LINE",
"308 142 LINE",
"405 0 LINE",
"405 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */\01210 7 4 1 4 0 1 1 74 2 1 1 1 69 75 4 3 2 0 0 67 0 76 0 0 0 11 0 11 18 18 18 5 10 23 \012CALL[ ]	/* CallFunction */";
};
width = 619;
}
);
leftKerningGroup = x;
note = x;
rightKerningGroup = x;
unicode = 0078;
},
{
glyphname = y;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"451 542 LINE",
"317 211 LINE",
"184 542 LINE",
"-11 542 LINE",
"221 -7 LINE",
"209 -31 OFFCURVE",
"174 -53 OFFCURVE",
"147 -53 QCURVE SMOOTH",
"124 -53 OFFCURVE",
"79 -36 OFFCURVE",
"63 -21 QCURVE",
"-3 -154 LINE",
"24 -176 OFFCURVE",
"111 -203 OFFCURVE",
"154 -203 QCURVE SMOOTH",
"239 -203 OFFCURVE",
"357 -122 OFFCURVE",
"398 -22 QCURVE SMOOTH",
"632 542 LINE",
"632 542 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */\01217 14 8 3 1 2 7 1 0 1 2 74 4 3 2 2 2 69 75 0 1 1 0 96 0 0 0 77 0 76 0 0 0 18 0 18 19 37 35 5 10 23 \012CALL[ ]	/* CallFunction */";
};
width = 620;
}
);
leftKerningGroup = v;
note = y;
rightKerningGroup = v;
unicode = 0079;
},
{
glyphname = z;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"272 142 LINE",
"523 431 LINE",
"523 542 LINE",
"40 542 LINE",
"40 401 LINE",
"284 401 LINE",
"33 112 LINE",
"33 0 LINE",
"533 0 LINE",
"533 142 LINE",
"533 142 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */\0128 1 1 2 3 1 0 3 2 74 0 1 1 2 93 0 2 2 69 75 4 1 3 3 0 93 0 0 0 67 0 76 0 0 0 9 0 9 17 18 17 5 10 23 \012CALL[ ]	/* CallFunction */";
};
width = 556;
}
);
leftKerningGroup = z;
note = z;
rightKerningGroup = Dzcaron;
unicode = 007A;
},
{
glyphname = period;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"190 -9 OFFCURVE",
"255 55 OFFCURVE",
"255 104 QCURVE SMOOTH",
"255 154 OFFCURVE",
"191 216 OFFCURVE",
"141 216 QCURVE SMOOTH",
"92 216 OFFCURVE",
"27 154 OFFCURVE",
"27 104 QCURVE SMOOTH",
"27 55 OFFCURVE",
"93 -9 OFFCURVE",
"141 -9 QCURVE",
"141 -9 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */\0120 0 0 1 95 2 1 1 1 76 1 76 0 0 0 11 0 10 36 3 10 21 \012CALL[ ]	/* CallFunction */";
};
width = 283;
}
);
leftKerningGroup = comma;
note = period;
rightKerningGroup = comma;
unicode = 002E;
},
{
glyphname = comma;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"92 216 OFFCURVE",
"28 154 OFFCURVE",
"28 104 QCURVE SMOOTH",
"28 70 OFFCURVE",
"59 19 OFFCURVE",
"87 6 QCURVE",
"40 -157 LINE",
"159 -157 LINE",
"222 -11 LINE SMOOTH",
"243 35 OFFCURVE",
"255 81 OFFCURVE",
"255 104 QCURVE SMOOTH",
"255 154 OFFCURVE",
"191 216 OFFCURVE",
"142 216 QCURVE",
"142 216 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */\0128 1 0 1 1 74 2 1 1 0 0 1 87 2 1 1 1 0 93 0 0 1 0 77 0 0 0 14 0 13 22 3 10 21 \012CALL[ ]	/* CallFunction */";
};
width = 283;
}
);
leftKerningGroup = comma;
note = comma;
rightKerningGroup = comma;
unicode = 002C;
},
{
glyphname = colon;
layers = (
{
components = (
{
name = period;
transform = "{1, 0, 0, 1, 0, 335}";
},
{
name = period;
}
);
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
width = 283;
}
);
leftKerningGroup = colon;
note = colon;
rightKerningGroup = colon;
unicode = 003A;
},
{
glyphname = semicolon;
layers = (
{
components = (
{
name = period;
transform = "{1, 0, 0, 1, 0, 335}";
},
{
name = comma;
}
);
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
width = 283;
}
);
leftKerningGroup = colon;
note = semicolon;
rightKerningGroup = colon;
unicode = 003B;
},
{
glyphname = ellipsis;
layers = (
{
components = (
{
name = period;
},
{
name = period;
transform = "{1, 0, 0, 1, 288, 0}";
},
{
name = period;
transform = "{1, 0, 0, 1, 575, 0}";
}
);
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
width = 858;
}
);
leftKerningGroup = comma;
note = ellipsis;
rightKerningGroup = comma;
unicode = 2026;
},
{
glyphname = exclam;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"75 255 LINE",
"226 255 LINE",
"264 700 LINE",
"38 700 LINE",
"38 700 LINE"
);
},
{
closed = 1;
nodes = (
"200 -9 OFFCURVE",
"264 52 OFFCURVE",
"264 96 QCURVE SMOOTH",
"264 141 OFFCURVE",
"201 199 OFFCURVE",
"151 199 QCURVE SMOOTH",
"101 199 OFFCURVE",
"37 141 OFFCURVE",
"37 96 QCURVE SMOOTH",
"37 52 OFFCURVE",
"101 -9 OFFCURVE",
"151 -9 QCURVE",
"151 -9 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */\0120 1 1 0 93 0 0 0 66 75 0 2 2 3 95 4 1 3 3 76 3 76 4 4 4 15 4 14 37 17 16 5 10 23 \012CALL[ ]	/* CallFunction */";
};
width = 301;
}
);
leftKerningGroup = exclam;
note = exclam;
rightKerningGroup = exclam;
unicode = 0021;
},
{
glyphname = question;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"390 255 LINE",
"390 282 OFFCURVE",
"422 323 OFFCURVE",
"456 352 QCURVE SMOOTH",
"487 379 OFFCURVE",
"526 422 OFFCURVE",
"554 485 OFFCURVE",
"554 526 QCURVE SMOOTH",
"554 615 OFFCURVE",
"409 714 OFFCURVE",
"290 714 QCURVE SMOOTH",
"184 714 OFFCURVE",
"34 636 OFFCURVE",
"-7 566 QCURVE",
"142 486 LINE",
"162 520 OFFCURVE",
"227 558 OFFCURVE",
"267 558 QCURVE SMOOTH",
"306 558 OFFCURVE",
"355 523 OFFCURVE",
"355 494 QCURVE SMOOTH",
"355 473 OFFCURVE",
"327 436 OFFCURVE",
"298 409 QCURVE SMOOTH",
"256 370 OFFCURVE",
"212 305 OFFCURVE",
"212 255 QCURVE",
"212 255 LINE"
);
},
{
closed = 1;
nodes = (
"351 -9 OFFCURVE",
"415 52 OFFCURVE",
"415 96 QCURVE SMOOTH",
"415 141 OFFCURVE",
"351 199 OFFCURVE",
"301 199 QCURVE SMOOTH",
"251 199 OFFCURVE",
"188 141 OFFCURVE",
"188 96 QCURVE SMOOTH",
"188 52 OFFCURVE",
"252 -9 OFFCURVE",
"301 -9 QCURVE",
"301 -9 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 53 values pushed */\01212 1 0 1 11 1 2 0 2 74 0 2 0 3 0 2 3 126 0 0 0 1 95 0 1 1 72 75 0 3 3 4 95 5 1 4 4 76 4 76 27 27 27 38 27 37 37 25 37 39 6 10 24 \012CALL[ ]	/* CallFunction */";
};
width = 597;
}
);
leftKerningGroup = question;
note = question;
rightKerningGroup = question;
unicode = 003F;
},
{
glyphname = bullet;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"231 137 OFFCURVE",
"297 175 OFFCURVE",
"336 242 OFFCURVE",
"336 283 QCURVE SMOOTH",
"336 324 OFFCURVE",
"297 390 OFFCURVE",
"231 427 OFFCURVE",
"191 427 QCURVE SMOOTH",
"151 427 OFFCURVE",
"85 390 OFFCURVE",
"47 324 OFFCURVE",
"47 283 QCURVE SMOOTH",
"47 242 OFFCURVE",
"85 175 OFFCURVE",
"151 137 OFFCURVE",
"191 137 QCURVE",
"191 137 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */\0120 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 15 0 14 38 3 10 21 \012CALL[ ]	/* CallFunction */";
};
width = 383;
}
);
leftKerningGroup = periodcentered;
note = bullet;
rightKerningGroup = periodcentered;
unicode = 2022;
},
{
glyphname = asterisk;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"443 594 LINE",
"385 690 LINE",
"280 626 LINE",
"283 742 LINE",
"169 742 LINE",
"172 626 LINE",
"67 690 LINE",
"10 594 LINE",
"112 538 LINE",
"10 483 LINE",
"67 387 LINE",
"172 450 LINE",
"169 335 LINE",
"283 335 LINE",
"280 450 LINE",
"385 387 LINE",
"443 483 LINE",
"341 538 LINE",
"341 538 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */\01217 16 15 12 11 10 9 8 7 6 3 2 1 13 0 1 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01212 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 11 values pushed */\0120 0 0 1 93 0 1 1 68 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 16 values pushed */\0120 1 0 0 1 85 0 1 1 0 93 0 0 1 0 77 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 5 values pushed */\01224 20 2 10 22 \012CALL[ ]	/* CallFunction */";
};
width = 453;
}
);
leftKerningGroup = ordfeminine;
note = asterisk;
rightKerningGroup = ordfeminine;
unicode = 002A;
},
{
glyphname = numbersign;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"713 422 LINE",
"713 551 LINE",
"587 551 LINE",
"606 700 LINE",
"470 700 LINE",
"451 551 LINE",
"328 551 LINE",
"347 700 LINE",
"211 700 LINE",
"192 551 LINE",
"50 551 LINE",
"50 422 LINE",
"176 422 LINE",
"159 278 LINE",
"17 278 LINE",
"17 149 LINE",
"143 149 LINE",
"124 0 LINE",
"260 0 LINE",
"279 149 LINE",
"402 149 LINE",
"383 0 LINE",
"519 0 LINE",
"538 149 LINE",
"679 149 LINE",
"679 278 LINE",
"554 278 LINE",
"571 422 LINE",
"571 422 LINE"
);
},
{
closed = 1;
nodes = (
"418 278 LINE",
"295 278 LINE",
"312 422 LINE",
"435 422 LINE",
"435 422 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 70 values pushed */\01215 6 2 0 5 3 2 1 2 0 1 101 11 1 9 9 66 75 14 16 13 3 7 7 8 93 12 10 2 8 8 69 75 4 1 2 2 67 2 76 0 0 31 30 29 28 0 27 0 27 26 25 24 23 22 21 20 19 17 17 17 17 17 17 17 17 17 17 10 29 \012CALL[ ]	/* CallFunction */";
};
width = 730;
}
);
note = numbersign;
unicode = 0023;
},
{
glyphname = slash;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"-37 -100 LINE",
"132 -100 LINE",
"462 842 LINE",
"293 842 LINE",
"293 842 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 14 values pushed */\0120 0 1 0 131 0 1 1 116 17 16 2 10 22 \012CALL[ ]	/* CallFunction */";
};
width = 415;
}
);
leftKerningGroup = slash;
note = slash;
rightKerningGroup = slash;
unicode = 002F;
},
{
glyphname = backslash;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"452 -100 LINE",
"122 842 LINE",
"-47 842 LINE",
"283 -100 LINE",
"283 -100 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */\0120 0 1 0 131 2 1 1 1 116 0 0 0 3 0 3 17 3 10 21 \012CALL[ ]	/* CallFunction */";
};
width = 415;
}
);
leftKerningGroup = backslash;
note = backslash;
rightKerningGroup = backslash;
unicode = 005C;
},
{
glyphname = parenleft;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"371 -194 LINE",
"306 -79 OFFCURVE",
"246 148 OFFCURVE",
"246 274 QCURVE SMOOTH",
"246 400 OFFCURVE",
"306 627 OFFCURVE",
"371 742 QCURVE",
"189 742 LINE",
"127 652 OFFCURVE",
"60 411 OFFCURVE",
"60 274 QCURVE SMOOTH",
"60 137 OFFCURVE",
"127 -104 OFFCURVE",
"189 -194 QCURVE",
"189 -194 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01212 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 11 values pushed */\0120 0 0 68 75 0 1 1 71 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 11 values pushed */\0120 0 0 1 93 0 1 1 71 1 76 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 5 values pushed */\01222 21 2 10 22 \012CALL[ ]	/* CallFunction */";
};
width = 369;
}
);
leftKerningGroup = parenleft;
note = parenleft;
rightKerningGroup = parenleft;
unicode = 0028;
},
{
glyphname = parenright;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"180 -194 LINE",
"242 -104 OFFCURVE",
"309 137 OFFCURVE",
"309 274 QCURVE SMOOTH",
"309 411 OFFCURVE",
"242 652 OFFCURVE",
"180 742 QCURVE",
"-2 742 LINE",
"63 627 OFFCURVE",
"123 400 OFFCURVE",
"123 274 QCURVE SMOOTH",
"123 148 OFFCURVE",
"63 -79 OFFCURVE",
"-2 -194 QCURVE",
"-2 -194 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01212 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 12 values pushed */\0120 0 0 68 75 2 1 1 1 71 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 12 values pushed */\0120 0 0 1 93 2 1 1 1 71 1 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 10 values pushed */\0120 0 0 13 0 13 22 3 10 21 \012CALL[ ]	/* CallFunction */";
};
width = 369;
}
);
leftKerningGroup = parenright;
note = parenright;
rightKerningGroup = parenright;
unicode = 0029;
},
{
glyphname = braceleft;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"315 525 LINE SMOOTH",
"315 560 OFFCURVE",
"351 597 OFFCURVE",
"387 597 QCURVE SMOOTH",
"401 597 LINE",
"401 742 LINE",
"336 742 LINE SMOOTH",
"232 742 OFFCURVE",
"125 641 OFFCURVE",
"125 547 QCURVE SMOOTH",
"125 392 LINE SMOOTH",
"125 369 OFFCURVE",
"102 347 OFFCURVE",
"82 347 QCURVE SMOOTH",
"48 347 LINE",
"48 201 LINE",
"82 201 LINE SMOOTH",
"102 201 OFFCURVE",
"125 179 OFFCURVE",
"125 156 QCURVE SMOOTH",
"125 1 LINE SMOOTH",
"125 -93 OFFCURVE",
"232 -194 OFFCURVE",
"336 -194 QCURVE SMOOTH",
"401 -194 LINE",
"401 -49 LINE",
"387 -49 LINE SMOOTH",
"351 -49 OFFCURVE",
"315 -12 OFFCURVE",
"315 23 QCURVE SMOOTH",
"315 151 LINE SMOOTH",
"315 206 OFFCURVE",
"280 263 OFFCURVE",
"240 274 QCURVE",
"280 285 OFFCURVE",
"315 342 OFFCURVE",
"315 397 QCURVE",
"315 397 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\0122 1 2 3 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01212 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 29 values pushed */\0120 3 0 2 0 3 2 103 0 5 5 4 95 0 4 4 68 75 0 0 0 1 95 0 1 1 71 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 27 values pushed */\0120 4 0 5 3 4 5 103 0 3 0 2 0 3 2 103 0 0 0 1 95 0 1 1 71 1 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 9 values pushed */\01233 37 33 37 33 40 6 10 26 \012CALL[ ]	/* CallFunction */";
};
width = 414;
}
);
note = braceleft;
rightKerningGroup = braceleft;
unicode = 007B;
},
{
glyphname = braceright;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"332 347 LINE SMOOTH",
"312 347 OFFCURVE",
"289 369 OFFCURVE",
"289 392 QCURVE SMOOTH",
"289 547 LINE SMOOTH",
"289 641 OFFCURVE",
"182 742 OFFCURVE",
"78 742 QCURVE SMOOTH",
"12 742 LINE",
"12 597 LINE",
"27 597 LINE SMOOTH",
"63 597 OFFCURVE",
"99 560 OFFCURVE",
"99 525 QCURVE SMOOTH",
"99 397 LINE SMOOTH",
"99 342 OFFCURVE",
"134 285 OFFCURVE",
"174 274 QCURVE",
"134 263 OFFCURVE",
"99 206 OFFCURVE",
"99 151 QCURVE SMOOTH",
"99 23 LINE SMOOTH",
"99 -12 OFFCURVE",
"63 -49 OFFCURVE",
"27 -49 QCURVE SMOOTH",
"12 -49 LINE",
"12 -194 LINE",
"78 -194 LINE SMOOTH",
"182 -194 OFFCURVE",
"289 -93 OFFCURVE",
"289 1 QCURVE SMOOTH",
"289 156 LINE SMOOTH",
"289 179 OFFCURVE",
"312 201 OFFCURVE",
"332 201 QCURVE SMOOTH",
"365 201 LINE",
"365 347 LINE",
"365 347 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\01219 1 0 5 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01212 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 30 values pushed */\0126 1 5 0 0 2 5 0 103 0 3 3 4 95 0 4 4 68 75 0 2 2 1 95 0 1 1 71 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 28 values pushed */\0120 4 0 3 5 4 3 103 6 1 5 0 0 2 5 0 103 0 2 2 1 95 0 1 1 71 1 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\0120 0 0 36 0 35 33 44 33 37 33 7 10 25 \012CALL[ ]	/* CallFunction */";
};
width = 414;
}
);
leftKerningGroup = braceright;
note = braceright;
unicode = 007D;
},
{
glyphname = bracketleft;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"70 -194 LINE",
"376 -194 LINE",
"376 -49 LINE",
"260 -49 LINE",
"260 597 LINE",
"376 597 LINE",
"376 742 LINE",
"70 742 LINE",
"70 742 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01212 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 21 values pushed */\0120 1 1 0 93 0 0 0 68 75 0 2 2 3 93 0 3 3 71 3 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 19 values pushed */\0120 0 0 1 2 0 1 101 0 2 2 3 93 0 3 3 71 3 76 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 7 values pushed */\01217 17 17 16 4 10 24 \012CALL[ ]	/* CallFunction */";
};
width = 389;
}
);
leftKerningGroup = bracketleft;
note = bracketleft;
rightKerningGroup = braceleft;
unicode = 005B;
},
{
glyphname = bracketright;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"318 -194 LINE",
"318 742 LINE",
"12 742 LINE",
"12 597 LINE",
"128 597 LINE",
"128 -49 LINE",
"12 -49 LINE",
"12 -194 LINE",
"12 -194 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01212 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 22 values pushed */\0120 1 1 2 93 0 2 2 68 75 0 0 0 3 93 4 1 3 3 71 3 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 20 values pushed */\0120 2 0 1 0 2 1 101 0 0 0 3 93 4 1 3 3 71 3 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 12 values pushed */\0120 0 0 7 0 7 17 17 17 5 10 23 \012CALL[ ]	/* CallFunction */";
};
width = 389;
}
);
leftKerningGroup = braceright;
note = bracketright;
rightKerningGroup = bracketright;
unicode = 005D;
},
{
glyphname = hyphen;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"48 212 LINE",
"340 212 LINE",
"340 358 LINE",
"48 358 LINE",
"48 358 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */\0120 0 1 1 0 85 0 0 0 1 93 0 1 0 1 77 17 16 2 10 22 \012CALL[ ]	/* CallFunction */";
};
width = 388;
}
);
leftKerningGroup = periodcentered;
note = hyphen;
rightKerningGroup = periodcentered;
unicode = 002D;
},
{
glyphname = softhyphen;
layers = (
{
components = (
{
name = hyphen;
}
);
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
width = 388;
}
);
leftKerningGroup = periodcentered;
note = uni00AD;
rightKerningGroup = periodcentered;
unicode = 00AD;
},
{
glyphname = endash;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"0 229 LINE",
"500 229 LINE",
"500 342 LINE",
"0 342 LINE",
"0 342 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */\0120 0 1 1 0 85 0 0 0 1 93 0 1 0 1 77 17 16 2 10 22 \012CALL[ ]	/* CallFunction */";
};
width = 500;
}
);
note = endash;
unicode = 2013;
},
{
glyphname = emdash;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"0 229 LINE",
"1000 229 LINE",
"1000 342 LINE",
"0 342 LINE",
"0 342 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */\0120 0 1 1 0 85 0 0 0 1 93 0 1 0 1 77 17 16 2 10 22 \012CALL[ ]	/* CallFunction */";
};
width = 1000;
}
);
note = emdash;
unicode = 2014;
},
{
glyphname = figuredash;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"42 299 LINE",
"658 299 LINE",
"658 412 LINE",
"42 412 LINE",
"42 412 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */\0120 0 1 1 0 85 0 0 0 1 93 0 1 0 1 77 17 16 2 10 22 \012CALL[ ]	/* CallFunction */";
};
width = 700;
}
);
note = figuredash;
unicode = 2012;
},
{
glyphname = horizontalbar;
layers = (
{
components = (
{
name = emdash;
}
);
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
width = 1000;
}
);
note = uni2015;
unicode = 2015;
},
{
glyphname = hyphentwo;
layers = (
{
components = (
{
name = hyphen;
}
);
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
width = 388;
}
);
leftKerningGroup = periodcentered;
note = uni2010;
rightKerningGroup = periodcentered;
unicode = 2010;
},
{
glyphname = underscore;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"0 -104 LINE",
"500 -104 LINE",
"500 0 LINE",
"0 0 LINE",
"0 0 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 21 values pushed */\0120 0 1 1 0 85 0 0 0 1 93 0 1 0 1 77 17 16 2 10 22 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 500;
}
);
leftKerningGroup = underscore;
note = underscore;
rightKerningGroup = underscore;
unicode = 005F;
},
{
glyphname = quotedblleft;
layers = (
{
components = (
{
name = quoteleft;
},
{
name = quoteleft;
transform = "{1, 0, 0, 1, 262, 0}";
}
);
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
width = 545;
}
);
leftKerningGroup = quotedblleft;
note = quotedblleft;
rightKerningGroup = quotedblleft;
unicode = 201C;
},
{
glyphname = quotedblright;
layers = (
{
components = (
{
name = quoteright;
},
{
name = quoteright;
transform = "{1, 0, 0, 1, 262, 0}";
}
);
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
width = 545;
}
);
leftKerningGroup = quotedblright;
note = quotedblright;
rightKerningGroup = quotedblright;
unicode = 201D;
},
{
glyphname = quoteleft;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"243 742 LINE",
"124 742 LINE",
"60 595 LINE SMOOTH",
"39 550 OFFCURVE",
"27 504 OFFCURVE",
"27 481 QCURVE SMOOTH",
"27 431 OFFCURVE",
"91 369 OFFCURVE",
"141 369 QCURVE SMOOTH",
"191 369 OFFCURVE",
"255 431 OFFCURVE",
"255 481 QCURVE SMOOTH",
"255 515 OFFCURVE",
"224 566 OFFCURVE",
"196 579 QCURVE",
"196 579 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\01214 1 0 1 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01212 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 11 values pushed */\0120 0 0 1 93 0 1 1 68 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 16 values pushed */\0120 1 0 0 1 85 0 1 1 0 95 0 0 1 0 79 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 5 values pushed */\01222 36 2 10 22 \012CALL[ ]	/* CallFunction */";
};
width = 283;
}
);
leftKerningGroup = quotedblleft;
note = quoteleft;
rightKerningGroup = quotedblleft;
unicode = 2018;
},
{
glyphname = quoteright;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"92 751 OFFCURVE",
"28 689 OFFCURVE",
"28 639 QCURVE SMOOTH",
"28 605 OFFCURVE",
"59 554 OFFCURVE",
"87 541 QCURVE",
"40 378 LINE",
"159 378 LINE",
"223 524 LINE SMOOTH",
"243 570 OFFCURVE",
"255 616 OFFCURVE",
"255 639 QCURVE SMOOTH",
"255 689 OFFCURVE",
"191 751 OFFCURVE",
"142 751 QCURVE",
"142 751 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */\0128 1 0 1 1 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01212 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 12 values pushed */\0120 0 0 1 95 2 1 1 1 68 0 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 18 values pushed */\0122 1 1 0 0 1 87 2 1 1 1 0 93 0 0 1 0 77 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 10 values pushed */\0120 0 0 14 0 13 22 3 10 21 \012CALL[ ]	/* CallFunction */";
};
width = 283;
}
);
leftKerningGroup = quotedblright;
note = quoteright;
rightKerningGroup = quotedblright;
unicode = 2019;
},
{
glyphname = guillemetleft;
layers = (
{
components = (
{
name = guilsinglleft;
},
{
name = guilsinglleft;
transform = "{1, 0, 0, 1, 245, 0}";
}
);
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
width = 605;
}
);
leftKerningGroup = periodcentered;
note = guillemotleft;
rightKerningGroup = guillemetleft;
unicode = 00AB;
},
{
glyphname = guillemetright;
layers = (
{
components = (
{
name = guilsinglright;
},
{
name = guilsinglright;
transform = "{1, 0, 0, 1, 245, 0}";
}
);
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
width = 605;
}
);
leftKerningGroup = guillemetright;
note = guillemotright;
rightKerningGroup = periodcentered;
unicode = 00BB;
},
{
glyphname = guilsinglleft;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"170 74 LINE",
"339 74 LINE",
"204 272 LINE",
"339 469 LINE",
"170 469 LINE",
"31 272 LINE",
"31 272 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */\0123 1 1 0 1 74 0 0 1 1 0 85 0 0 0 1 93 0 1 0 1 77 18 17 2 10 22 \012CALL[ ]	/* CallFunction */";
};
width = 360;
}
);
leftKerningGroup = periodcentered;
note = guilsinglleft;
rightKerningGroup = guillemetleft;
unicode = 2039;
},
{
glyphname = guilsinglright;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"189 74 LINE",
"329 272 LINE",
"189 469 LINE",
"20 469 LINE",
"155 272 LINE",
"20 74 LINE",
"20 74 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */\0124 1 2 1 0 1 74 0 0 1 1 0 85 0 0 0 1 93 2 1 1 0 1 77 0 0 0 5 0 5 18 3 10 21 \012CALL[ ]	/* CallFunction */";
};
width = 360;
}
);
leftKerningGroup = guillemetright;
note = guilsinglright;
rightKerningGroup = periodcentered;
unicode = 203A;
},
{
glyphname = quotedbl;
layers = (
{
components = (
{
name = quotesingle;
},
{
name = quotesingle;
transform = "{1, 0, 0, 1, 220, 0}";
}
);
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
width = 462;
}
);
leftKerningGroup = quotedbl;
note = quotedbl;
rightKerningGroup = quotedbl;
unicode = 0022;
},
{
glyphname = quotesingle;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"53 408 LINE",
"188 408 LINE",
"201 700 LINE",
"41 700 LINE",
"41 700 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */\0120 1 1 0 93 0 0 0 66 1 76 17 16 2 10 22 \012CALL[ ]	/* CallFunction */";
};
width = 242;
}
);
leftKerningGroup = quotedbl;
note = quotesingle;
rightKerningGroup = quotedbl;
unicode = 0027;
},
{
glyphname = figurespace;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
width = 700;
}
);
note = uni2007;
unicode = 2007;
},
{
glyphname = hairspace;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
width = 100;
}
);
note = uni200A;
unicode = 200A;
},
{
glyphname = punctuationspace;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
width = 283;
}
);
note = uni2008;
unicode = 2008;
},
{
glyphname = space;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
width = 291;
}
);
note = space;
unicode = 0020;
},
{
glyphname = nbspace;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
width = 291;
}
);
note = uni00A0;
unicode = 00A0;
},
{
glyphname = thinspace;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
width = 146;
}
);
note = uni2009;
unicode = 2009;
},
{
glyphname = zerowidthspace;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
width = 0;
}
);
note = uni200B;
unicode = 200B;
},
{
glyphname = CR;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
width = 291;
}
);
note = CR;
},
{
glyphname = .notdef;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"40 0 LINE",
"547 0 LINE",
"547 700 LINE",
"40 700 LINE",
"40 700 LINE"
);
},
{
closed = 1;
nodes = (
"120 70 LINE",
"120 630 LINE",
"467 630 LINE",
"467 70 LINE",
"467 70 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */\0120 0 0 2 3 0 2 101 4 1 3 1 1 3 85 4 1 3 3 1 93 0 1 3 1 77 4 4 4 7 4 7 18 17 16 5 13 23 \012CALL[ ]	/* CallFunction */";
};
width = 587;
}
);
note = .notdef;
},
{
glyphname = dollar;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"626 285 OFFCURVE",
"549 370 OFFCURVE",
"444 409 OFFCURVE",
"364 426 QCURVE SMOOTH",
"293 441 OFFCURVE",
"229 469 OFFCURVE",
"229 497 QCURVE SMOOTH",
"229 525 OFFCURVE",
"283 560 OFFCURVE",
"342 560 QCURVE SMOOTH",
"436 560 OFFCURVE",
"536 506 QCURVE",
"597 653 LINE",
"556 677 OFFCURVE",
"451 707 OFFCURVE",
"394 712 QCURVE",
"394 820 LINE",
"274 820 LINE",
"274 710 LINE",
"157 696 OFFCURVE",
"33 573 OFFCURVE",
"33 487 QCURVE SMOOTH",
"33 414 OFFCURVE",
"109 328 OFFCURVE",
"215 289 OFFCURVE",
"294 272 QCURVE SMOOTH",
"366 256 OFFCURVE",
"431 227 OFFCURVE",
"431 197 QCURVE SMOOTH",
"431 140 OFFCURVE",
"317 140 QCURVE SMOOTH",
"257 140 OFFCURVE",
"133 178 OFFCURVE",
"86 209 QCURVE",
"21 63 LINE",
"65 33 OFFCURVE",
"199 -8 OFFCURVE",
"274 -13 QCURVE",
"274 -120 LINE",
"394 -120 LINE",
"394 -9 LINE",
"507 8 OFFCURVE",
"626 129 OFFCURVE",
"626 212 QCURVE",
"626 212 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 18 values pushed */\01230 27 24 3 4 3 31 9 2 2 4 8 2 2 1 2 3 74 \012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01212 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 25 values pushed */\0120 0 1 1 0 111 0 3 0 4 2 3 4 103 0 2 2 1 95 0 1 1 76 1 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 24 values pushed */\0120 0 1 0 132 0 3 0 4 2 3 4 103 0 2 2 1 95 0 1 1 73 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 24 values pushed */\0120 0 1 0 132 0 3 0 4 2 3 4 103 0 2 2 1 95 0 1 1 76 1 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01238 28 37 17 19 5 10 25 \012CALL[ ]	/* CallFunction */";
};
width = 647;
}
);
leftKerningGroup = S;
note = dollar;
rightKerningGroup = S;
unicode = 0024;
},
{
glyphname = yen;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"773 700 LINE",
"578 700 LINE",
"384 414 LINE",
"191 700 LINE",
"-20 700 LINE",
"240 311 LINE",
"103 311 LINE",
"103 214 LINE",
"277 214 LINE",
"277 173 LINE",
"103 173 LINE",
"103 76 LINE",
"277 76 LINE",
"277 0 LINE",
"475 0 LINE",
"475 76 LINE",
"649 76 LINE",
"649 173 LINE",
"475 173 LINE",
"475 214 LINE",
"649 214 LINE",
"649 311 LINE",
"514 311 LINE",
"514 311 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */\01220 1 0 9 1 74 8 1 0 7 1 1 2 0 1 102 6 1 2 5 1 3 4 2 3 101 10 1 9 9 66 75 0 4 4 67 4 76 22 21 19 18 17 17 17 17 17 17 17 17 16 11 10 29 \012CALL[ ]	/* CallFunction */";
};
width = 753;
}
);
leftKerningGroup = yen;
note = yen;
rightKerningGroup = yen;
unicode = 00A5;
},
{
glyphname = divisionslash;
layers = (
{
components = (
{
name = slash;
}
);
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
width = 415;
}
);
leftKerningGroup = slash;
note = uni2215;
rightKerningGroup = slash;
unicode = 2215;
},
{
glyphname = plus;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"551 423 LINE",
"382 423 LINE",
"382 588 LINE",
"228 588 LINE",
"228 423 LINE",
"58 423 LINE",
"58 277 LINE",
"228 277 LINE",
"228 112 LINE",
"382 112 LINE",
"382 277 LINE",
"551 277 LINE",
"551 277 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 35 values pushed */\0120 4 3 1 4 85 5 1 3 2 1 0 1 3 0 101 0 4 4 1 93 0 1 4 1 77 17 17 17 17 17 16 6 10 26 \012CALL[ ]	/* CallFunction */";
};
width = 609;
}
);
leftKerningGroup = periodcentered;
note = plus;
rightKerningGroup = periodcentered;
unicode = 002B;
},
{
glyphname = minus;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"58 277 LINE",
"551 277 LINE",
"551 423 LINE",
"58 423 LINE",
"58 423 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 21 values pushed */\0120 0 1 1 0 85 0 0 0 1 93 0 1 0 1 77 17 16 2 13 22 \012CALL[ ]	/* CallFunction */";
};
width = 609;
}
);
leftKerningGroup = periodcentered;
note = minus;
rightKerningGroup = periodcentered;
unicode = 2212;
},
{
glyphname = multiply;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"530 473 LINE",
"428 576 LINE",
"305 453 LINE",
"182 576 LINE",
"80 473 LINE",
"203 350 LINE",
"80 227 LINE",
"182 124 LINE",
"305 247 LINE",
"428 124 LINE",
"530 227 LINE",
"407 350 LINE",
"407 350 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0128 2 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 609;
}
);
note = multiply;
unicode = 00D7;
},
{
glyphname = divide;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"346 469 OFFCURVE",
"402 523 OFFCURVE",
"402 565 QCURVE SMOOTH",
"402 607 OFFCURVE",
"346 660 OFFCURVE",
"305 660 QCURVE SMOOTH",
"263 660 OFFCURVE",
"208 607 OFFCURVE",
"208 565 QCURVE SMOOTH",
"208 523 OFFCURVE",
"263 469 OFFCURVE",
"305 469 QCURVE",
"305 469 LINE"
);
},
{
closed = 1;
nodes = (
"58 277 LINE",
"551 277 LINE",
"551 423 LINE",
"58 423 LINE",
"58 423 LINE"
);
},
{
closed = 1;
nodes = (
"346 40 OFFCURVE",
"402 95 OFFCURVE",
"402 137 QCURVE SMOOTH",
"402 178 OFFCURVE",
"346 231 OFFCURVE",
"305 231 QCURVE SMOOTH",
"263 231 OFFCURVE",
"208 179 OFFCURVE",
"208 137 QCURVE SMOOTH",
"208 95 OFFCURVE",
"263 40 OFFCURVE",
"305 40 QCURVE",
"305 40 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */\0120 0 6 1 1 2 0 1 103 0 2 0 3 4 2 3 101 0 4 5 5 4 87 0 4 4 5 95 7 1 5 4 5 79 16 16 0 0 16 27 16 26 22 20 15 14 13 12 0 11 0 10 36 8 10 21 \012CALL[ ]	/* CallFunction */";
};
width = 609;
}
);
leftKerningGroup = periodcentered;
note = divide;
rightKerningGroup = periodcentered;
unicode = 00F7;
},
{
glyphname = equal;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"58 404 LINE",
"551 404 LINE",
"551 549 LINE",
"58 549 LINE",
"58 549 LINE"
);
},
{
closed = 1;
nodes = (
"58 151 LINE",
"551 151 LINE",
"551 296 LINE",
"58 296 LINE",
"58 296 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 25 values pushed */\0120 2 0 3 2 3 97 0 1 1 0 93 0 0 0 69 1 76 17 17 17 16 4 10 24 \012CALL[ ]	/* CallFunction */";
};
width = 609;
}
);
note = equal;
unicode = 003D;
},
{
glyphname = notequal;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"551 404 LINE",
"551 549 LINE",
"483 549 LINE",
"538 655 LINE",
"386 655 LINE",
"331 549 LINE",
"58 549 LINE",
"58 404 LINE",
"256 404 LINE",
"201 296 LINE",
"58 296 LINE",
"58 151 LINE",
"126 151 LINE",
"71 45 LINE",
"224 45 LINE",
"279 151 LINE",
"551 151 LINE",
"551 296 LINE",
"353 296 LINE",
"409 404 LINE",
"409 404 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01212 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 42 values pushed */\0120 7 6 6 7 110 0 2 1 1 2 111 8 1 6 10 9 2 5 0 6 5 102 4 1 0 1 1 0 85 4 1 0 0 1 93 3 1 1 0 1 77 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 40 values pushed */\0120 7 6 7 131 0 2 1 2 132 8 1 6 10 9 2 5 0 6 5 102 4 1 0 1 1 0 85 4 1 0 0 1 93 3 1 1 0 1 77 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 18 values pushed */\0120 0 0 19 0 19 17 17 17 17 17 17 17 17 17 11 13 29 \012CALL[ ]	/* CallFunction */";
};
width = 609;
}
);
note = notequal;
unicode = 2260;
},
{
glyphname = greater;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"58 609 LINE",
"58 463 LINE",
"377 350 LINE",
"58 237 LINE",
"58 91 LINE",
"551 273 LINE",
"551 427 LINE",
"551 427 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0126 2 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 609;
}
);
note = greater;
unicode = 003E;
},
{
glyphname = less;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"551 609 LINE",
"58 427 LINE",
"58 273 LINE",
"551 91 LINE",
"551 237 LINE",
"232 350 LINE",
"551 463 LINE",
"551 463 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */\0126 3 1 48 \012CALL[ ]	/* CallFunction */";
};
width = 609;
}
);
note = less;
unicode = 003C;
},
{
glyphname = greaterequal;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"58 677 LINE",
"58 533 LINE",
"348 434 LINE",
"58 335 LINE",
"58 191 LINE",
"551 359 LINE",
"551 509 LINE",
"551 509 LINE"
);
},
{
closed = 1;
nodes = (
"58 0 LINE",
"551 0 LINE",
"551 145 LINE",
"58 145 LINE",
"58 145 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */\0126 5 4 3 2 1 0 7 0 72 0 0 1 1 0 85 0 0 0 1 93 0 1 0 1 77 17 23 2 13 22 \012CALL[ ]	/* CallFunction */";
};
width = 609;
}
);
note = greaterequal;
unicode = 2265;
},
{
glyphname = lessequal;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"551 677 LINE",
"58 509 LINE",
"58 359 LINE",
"551 191 LINE",
"551 335 LINE",
"261 434 LINE",
"551 533 LINE",
"551 533 LINE"
);
},
{
closed = 1;
nodes = (
"58 0 LINE",
"551 0 LINE",
"551 145 LINE",
"58 145 LINE",
"58 145 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */\0126 5 4 3 2 1 0 7 0 72 0 0 1 1 0 85 0 0 0 1 93 0 1 0 1 77 17 23 2 13 22 \012CALL[ ]	/* CallFunction */";
};
width = 609;
}
);
note = lessequal;
unicode = 2264;
},
{
glyphname = plusminus;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"382 518 LINE",
"382 676 LINE",
"228 676 LINE",
"228 518 LINE",
"58 518 LINE",
"58 379 LINE",
"228 379 LINE",
"228 221 LINE",
"382 221 LINE",
"382 379 LINE",
"551 379 LINE",
"551 518 LINE",
"551 518 LINE"
);
},
{
closed = 1;
nodes = (
"58 0 LINE",
"551 0 LINE",
"551 145 LINE",
"58 145 LINE",
"58 145 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 34 values pushed */\0122 1 0 0 3 93 8 5 2 3 3 69 75 0 1 1 4 93 0 4 4 66 75 0 6 6 7 93 0 7 7 67 7 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 30 values pushed */\0128 5 2 3 2 1 0 1 3 0 101 0 4 0 1 6 4 1 101 0 6 6 7 93 0 7 7 67 7 76 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 34 values pushed */\0122 1 0 0 3 93 8 5 2 3 3 69 75 0 1 1 4 93 0 4 4 66 75 0 6 6 7 93 0 7 7 67 7 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 30 values pushed */\0128 5 2 3 2 1 0 1 3 0 101 0 4 0 1 6 4 1 101 0 6 6 7 93 0 7 7 67 7 76 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 18 values pushed */\0120 0 15 14 13 12 0 11 0 11 17 17 17 17 17 9 10 25 \012CALL[ ]	/* CallFunction */";
};
width = 609;
}
);
note = plusminus;
unicode = 00B1;
},
{
glyphname = approxequal;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"475 368 OFFCURVE",
"563 476 OFFCURVE",
"564 574 QCURVE",
"447 574 LINE",
"445 541 OFFCURVE",
"416 503 OFFCURVE",
"391 503 QCURVE SMOOTH",
"377 503 OFFCURVE",
"350 518 OFFCURVE",
"328 534 QCURVE SMOOTH",
"294 558 OFFCURVE",
"241 584 OFFCURVE",
"205 584 QCURVE SMOOTH",
"134 584 OFFCURVE",
"46 476 OFFCURVE",
"45 379 QCURVE",
"162 379 LINE",
"163 412 OFFCURVE",
"194 449 OFFCURVE",
"219 449 QCURVE SMOOTH",
"233 449 OFFCURVE",
"260 434 OFFCURVE",
"282 418 QCURVE SMOOTH",
"316 394 OFFCURVE",
"369 368 OFFCURVE",
"404 368 QCURVE",
"404 368 LINE"
);
},
{
closed = 1;
nodes = (
"475 115 OFFCURVE",
"563 224 OFFCURVE",
"564 321 QCURVE",
"447 321 LINE",
"446 288 OFFCURVE",
"416 251 OFFCURVE",
"391 251 QCURVE SMOOTH",
"377 251 OFFCURVE",
"350 266 OFFCURVE",
"328 282 QCURVE SMOOTH",
"294 306 OFFCURVE",
"241 332 OFFCURVE",
"205 332 QCURVE SMOOTH",
"134 332 OFFCURVE",
"46 223 OFFCURVE",
"45 126 QCURVE",
"162 126 LINE",
"163 159 OFFCURVE",
"194 197 OFFCURVE",
"219 197 QCURVE SMOOTH",
"233 197 OFFCURVE",
"257 184 OFFCURVE",
"282 166 QCURVE SMOOTH",
"315 142 OFFCURVE",
"369 115 OFFCURVE",
"404 115 QCURVE",
"404 115 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01218 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 70 values pushed */\0120 4 2 3 3 4 112 0 1 0 5 0 1 112 0 10 8 9 9 10 112 0 7 6 11 6 7 112 0 2 0 0 1 2 0 103 0 3 12 1 5 8 3 5 104 0 9 6 11 9 87 0 8 0 6 7 8 6 103 0 9 9 11 96 13 1 11 9 11 80 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 74 values pushed */\0120 4 2 3 2 4 3 126 0 1 0 5 0 1 5 126 0 10 8 9 8 10 9 126 0 7 6 11 6 7 11 126 0 2 0 0 1 2 0 103 0 3 12 1 5 8 3 5 104 0 9 6 11 9 87 0 8 0 6 7 8 6 103 0 9 9 11 96 13 1 11 9 11 80 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 30 values pushed */\01226 26 0 0 26 51 26 50 48 47 45 43 39 37 35 34 32 30 0 25 0 24 18 36 34 18 36 14 13 25 \012CALL[ ]	/* CallFunction */";
};
width = 609;
}
);
note = approxequal;
unicode = 2248;
},
{
glyphname = asciitilde;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"475 243 OFFCURVE",
"563 351 OFFCURVE",
"564 449 QCURVE",
"447 449 LINE",
"445 416 OFFCURVE",
"416 378 OFFCURVE",
"391 378 QCURVE SMOOTH",
"377 378 OFFCURVE",
"350 393 OFFCURVE",
"328 409 QCURVE SMOOTH",
"294 433 OFFCURVE",
"241 459 OFFCURVE",
"205 459 QCURVE SMOOTH",
"134 459 OFFCURVE",
"46 351 OFFCURVE",
"45 254 QCURVE",
"162 254 LINE",
"163 287 OFFCURVE",
"194 324 OFFCURVE",
"219 324 QCURVE SMOOTH",
"233 324 OFFCURVE",
"260 309 OFFCURVE",
"282 293 QCURVE SMOOTH",
"316 269 OFFCURVE",
"369 243 OFFCURVE",
"404 243 QCURVE",
"404 243 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01221 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 27 values pushed */\0120 3 0 1 3 87 4 1 2 0 0 1 2 0 103 0 3 3 1 96 6 5 2 1 3 1 80 \012ELSE[ ]	/* Else */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01225 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 34 values pushed */\0120 1 0 5 0 1 5 126 0 3 0 5 3 87 4 1 2 0 0 1 2 0 103 0 3 3 5 96 6 1 5 3 5 80 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 41 values pushed */\0120 4 2 3 2 4 3 126 0 1 0 5 0 1 5 126 0 3 0 5 3 87 0 2 0 0 1 2 0 103 0 3 3 5 96 6 1 5 3 5 80 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 14 values pushed */\0120 0 0 25 0 24 18 36 34 18 36 7 10 25 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 609;
}
);
leftKerningGroup = periodcentered;
note = asciitilde;
rightKerningGroup = periodcentered;
unicode = 007E;
},
{
glyphname = infinity;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"612 570 OFFCURVE",
"509 512 OFFCURVE",
"468 461 QCURVE",
"429 512 OFFCURVE",
"326 570 OFFCURVE",
"251 570 QCURVE SMOOTH",
"188 570 OFFCURVE",
"85 513 OFFCURVE",
"27 413 OFFCURVE",
"27 350 QCURVE SMOOTH",
"27 288 OFFCURVE",
"85 187 OFFCURVE",
"188 130 OFFCURVE",
"251 130 QCURVE SMOOTH",
"326 130 OFFCURVE",
"429 188 OFFCURVE",
"468 239 QCURVE",
"509 188 OFFCURVE",
"612 130 OFFCURVE",
"687 130 QCURVE SMOOTH",
"749 130 OFFCURVE",
"850 187 OFFCURVE",
"908 288 OFFCURVE",
"908 350 QCURVE SMOOTH",
"908 412 OFFCURVE",
"850 513 OFFCURVE",
"749 570 OFFCURVE",
"687 570 QCURVE",
"687 570 LINE"
);
},
{
closed = 1;
nodes = (
"227 262 OFFCURVE",
"177 312 OFFCURVE",
"177 350 QCURVE SMOOTH",
"177 388 OFFCURVE",
"227 438 OFFCURVE",
"264 438 QCURVE SMOOTH",
"304 438 OFFCURVE",
"362 393 OFFCURVE",
"392 350 QCURVE",
"362 307 OFFCURVE",
"304 262 OFFCURVE",
"264 262 QCURVE",
"264 262 LINE"
);
},
{
closed = 1;
nodes = (
"631 262 OFFCURVE",
"572 307 OFFCURVE",
"544 350 QCURVE",
"572 393 OFFCURVE",
"631 438 OFFCURVE",
"671 438 QCURVE SMOOTH",
"708 438 OFFCURVE",
"757 388 OFFCURVE",
"757 350 QCURVE SMOOTH",
"757 312 OFFCURVE",
"708 262 OFFCURVE",
"671 262 QCURVE",
"671 262 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 77 values pushed */\01224 1 4 2 48 30 2 5 4 10 1 0 5 3 74 8 3 2 2 6 1 4 5 2 4 103 10 7 9 3 5 0 0 5 87 10 7 9 3 5 5 0 95 1 1 0 5 0 79 40 40 28 28 0 0 40 51 40 50 46 44 28 39 28 38 34 32 0 27 0 26 38 36 38 11 13 23 \012CALL[ ]	/* CallFunction */";
};
width = 935;
}
);
note = infinity;
unicode = 221E;
},
{
glyphname = percent;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"281 321 OFFCURVE",
"381 425 OFFCURVE",
"381 515 QCURVE SMOOTH",
"381 604 OFFCURVE",
"281 709 OFFCURVE",
"201 709 QCURVE SMOOTH",
"149 709 OFFCURVE",
"68 662 OFFCURVE",
"22 574 OFFCURVE",
"22 515 QCURVE SMOOTH",
"22 425 OFFCURVE",
"122 321 OFFCURVE",
"201 321 QCURVE",
"201 321 LINE"
);
},
{
closed = 1;
nodes = (
"137 0 LINE",
"281 0 LINE",
"759 700 LINE",
"615 700 LINE",
"615 700 LINE"
);
},
{
closed = 1;
nodes = (
"175 416 OFFCURVE",
"142 465 OFFCURVE",
"142 515 QCURVE SMOOTH",
"142 565 OFFCURVE",
"175 614 OFFCURVE",
"201 614 QCURVE SMOOTH",
"228 614 OFFCURVE",
"260 566 OFFCURVE",
"260 515 QCURVE SMOOTH",
"260 464 OFFCURVE",
"228 416 OFFCURVE",
"201 416 QCURVE",
"201 416 LINE"
);
},
{
closed = 1;
nodes = (
"775 -9 OFFCURVE",
"875 95 OFFCURVE",
"875 185 QCURVE SMOOTH",
"875 274 OFFCURVE",
"775 379 OFFCURVE",
"695 379 QCURVE SMOOTH",
"616 379 OFFCURVE",
"516 274 OFFCURVE",
"516 185 QCURVE SMOOTH",
"516 95 OFFCURVE",
"615 -9 OFFCURVE",
"695 -9 QCURVE",
"695 -9 LINE"
);
},
{
closed = 1;
nodes = (
"668 86 OFFCURVE",
"636 134 OFFCURVE",
"636 185 QCURVE SMOOTH",
"636 236 OFFCURVE",
"668 284 OFFCURVE",
"695 284 QCURVE SMOOTH",
"722 284 OFFCURVE",
"754 236 OFFCURVE",
"754 185 QCURVE SMOOTH",
"754 134 OFFCURVE",
"722 86 OFFCURVE",
"695 86 QCURVE",
"695 86 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01227 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 43 values pushed */\01211 1 5 10 1 1 8 5 1 103 0 6 0 8 9 6 8 104 0 4 4 0 95 2 1 0 0 72 75 13 1 9 9 3 95 12 7 2 3 3 67 3 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 51 values pushed */\01211 1 5 10 1 1 8 5 1 103 0 6 0 8 9 6 8 104 0 2 2 66 75 0 4 4 0 95 0 0 0 72 75 0 3 3 67 75 13 1 9 9 7 95 12 1 7 7 76 7 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 38 values pushed */\01241 41 29 29 17 17 0 0 41 52 41 51 47 45 29 40 29 39 35 33 17 28 17 27 23 21 16 15 14 13 0 12 0 11 37 14 10 21 \012CALL[ ]	/* CallFunction */";
};
width = 897;
}
);
leftKerningGroup = percent;
note = percent;
rightKerningGroup = percent;
unicode = 0025;
},
{
glyphname = at;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"379 712 OFFCURVE",
"156 592 OFFCURVE",
"34 383 OFFCURVE",
"34 253 QCURVE SMOOTH",
"34 122 OFFCURVE",
"155 -88 OFFCURVE",
"376 -208 OFFCURVE",
"521 -208 QCURVE SMOOTH",
"585 -208 OFFCURVE",
"712 -182 OFFCURVE",
"757 -160 QCURVE",
"720 -53 LINE",
"628 -97 OFFCURVE",
"521 -97 QCURVE SMOOTH",
"416 -97 OFFCURVE",
"255 -8 OFFCURVE",
"167 152 OFFCURVE",
"167 253 QCURVE SMOOTH",
"167 352 OFFCURVE",
"257 511 OFFCURVE",
"420 601 OFFCURVE",
"525 601 QCURVE SMOOTH",
"631 601 OFFCURVE",
"793 518 OFFCURVE",
"882 370 OFFCURVE",
"882 275 QCURVE SMOOTH",
"882 120 OFFCURVE",
"819 120 QCURVE SMOOTH",
"799 120 OFFCURVE",
"775 148 OFFCURVE",
"775 180 QCURVE SMOOTH",
"775 485 LINE",
"612 485 LINE",
"612 436 LINE",
"561 493 OFFCURVE",
"473 493 QCURVE SMOOTH",
"413 493 OFFCURVE",
"311 431 OFFCURVE",
"251 317 OFFCURVE",
"251 243 QCURVE SMOOTH",
"251 169 OFFCURVE",
"312 55 OFFCURVE",
"414 -8 OFFCURVE",
"473 -8 QCURVE SMOOTH",
"586 -8 OFFCURVE",
"635 79 QCURVE",
"653 36 OFFCURVE",
"729 -8 OFFCURVE",
"782 -8 QCURVE SMOOTH",
"846 -8 OFFCURVE",
"945 59 OFFCURVE",
"1002 188 OFFCURVE",
"1002 278 QCURVE SMOOTH",
"1002 400 OFFCURVE",
"881 598 OFFCURVE",
"664 712 OFFCURVE",
"525 712 QCURVE",
"525 712 LINE"
);
},
{
closed = 1;
nodes = (
"472 128 OFFCURVE",
"418 189 OFFCURVE",
"418 243 QCURVE SMOOTH",
"418 297 OFFCURVE",
"472 357 OFFCURVE",
"516 357 QCURVE SMOOTH",
"560 357 OFFCURVE",
"615 297 OFFCURVE",
"615 243 QCURVE SMOOTH",
"615 188 OFFCURVE",
"560 128 OFFCURVE",
"516 128 QCURVE",
"516 128 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 18 values pushed */\01222 1 9 2 10 1 0 4 44 1 6 0 45 1 7 6 4 74 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 18 values pushed */\01222 1 9 3 10 1 0 4 44 1 6 0 45 1 7 6 4 74 \012EIF[ ]	/* EndIf */\012MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01230 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 44 values pushed */\0123 1 2 0 9 4 2 9 103 0 5 5 8 95 11 1 8 8 72 75 12 10 2 4 4 0 96 1 1 0 0 76 75 0 6 6 7 95 0 7 7 77 7 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 61 values pushed */\0120 3 2 9 2 3 9 126 0 2 0 9 10 2 9 103 0 5 5 8 95 11 1 8 8 72 75 12 1 10 10 0 95 1 1 0 0 76 75 0 4 4 0 96 1 1 0 0 76 75 0 6 6 7 95 0 7 7 77 7 76 \012EIF[ ]	/* EndIf */\012NPUSHB[ ]	/* 25 values pushed */\01257 57 0 0 57 68 57 67 63 61 0 56 0 55 36 38 36 35 18 38 35 38 13 10 28 \012CALL[ ]	/* CallFunction */";
};
width = 1036;
}
);
leftKerningGroup = C;
note = at;
rightKerningGroup = D;
unicode = 0040;
},
{
glyphname = ampersand;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"726 105 LINE",
"652 171 LINE",
"697 240 OFFCURVE",
"717 330 QCURVE",
"564 376 LINE",
"553 320 OFFCURVE",
"533 276 QCURVE",
"431 367 LINE",
"498 404 OFFCURVE",
"561 488 OFFCURVE",
"561 542 QCURVE SMOOTH",
"561 619 OFFCURVE",
"442 710 OFFCURVE",
"345 710 QCURVE SMOOTH",
"275 710 OFFCURVE",
"168 665 OFFCURVE",
"110 583 OFFCURVE",
"110 530 QCURVE SMOOTH",
"110 457 OFFCURVE",
"177 389 QCURVE",
"101 348 OFFCURVE",
"31 249 OFFCURVE",
"31 183 QCURVE SMOOTH",
"31 127 OFFCURVE",
"103 37 OFFCURVE",
"231 -14 OFFCURVE",
"310 -14 QCURVE SMOOTH",
"376 -14 OFFCURVE",
"496 23 OFFCURVE",
"545 58 QCURVE",
"624 -12 LINE",
"624 -12 LINE"
);
},
{
closed = 1;
nodes = (
"372 585 OFFCURVE",
"401 560 OFFCURVE",
"401 538 QCURVE SMOOTH",
"401 518 OFFCURVE",
"368 481 OFFCURVE",
"328 460 QCURVE",
"302 485 OFFCURVE",
"283 516 OFFCURVE",
"283 533 QCURVE SMOOTH",
"283 556 OFFCURVE",
"316 585 OFFCURVE",
"345 585 QCURVE",
"345 585 LINE"
);
},
{
closed = 1;
nodes = (
"275 131 OFFCURVE",
"217 172 OFFCURVE",
"217 204 QCURVE SMOOTH",
"217 231 OFFCURVE",
"247 274 OFFCURVE",
"280 294 QCURVE",
"431 160 LINE",
"382 131 OFFCURVE",
"324 131 QCURVE",
"324 131 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 59 values pushed */\01245 44 36 29 27 26 24 23 11 9 3 2 30 1 2 0 3 2 74 4 1 2 2 1 95 0 1 1 72 75 5 1 3 3 0 95 0 0 0 73 0 76 43 43 31 31 43 51 43 50 31 42 31 41 43 35 6 10 22 \012CALL[ ]	/* CallFunction */";
};
width = 752;
}
);
leftKerningGroup = ampersand;
note = ampersand;
rightKerningGroup = ampersand;
unicode = 0026;
},
{
glyphname = paragraph;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"228 -100 LINE",
"382 -100 LINE",
"382 609 LINE",
"483 609 LINE",
"483 -100 LINE",
"637 -100 LINE",
"637 742 LINE",
"261 742 LINE SMOOTH",
"186 742 OFFCURVE",
"73 694 OFFCURVE",
"11 604 OFFCURVE",
"11 544 QCURVE SMOOTH",
"11 486 OFFCURVE",
"68 398 OFFCURVE",
"167 349 OFFCURVE",
"228 347 QCURVE",
"228 347 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01212 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 24 values pushed */\0120 0 3 2 3 0 2 126 4 1 2 2 130 0 3 3 1 93 0 1 1 68 3 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 29 values pushed */\0120 0 3 2 3 0 2 126 4 1 2 2 130 0 1 3 3 1 85 0 1 1 3 93 0 3 1 3 77 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 8 values pushed */\01217 17 17 38 16 5 10 25 \012CALL[ ]	/* CallFunction */";
};
width = 707;
}
);
leftKerningGroup = paragraph;
note = paragraph;
rightKerningGroup = H;
unicode = 00B6;
},
{
glyphname = section;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"509 364 OFFCURVE",
"449 435 OFFCURVE",
"368 466 OFFCURVE",
"307 479 QCURVE SMOOTH",
"257 489 OFFCURVE",
"211 509 OFFCURVE",
"211 529 QCURVE SMOOTH",
"211 576 OFFCURVE",
"300 576 QCURVE SMOOTH",
"392 576 OFFCURVE",
"465 534 QCURVE",
"518 663 LINE",
"482 685 OFFCURVE",
"360 709 OFFCURVE",
"310 709 QCURVE SMOOTH",
"180 709 OFFCURVE",
"44 606 OFFCURVE",
"44 522 QCURVE SMOOTH",
"44 456 OFFCURVE",
"83 419 QCURVE",
"24 371 OFFCURVE",
"24 290 QCURVE SMOOTH",
"24 233 OFFCURVE",
"81 167 OFFCURVE",
"158 140 OFFCURVE",
"219 127 QCURVE SMOOTH",
"273 117 OFFCURVE",
"323 95 OFFCURVE",
"323 71 QCURVE SMOOTH",
"323 49 OFFCURVE",
"286 24 OFFCURVE",
"250 24 QCURVE SMOOTH",
"208 24 OFFCURVE",
"108 53 OFFCURVE",
"72 77 QCURVE",
"19 -52 LINE",
"57 -77 OFFCURVE",
"186 -109 OFFCURVE",
"250 -109 QCURVE SMOOTH",
"326 -109 OFFCURVE",
"434 -61 OFFCURVE",
"490 23 OFFCURVE",
"490 77 QCURVE SMOOTH",
"490 142 OFFCURVE",
"450 182 QCURVE",
"479 206 OFFCURVE",
"509 268 OFFCURVE",
"509 303 QCURVE",
"509 303 LINE"
);
},
{
closed = 1;
nodes = (
"188 338 OFFCURVE",
"224 359 QCURVE",
"273 348 OFFCURVE",
"314 337 OFFCURVE",
"345 315 OFFCURVE",
"345 297 QCURVE SMOOTH",
"345 280 OFFCURVE",
"326 251 OFFCURVE",
"309 242 QCURVE",
"260 253 OFFCURVE",
"219 264 OFFCURVE",
"188 286 OFFCURVE",
"188 304 QCURVE",
"188 304 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */\01235 1 3 2 58 51 36 27 12 2 6 1 3 11 1 0 1 3 74 0 1 0 0 1 0 99 0 3 3 2 95 0 2 2 72 3 76 36 47 37 39 4 10 24 \012CALL[ ]	/* CallFunction */";
};
width = 535;
}
);
leftKerningGroup = section;
note = section;
rightKerningGroup = section;
unicode = 00A7;
},
{
glyphname = copyright;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"484 -3 OFFCURVE",
"646 91 OFFCURVE",
"740 254 OFFCURVE",
"740 352 QCURVE SMOOTH",
"740 450 OFFCURVE",
"648 611 OFFCURVE",
"487 703 OFFCURVE",
"388 703 QCURVE SMOOTH",
"289 703 OFFCURVE",
"127 609 OFFCURVE",
"34 447 OFFCURVE",
"34 350 QCURVE SMOOTH",
"34 253 OFFCURVE",
"127 91 OFFCURVE",
"288 -3 OFFCURVE",
"386 -3 QCURVE",
"386 -3 LINE"
);
},
{
closed = 1;
nodes = (
"309 73 OFFCURVE",
"185 146 OFFCURVE",
"115 273 OFFCURVE",
"115 350 QCURVE SMOOTH",
"115 427 OFFCURVE",
"185 554 OFFCURVE",
"310 627 OFFCURVE",
"388 627 QCURVE SMOOTH",
"466 627 OFFCURVE",
"590 555 OFFCURVE",
"659 430 OFFCURVE",
"659 352 QCURVE SMOOTH",
"659 274 OFFCURVE",
"588 147 OFFCURVE",
"463 73 OFFCURVE",
"386 73 QCURVE",
"386 73 LINE"
);
},
{
closed = 1;
nodes = (
"464 150 OFFCURVE",
"556 206 OFFCURVE",
"576 254 QCURVE",
"468 313 LINE",
"445 269 OFFCURVE",
"400 269 QCURVE SMOOTH",
"369 269 OFFCURVE",
"326 312 OFFCURVE",
"326 350 QCURVE SMOOTH",
"326 388 OFFCURVE",
"369 431 OFFCURVE",
"400 431 QCURVE SMOOTH",
"445 431 OFFCURVE",
"468 387 QCURVE",
"576 446 LINE",
"556 494 OFFCURVE",
"464 550 OFFCURVE",
"401 550 QCURVE SMOOTH",
"339 550 OFFCURVE",
"241 499 OFFCURVE",
"186 408 OFFCURVE",
"186 350 QCURVE SMOOTH",
"186 292 OFFCURVE",
"241 201 OFFCURVE",
"339 150 OFFCURVE",
"401 150 QCURVE",
"401 150 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 89 values pushed */\01242 1 5 4 53 43 2 6 5 54 1 7 6 3 74 0 0 0 2 4 0 2 103 0 4 0 5 6 4 5 103 0 6 10 1 7 3 6 7 103 9 1 3 1 1 3 87 9 1 3 3 1 95 8 1 1 3 1 79 32 32 16 16 0 0 32 57 32 56 52 50 46 44 40 38 16 31 16 30 24 22 0 15 0 14 38 11 10 21 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 775;
}
);
leftKerningGroup = C;
note = copyright;
rightKerningGroup = D;
unicode = 00A9;
},
{
glyphname = registered;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"289 703 OFFCURVE",
"127 609 OFFCURVE",
"34 447 OFFCURVE",
"34 350 QCURVE SMOOTH",
"34 253 OFFCURVE",
"127 91 OFFCURVE",
"288 -3 OFFCURVE",
"386 -3 QCURVE SMOOTH",
"484 -3 OFFCURVE",
"646 91 OFFCURVE",
"740 254 OFFCURVE",
"740 352 QCURVE SMOOTH",
"740 450 OFFCURVE",
"648 611 OFFCURVE",
"487 703 OFFCURVE",
"388 703 QCURVE",
"388 703 LINE"
);
},
{
closed = 1;
nodes = (
"508 285 LINE",
"574 320 OFFCURVE",
"574 402 QCURVE SMOOTH",
"574 466 OFFCURVE",
"482 541 OFFCURVE",
"402 541 QCURVE SMOOTH",
"228 541 LINE",
"228 159 LINE",
"351 159 LINE",
"351 263 LINE",
"398 263 LINE",
"465 159 LINE",
"586 159 LINE",
"549 118 OFFCURVE",
"446 73 OFFCURVE",
"386 73 QCURVE SMOOTH",
"309 73 OFFCURVE",
"185 146 OFFCURVE",
"115 273 OFFCURVE",
"115 350 QCURVE SMOOTH",
"115 427 OFFCURVE",
"185 554 OFFCURVE",
"310 627 OFFCURVE",
"388 627 QCURVE SMOOTH",
"466 627 OFFCURVE",
"590 555 OFFCURVE",
"659 430 OFFCURVE",
"659 352 QCURVE SMOOTH",
"659 297 OFFCURVE",
"623 199 OFFCURVE",
"589 161 QCURVE",
"589 161 LINE"
);
},
{
closed = 1;
nodes = (
"351 351 LINE",
"351 453 LINE",
"394 453 LINE SMOOTH",
"422 453 OFFCURVE",
"452 426 OFFCURVE",
"452 402 QCURVE SMOOTH",
"452 378 OFFCURVE",
"421 351 OFFCURVE",
"394 351 QCURVE",
"394 351 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 91 values pushed */\01245 1 5 8 46 1 4 5 2 74 6 1 4 5 3 5 4 3 126 10 1 1 0 2 7 1 2 103 0 7 0 9 8 7 9 103 11 1 8 0 5 4 8 5 101 0 3 0 0 3 87 0 3 3 0 95 0 0 3 0 79 48 47 0 0 54 52 47 55 48 55 41 39 38 37 36 35 34 33 31 29 23 21 0 15 0 14 38 12 10 21 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 775;
}
);
leftKerningGroup = C;
note = registered;
rightKerningGroup = D;
unicode = 00AE;
},
{
glyphname = trademark;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"4 601 LINE",
"139 601 LINE",
"139 285 LINE",
"275 285 LINE",
"275 601 LINE",
"411 601 LINE",
"411 700 LINE",
"4 700 LINE",
"4 700 LINE"
);
},
{
closed = 1;
nodes = (
"986 285 LINE",
"984 700 LINE",
"874 700 LINE",
"724 467 LINE",
"569 700 LINE",
"458 700 LINE",
"458 285 LINE",
"582 285 LINE",
"582 487 LINE",
"692 324 LINE",
"752 324 LINE",
"860 492 LINE",
"862 285 LINE",
"862 285 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 61 values pushed */\01217 12 9 3 4 1 1 74 0 4 1 2 1 4 2 126 9 8 5 3 2 2 130 7 6 2 0 1 1 0 85 7 6 2 0 0 1 93 3 1 1 0 1 77 8 8 8 20 8 20 18 17 18 19 17 17 17 16 10 13 28 \012CALL[ ]	/* CallFunction */";
};
width = 1056;
}
);
leftKerningGroup = trademark;
note = trademark;
rightKerningGroup = trademark;
unicode = 2122;
},
{
glyphname = degree;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"258 358 OFFCURVE",
"341 405 OFFCURVE",
"390 485 OFFCURVE",
"390 534 QCURVE SMOOTH",
"390 583 OFFCURVE",
"341 663 OFFCURVE",
"258 710 OFFCURVE",
"208 710 QCURVE SMOOTH",
"159 710 OFFCURVE",
"76 663 OFFCURVE",
"27 583 OFFCURVE",
"27 534 QCURVE SMOOTH",
"27 485 OFFCURVE",
"76 405 OFFCURVE",
"159 358 OFFCURVE",
"208 358 QCURVE",
"208 358 LINE"
);
},
{
closed = 1;
nodes = (
"172 448 OFFCURVE",
"124 497 OFFCURVE",
"124 534 QCURVE SMOOTH",
"124 570 OFFCURVE",
"172 619 OFFCURVE",
"208 619 QCURVE SMOOTH",
"245 619 OFFCURVE",
"293 570 OFFCURVE",
"293 534 QCURVE SMOOTH",
"293 497 OFFCURVE",
"245 448 OFFCURVE",
"208 448 QCURVE",
"208 448 LINE"
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */\0126 100 \012WCVTP[ ]	/* WriteCVTInPixels */\012NPUSHB[ ]	/* 45 values pushed */\0120 0 0 2 3 0 2 103 5 1 3 1 1 3 87 5 1 3 3 1 95 4 1 1 3 1 79 16 16 0 0 16 27 16 26 22 20 0 15 0 14 38 6 10 21 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 2 values pushed */\0126 0 \012WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 417;
}
);
leftKerningGroup = degree;
note = degree;
rightKerningGroup = degree;
unicode = 00B0;
},
{
glyphname = minute;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"53 408 LINE",
"188 408 LINE",
"201 700 LINE",
"41 700 LINE",
"41 700 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */\0120 1 1 0 93 0 0 0 66 1 76 17 16 2 10 22 \012CALL[ ]	/* CallFunction */";
};
width = 242;
}
);
leftKerningGroup = quotedbl;
note = minute;
rightKerningGroup = quotedbl;
unicode = 2032;
},
{
glyphname = second;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"53 408 LINE",
"188 408 LINE",
"201 700 LINE",
"41 700 LINE",
"41 700 LINE"
);
},
{
closed = 1;
nodes = (
"273 408 LINE",
"408 408 LINE",
"421 700 LINE",
"261 700 LINE",
"261 700 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */\0123 1 1 1 0 93 2 1 0 0 66 1 76 17 17 17 16 4 10 24 \012CALL[ ]	/* CallFunction */";
};
width = 462;
}
);
leftKerningGroup = quotedbl;
note = second;
rightKerningGroup = quotedbl;
unicode = 2033;
},
{
glyphname = bar;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
paths = (
{
closed = 1;
nodes = (
"70 -194 LINE",
"244 -194 LINE",
"244 742 LINE",
"70 742 LINE",
"70 742 LINE"
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */\012PUSHB[ ]	/* 1 value pushed */\01212 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NPUSHB[ ]	/* 11 values pushed */\0120 0 0 68 75 0 1 1 71 1 76 \012ELSE[ ]	/* Else */\012NPUSHB[ ]	/* 11 values pushed */\0120 0 0 1 93 0 1 1 71 1 76 \012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 5 values pushed */\01217 16 2 10 22 \012CALL[ ]	/* CallFunction */";
};
width = 314;
}
);
note = bar;
unicode = 007C;
},
{
glyphname = NULL;
layers = (
{
layerId = "4A38D2CF-722B-4995-83FB-3A8ED46F73E6";
width = 0;
}
);
note = NULL;
}
);
instances = (
{
instanceInterpolations = {
"4A38D2CF-722B-4995-83FB-3A8ED46F73E6" = 1;
};
name = ExtraBold;
weightClass = UltraBold;
}
);
kerning = {
"4A38D2CF-722B-4995-83FB-3A8ED46F73E6" = {
"@MMK_L_A" = {
"@MMK_R_A" = 29;
"@MMK_R_C" = -10;
"@MMK_R_Che-cy" = -57;
"@MMK_R_Cheabkhasian-cy" = -91;
"@MMK_R_De-cy" = 8;
"@MMK_R_J" = 15;
"@MMK_R_J.ss01" = -29;
"@MMK_R_T" = -35;
"@MMK_R_T.ss01" = -40;
"@MMK_R_U" = -15;
"@MMK_R_V" = -39;
"@MMK_R_X" = -38;
"@MMK_R_Y" = -44;
"@MMK_R_Y.ss01" = -21;
"@MMK_R_backslash" = -60;
"@MMK_R_be-cy.loclSRB" = -24;
"@MMK_R_braceright.case" = 30;
"@MMK_R_c" = -5;
"@MMK_R_c.sc" = -8;
"@MMK_R_cheabkhasian-cy" = -62;
"@MMK_R_colon" = 10;
"@MMK_R_comma" = 31;
"@MMK_R_de-cy" = 8;
"@MMK_R_degree" = -98;
"@MMK_R_e.sc.ss01" = 2;
"@MMK_R_eight" = -5;
"@MMK_R_exclamdown" = 10;
"@MMK_R_four" = -15;
"@MMK_R_four.osf" = 18;
"@MMK_R_ghestroke-cy" = -2;
"@MMK_R_guillemetright" = 3;
"@MMK_R_guillemetright.case" = -11;
"@MMK_R_hardsign-cy.ss01" = -47;
"@MMK_R_j.sc" = 30;
"@MMK_R_j.sc.ss01" = 53;
"@MMK_R_nine" = -11;
"@MMK_R_nine.osf" = -6;
"@MMK_R_one" = -44;
"@MMK_R_one.osf" = -25;
"@MMK_R_ordfeminine" = -98;
"@MMK_R_paragraph" = -80;
"@MMK_R_periodcentered" = -27;
"@MMK_R_periodcentered.case" = -39;
"@MMK_R_question" = -70;
"@MMK_R_questiondown" = 20;
"@MMK_R_quotedbl" = -41;
"@MMK_R_quotedblleft" = -38;
"@MMK_R_quotedblright" = -38;
"@MMK_R_s" = -5;
"@MMK_R_semisoftsign-cy" = -25;
"@MMK_R_seven" = -50;
"@MMK_R_seven.osf" = -55;
"@MMK_R_slash" = 30;
"@MMK_R_t" = -5;
"@MMK_R_t.sc" = -29;
"@MMK_R_te-cy" = -53;
"@MMK_R_three" = 10;
"@MMK_R_three.osf" = 5;
"@MMK_R_trademark" = -78;
"@MMK_R_tshe-cy" = -14;
"@MMK_R_two.osf" = 5;
"@MMK_R_u" = -10;
"@MMK_R_u.sc" = -5;
"@MMK_R_underscore" = 52;
"@MMK_R_v" = -29;
"@MMK_R_v.sc" = -14;
"@MMK_R_x" = -38;
"@MMK_R_x.sc" = -32;
"@MMK_R_y.sc" = -33;
"@MMK_R_y.sc.ss01" = -15;
"@MMK_R_z" = -4;
"@MMK_R_zero" = -13;
"@MMK_R_zero.osf" = -5;
};
"@MMK_L_A.ss01" = {
"@MMK_R_Che-cy" = -20;
"@MMK_R_Cheabkhasian-cy" = -22;
"@MMK_R_De-cy" = -10;
"@MMK_R_E.ss01" = -9;
"@MMK_R_El-cy.ss01" = -14;
"@MMK_R_Ezh" = -8;
"@MMK_R_J.ss01" = -8;
"@MMK_R_T" = -11;
"@MMK_R_T.ss01" = -10;
"@MMK_R_V" = -20;
"@MMK_R_X" = -10;
"@MMK_R_Y" = -29;
"@MMK_R_Y.ss01" = -18;
"@MMK_R_backslash" = -13;
"@MMK_R_cheabkhasian-cy" = -22;
"@MMK_R_de-cy" = -2;
"@MMK_R_hardsign-cy.ss01" = -28;
"@MMK_R_one" = -2;
"@MMK_R_ordfeminine" = -2;
"@MMK_R_question" = -20;
"@MMK_R_quotedblleft" = -3;
"@MMK_R_quotedblright" = -3;
"@MMK_R_semisoftsign-cy" = -24;
"@MMK_R_te-cy" = -11;
"@MMK_R_trademark" = -10;
"@MMK_R_v" = -13;
};
"@MMK_L_AE" = {
"@MMK_R_C" = -1;
"@MMK_R_V" = -10;
"@MMK_R_X" = -6;
"@MMK_R_Y" = -6;
"@MMK_R_a" = -2;
"@MMK_R_a.sc.ss01" = -2;
"@MMK_R_c" = -2;
"@MMK_R_c.sc" = -7;
"@MMK_R_cheabkhasian-cy" = -25;
"@MMK_R_colon" = -2;
"@MMK_R_comma" = 10;
"@MMK_R_e.sc.ss01" = -2;
"@MMK_R_eight" = -2;
"@MMK_R_exclamdown" = -2;
"@MMK_R_f.sc.ss01" = -2;
"@MMK_R_five" = -2;
"@MMK_R_five.osf" = -3;
"@MMK_R_four" = -9;
"@MMK_R_four.osf" = -2;
"@MMK_R_guillemetright.case" = -12;
"@MMK_R_i.sc.ss01" = -2;
"@MMK_R_j.sc" = 5;
"@MMK_R_j.sc.ss01" = -5;
"@MMK_R_nine" = -1;
"@MMK_R_nine.osf" = -4;
"@MMK_R_one.osf" = -2;
"@MMK_R_periodcentered" = -20;
"@MMK_R_question" = -3;
"@MMK_R_s" = -2;
"@MMK_R_s.sc" = -2;
"@MMK_R_section" = -2;
"@MMK_R_semisoftsign-cy" = -3;
"@MMK_R_seven" = -2;
"@MMK_R_seven.osf" = -5;
"@MMK_R_t" = -3;
"@MMK_R_t.sc" = -2;
"@MMK_R_three" = -3;
"@MMK_R_three.osf" = -3;
"@MMK_R_two" = -2;
"@MMK_R_two.osf" = -3;
"@MMK_R_u" = -2;
"@MMK_R_u.sc" = -2;
"@MMK_R_underscore" = 3;
"@MMK_R_v" = -2;
"@MMK_R_v.sc" = -3;
"@MMK_R_x" = -3;
"@MMK_R_x.sc" = -2;
"@MMK_R_y.sc" = -2;
"@MMK_R_y.sc.ss01" = -2;
"@MMK_R_z" = -2;
"@MMK_R_z.sc" = -2;
"@MMK_R_zero" = -7;
"@MMK_R_zero.osf" = -3;
};
"@MMK_L_B" = {
"@MMK_R_J.ss01" = -30;
"@MMK_R_T" = -10;
"@MMK_R_T.ss01" = -5;
"@MMK_R_V" = -5;
"@MMK_R_X" = -10;
"@MMK_R_Y" = -15;
"@MMK_R_backslash" = -20;
"@MMK_R_cheabkhasian-cy" = -21;
"@MMK_R_comma" = 8;
"@MMK_R_j.sc.ss01" = -20;
"@MMK_R_quotedblleft" = -10;
"@MMK_R_quotedblright" = -8;
"@MMK_R_semisoftsign-cy" = -20;
"@MMK_R_three.osf" = -6;
"@MMK_R_trademark" = -8;
"@MMK_R_underscore" = -10;
"@MMK_R_y.sc" = -10;
};
"@MMK_L_Be-cy" = {
"@MMK_R_A" = -8;
"@MMK_R_A.ss01" = -2;
"@MMK_R_Che-cy" = -8;
"@MMK_R_Cheabkhasian-cy" = -41;
"@MMK_R_De-cy" = -16;
"@MMK_R_T" = -32;
"@MMK_R_T.ss01" = -25;
"@MMK_R_U" = -3;
"@MMK_R_V" = -35;
"@MMK_R_X" = -28;
"@MMK_R_Y" = -31;
"@MMK_R_cheabkhasian-cy" = -20;
"@MMK_R_de-cy" = -11;
"@MMK_R_exclam" = -2;
"@MMK_R_ezhcaron" = -19;
"@MMK_R_question" = -20;
"@MMK_R_quotedbl" = -20;
"@MMK_R_quotedblleft" = -17;
"@MMK_R_quotedblright" = -17;
"@MMK_R_reversedze-cy" = -2;
"@MMK_R_semisoftsign-cy" = -16;
"@MMK_R_te-cy" = -26;
"@MMK_R_v" = -11;
"@MMK_R_x" = -32;
};
"@MMK_L_C" = {
"@MMK_R_A" = -12;
"@MMK_R_C" = -15;
"@MMK_R_Che-cy" = -2;
"@MMK_R_Cheabkhasian-cy" = -23;
"@MMK_R_De-cy" = -17;
"@MMK_R_E.ss01" = -7;
"@MMK_R_J.ss01" = -22;
"@MMK_R_S" = -8;
"@MMK_R_T" = -6;
"@MMK_R_U" = -8;
"@MMK_R_V" = -2;
"@MMK_R_X" = -12;
"@MMK_R_Y" = -3;
"@MMK_R_Y.ss01" = -3;
"@MMK_R_a" = -2;
"@MMK_R_a.sc" = -10;
"@MMK_R_a.sc.ss01" = -2;
"@MMK_R_ampersand" = -20;
"@MMK_R_b.sc" = -2;
"@MMK_R_backslash" = -10;
"@MMK_R_be-cy.loclSRB" = -13;
"@MMK_R_c" = -17;
"@MMK_R_c.sc" = -12;
"@MMK_R_cheabkhasian-cy" = -67;
"@MMK_R_colon" = -9;
"@MMK_R_comma" = 11;
"@MMK_R_de-cy" = -15;
"@MMK_R_degree" = 10;
"@MMK_R_e.sc.ss01" = -11;
"@MMK_R_eight" = -11;
"@MMK_R_exclamdown" = -10;
"@MMK_R_ezhcaron" = -3;
"@MMK_R_f.sc.ss01" = -2;
"@MMK_R_five" = -10;
"@MMK_R_five.osf" = -12;
"@MMK_R_four" = -7;
"@MMK_R_four.osf" = -5;
"@MMK_R_guillemetright" = -8;
"@MMK_R_guillemetright.case" = -2;
"@MMK_R_j.sc.ss01" = -22;
"@MMK_R_nine" = -10;
"@MMK_R_nine.osf" = -12;
"@MMK_R_one" = 10;
"@MMK_R_one.osf" = 10;
"@MMK_R_ordfeminine" = 20;
"@MMK_R_paragraph" = 2;
"@MMK_R_periodcentered" = -8;
"@MMK_R_periodcentered.case" = -25;
"@MMK_R_questiondown" = -3;
"@MMK_R_quotedblleft" = -3;
"@MMK_R_quotedblright" = 7;
"@MMK_R_reversedze-cy" = -16;
"@MMK_R_s" = -20;
"@MMK_R_s.sc" = -16;
"@MMK_R_section" = -2;
"@MMK_R_semisoftsign-cy" = -22;
"@MMK_R_seven.osf" = -7;
"@MMK_R_t.sc" = -20;
"@MMK_R_te-cy" = -15;
"@MMK_R_three" = -1;
"@MMK_R_three.osf" = -12;
"@MMK_R_tshe-cy" = 21;
"@MMK_R_two" = -2;
"@MMK_R_two.osf" = -3;
"@MMK_R_u" = -12;
"@MMK_R_u.sc" = -12;
"@MMK_R_underscore" = 10;
"@MMK_R_v.sc" = 23;
"@MMK_R_x" = -12;
"@MMK_R_x.sc" = 7;
"@MMK_R_y.sc" = 28;
"@MMK_R_y.sc.ss01" = -17;
"@MMK_R_z" = -12;
"@MMK_R_z.sc" = -2;
"@MMK_R_zero" = -17;
"@MMK_R_zero.osf" = -22;
};
"@MMK_L_D" = {
"@MMK_R_A" = -10;
"@MMK_R_Che-cy" = -15;
"@MMK_R_De-cy" = -20;
"@MMK_R_Ezh" = -20;
"@MMK_R_I.ss01" = -5;
"@MMK_R_J" = -15;
"@MMK_R_J.ss01" = -30;
"@MMK_R_T" = -10;
"@MMK_R_T.ss01" = -10;
"@MMK_R_V" = -24;
"@MMK_R_X" = -25;
"@MMK_R_Y" = -30;
"@MMK_R_Y.ss01" = -5;
"@MMK_R_Z" = -6;
"@MMK_R_a.sc" = -10;
"@MMK_R_backslash" = -20;
"@MMK_R_braceright" = 14;
"@MMK_R_cheabkhasian-cy" = -16;
"@MMK_R_comma" = -20;
"@MMK_R_de-cy" = -19;
"@MMK_R_degree" = 10;
"@MMK_R_ezhcaron" = -16;
"@MMK_R_four.osf" = -20;
"@MMK_R_j" = 80;
"@MMK_R_j.sc" = -10;
"@MMK_R_j.sc.ss01" = -20;
"@MMK_R_nine.osf" = 10;
"@MMK_R_one" = -10;
"@MMK_R_parenright" = 3;
"@MMK_R_parenright.case" = 9;
"@MMK_R_periodcentered" = 2;
"@MMK_R_periodcentered.case" = 2;
"@MMK_R_question" = -30;
"@MMK_R_questiondown" = -20;
"@MMK_R_quotedbl" = -16;
"@MMK_R_quotedblleft" = -3;
"@MMK_R_quotedblright" = -15;
"@MMK_R_reversedze-cy" = -3;
"@MMK_R_semisoftsign-cy" = -11;
"@MMK_R_slash" = -20;
"@MMK_R_t" = 5;
"@MMK_R_te-cy" = -3;
"@MMK_R_three" = -14;
"@MMK_R_three.osf" = -1;
"@MMK_R_trademark" = 5;
"@MMK_R_two" = -10;
"@MMK_R_underscore" = -30;
"@MMK_R_v.sc" = -10;
"@MMK_R_x" = -18;
"@MMK_R_x.sc" = -5;
"@MMK_R_y.sc" = -10;
"@MMK_R_z.sc" = -2;
};
"@MMK_L_DZcaron" = {
"@MMK_R_C" = -6;
"@MMK_R_T.ss01" = 10;
"@MMK_R_X" = -10;
"@MMK_R_Y.ss01" = -2;
"@MMK_R_a" = 4;
"@MMK_R_a.sc" = 17;
"@MMK_R_a.sc.ss01" = -2;
"@MMK_R_ampersand" = -3;
"@MMK_R_braceright" = 17;
"@MMK_R_c" = -3;
"@MMK_R_c.sc" = -2;
"@MMK_R_colon" = 8;
"@MMK_R_comma" = 20;
"@MMK_R_e.sc.ss01" = -2;
"@MMK_R_eight" = -1;
"@MMK_R_exclamdown" = 8;
"@MMK_R_five" = -1;
"@MMK_R_five.osf" = -2;
"@MMK_R_four" = -9;
"@MMK_R_four.osf" = 3;
"@MMK_R_guillemetright.case" = -3;
"@MMK_R_i.sc.ss01" = -2;
"@MMK_R_j.sc" = 27;
"@MMK_R_j.sc.ss01" = 25;
"@MMK_R_nine.osf" = -3;
"@MMK_R_one" = 20;
"@MMK_R_one.osf" = -2;
"@MMK_R_ordfeminine" = 10;
"@MMK_R_periodcentered" = -3;
"@MMK_R_periodcentered.case" = -2;
"@MMK_R_question" = 8;
"@MMK_R_s.sc" = -3;
"@MMK_R_seven.osf" = -8;
"@MMK_R_slash" = 2;
"@MMK_R_t" = -2;
"@MMK_R_three.osf" = -3;
"@MMK_R_trademark" = 30;
"@MMK_R_u" = -2;
"@MMK_R_u.sc" = -4;
"@MMK_R_underscore" = 30;
"@MMK_R_v" = -3;
"@MMK_R_v.sc" = -3;
"@MMK_R_x.sc" = 17;
"@MMK_R_y.sc" = 7;
"@MMK_R_y.sc.ss01" = -6;
"@MMK_R_z.sc" = -2;
"@MMK_R_zero" = -12;
"@MMK_R_zero.osf" = -3;
};
"@MMK_L_De-cy" = {
"@MMK_R_A" = 8;
"@MMK_R_Che-cy" = -24;
"@MMK_R_Cheabkhasian-cy" = -52;
"@MMK_R_T" = -33;
"@MMK_R_V" = -33;
"@MMK_R_Y" = -38;
"@MMK_R_braceright" = 13;
"@MMK_R_c" = -3;
"@MMK_R_cheabkhasian-cy" = -53;
"@MMK_R_comma" = 13;
"@MMK_R_ezhcaron" = -4;
"@MMK_R_periodcentered" = -21;
"@MMK_R_question" = -42;
"@MMK_R_quotedbl" = -20;
"@MMK_R_quotedblleft" = -20;
"@MMK_R_quotedblright" = -20;
"@MMK_R_reversedze-cy" = -3;
"@MMK_R_te-cy" = -42;
"@MMK_R_v" = -31;
"@MMK_R_x" = -5;
};
"@MMK_L_De-cy.ss01" = {
"@MMK_R_Che-cy" = -38;
"@MMK_R_Cheabkhasian-cy" = -62;
"@MMK_R_T" = -55;
"@MMK_R_T.ss01" = -45;
"@MMK_R_U" = -2;
"@MMK_R_V" = -5;
"@MMK_R_Y" = -5;
"@MMK_R_c" = -2;
"@MMK_R_cheabkhasian-cy" = -35;
"@MMK_R_hardsign-cy.ss01" = -38;
"@MMK_R_j" = 11;
"@MMK_R_periodcentered" = -3;
"@MMK_R_quotedbl" = -3;
"@MMK_R_quotedblleft" = -4;
"@MMK_R_quotedblright" = -28;
"@MMK_R_semisoftsign-cy" = -11;
"@MMK_R_te-cy" = -28;
"@MMK_R_v" = -18;
};
"@MMK_L_Dzcaron" = {
"@MMK_R_ampersand" = -2;
"@MMK_R_backslash" = -53;
"@MMK_R_c" = -6;
"@MMK_R_comma" = 8;
"@MMK_R_four" = -3;
"@MMK_R_four.osf" = -4;
"@MMK_R_one" = -3;
"@MMK_R_one.osf" = 18;
"@MMK_R_ordfeminine" = 10;
"@MMK_R_periodcentered" = -11;
"@MMK_R_seven.osf" = 8;
"@MMK_R_t" = 4;
"@MMK_R_three.osf" = -2;
"@MMK_R_two" = -2;
"@MMK_R_underscore" = 13;
"@MMK_R_v" = -10;
"@MMK_R_x" = -10;
"@MMK_R_zero.osf" = -2;
};
"@MMK_L_E.ss01" = {
"@MMK_R_A.ss01" = -25;
"@MMK_R_C" = -15;
"@MMK_R_E.ss01" = -5;
"@MMK_R_J" = 10;
"@MMK_R_J.ss01" = -12;
"@MMK_R_T.ss01" = -8;
"@MMK_R_X" = -2;
"@MMK_R_Y" = -2;
"@MMK_R_Y.ss01" = -10;
"@MMK_R_a" = -1;
"@MMK_R_be-cy.loclSRB" = -16;
"@MMK_R_c" = -6;
"@MMK_R_c.sc" = -10;
"@MMK_R_cheabkhasian-cy" = -49;
"@MMK_R_comma" = 10;
"@MMK_R_e.sc.ss01" = -10;
"@MMK_R_eight" = -11;
"@MMK_R_five.osf" = -3;
"@MMK_R_four" = -17;
"@MMK_R_four.osf" = -3;
"@MMK_R_guillemetright.case" = -20;
"@MMK_R_hardsign-cy.ss01" = -29;
"@MMK_R_j.sc" = 28;
"@MMK_R_j.sc.ss01" = -2;
"@MMK_R_nine" = -10;
"@MMK_R_nine.osf" = -11;
"@MMK_R_one.osf" = -5;
"@MMK_R_parenright" = -2;
"@MMK_R_periodcentered" = -10;
"@MMK_R_periodcentered.case" = -30;
"@MMK_R_question" = -3;
"@MMK_R_questiondown" = 8;
"@MMK_R_quotedblleft" = -18;
"@MMK_R_s" = -10;
"@MMK_R_s.sc" = -2;
"@MMK_R_semisoftsign-cy" = -26;
"@MMK_R_seven.osf" = -20;
"@MMK_R_slash" = 10;
"@MMK_R_t" = -15;
"@MMK_R_t.sc" = -5;
"@MMK_R_te-cy" = -17;
"@MMK_R_three" = 8;
"@MMK_R_three.osf" = -13;
"@MMK_R_two.osf" = -2;
"@MMK_R_u" = -6;
"@MMK_R_u.sc" = -2;
"@MMK_R_underscore" = 40;
"@MMK_R_v" = -11;
"@MMK_R_v.sc" = -10;
"@MMK_R_x" = -11;
"@MMK_R_y.sc.ss01" = -22;
"@MMK_R_z.sc" = -1;
"@MMK_R_zero" = -16;
"@MMK_R_zero.osf" = -7;
};
"@MMK_L_F" = {
"@MMK_R_A" = -27;
"@MMK_R_A.ss01" = -6;
"@MMK_R_C" = -6;
"@MMK_R_Che-cy" = -3;
"@MMK_R_Cheabkhasian-cy" = -15;
"@MMK_R_De-cy" = -32;
"@MMK_R_De-cy.ss01" = -30;
"@MMK_R_E.ss01" = -1;
"@MMK_R_Ezh" = -3;
"@MMK_R_J" = -15;
"@MMK_R_J.ss01" = -30;
"@MMK_R_S" = -1;
"@MMK_R_T" = 5;
"@MMK_R_T.ss01" = 30;
"@MMK_R_X" = -12;
"@MMK_R_Y.ss01" = -2;
"@MMK_R_a" = -12;
"@MMK_R_a.sc" = -50;
"@MMK_R_a.sc.ss01" = -12;
"@MMK_R_ampersand" = -18;
"@MMK_R_b.sc" = -2;
"@MMK_R_backslash" = 10;
"@MMK_R_be-cy.loclSRB" = -13;
"@MMK_R_braceright" = 10;
"@MMK_R_braceright.case" = 8;
"@MMK_R_c" = -12;
"@MMK_R_c.sc" = -6;
"@MMK_R_cheabkhasian-cy" = -28;
"@MMK_R_comma" = -10;
"@MMK_R_de-cy" = -28;
"@MMK_R_degree" = 30;
"@MMK_R_e.sc.ss01" = -12;
"@MMK_R_eight" = -12;
"@MMK_R_exclam" = 17;
"@MMK_R_exclam.sc" = -3;
"@MMK_R_exclamdown" = -10;
"@MMK_R_exclamdown.sc" = -3;
"@MMK_R_ezhcaron" = -21;
"@MMK_R_f.sc.ss01" = -12;
"@MMK_R_five" = -12;
"@MMK_R_five.osf" = -8;
"@MMK_R_four" = -38;
"@MMK_R_four.osf" = -52;
"@MMK_R_guillemetright" = -11;
"@MMK_R_guillemetright.case" = -2;
"@MMK_R_guillemetright.sc" = -2;
"@MMK_R_hardsign-cy.ss01" = -17;
"@MMK_R_i" = -10;
"@MMK_R_i.sc.ss01" = -2;
"@MMK_R_j" = -15;
"@MMK_R_j.sc" = -17;
"@MMK_R_j.sc.ss01" = -17;
"@MMK_R_nine" = 9;
"@MMK_R_nine.osf" = -5;
"@MMK_R_one" = 15;
"@MMK_R_one.osf" = 22;
"@MMK_R_ordfeminine" = 20;
"@MMK_R_paragraph" = 10;
"@MMK_R_parenright" = -2;
"@MMK_R_periodcentered.case" = 11;
"@MMK_R_question" = 9;
"@MMK_R_questiondown" = -42;
"@MMK_R_quotedbl" = 40;
"@MMK_R_quotedblleft" = 12;
"@MMK_R_quotedblright" = 22;
"@MMK_R_reversedze-cy" = -21;
"@MMK_R_s" = -10;
"@MMK_R_s.sc" = -2;
"@MMK_R_section" = -2;
"@MMK_R_semisoftsign-cy" = -13;
"@MMK_R_seven" = 10;
"@MMK_R_seven.osf" = 21;
"@MMK_R_slash" = -37;
"@MMK_R_t.sc" = 13;
"@MMK_R_te-cy" = -3;
"@MMK_R_three.osf" = -5;
"@MMK_R_trademark" = 30;
"@MMK_R_tshe-cy" = 31;
"@MMK_R_two" = 8;
"@MMK_R_two.osf" = -5;
"@MMK_R_u" = -12;
"@MMK_R_u.sc" = -12;
"@MMK_R_underscore" = -20;
"@MMK_R_v" = 5;
"@MMK_R_v.sc" = 17;
"@MMK_R_x" = -12;
"@MMK_R_x.sc" = -2;
"@MMK_R_y.sc" = 20;
"@MMK_R_y.sc.ss01" = -3;
"@MMK_R_z" = -12;
"@MMK_R_z.sc" = -5;
"@MMK_R_zero" = -11;
"@MMK_R_zero.osf" = -7;
};
"@MMK_L_F.ss01" = {
"@MMK_R_A" = -45;
"@MMK_R_A.ss01" = -25;
"@MMK_R_C" = -11;
"@MMK_R_De-cy" = -3;
"@MMK_R_De-cy.ss01" = -67;
"@MMK_R_E.ss01" = -20;
"@MMK_R_El-cy.ss01" = -2;
"@MMK_R_J" = -20;
"@MMK_R_J.ss01" = -35;
"@MMK_R_S" = -10;
"@MMK_R_X" = -10;
"@MMK_R_Y" = 10;
"@MMK_R_a" = -40;
"@MMK_R_a.sc" = -73;
"@MMK_R_a.sc.ss01" = -37;
"@MMK_R_ampersand" = -28;
"@MMK_R_b.sc" = -20;
"@MMK_R_backslash" = 12;
"@MMK_R_be-cy.loclSRB" = -25;
"@MMK_R_braceright" = 8;
"@MMK_R_braceright.case" = 8;
"@MMK_R_c" = -30;
"@MMK_R_c.sc" = -31;
"@MMK_R_cheabkhasian-cy" = -29;
"@MMK_R_colon" = -30;
"@MMK_R_comma" = -8;
"@MMK_R_dagger" = -20;
"@MMK_R_e.sc.ss01" = -60;
"@MMK_R_eight" = -31;
"@MMK_R_exclamdown" = -25;
"@MMK_R_f.sc.ss01" = -26;
"@MMK_R_five" = -18;
"@MMK_R_five.osf" = -20;
"@MMK_R_four" = -20;
"@MMK_R_four.osf" = -21;
"@MMK_R_guillemetright" = -18;
"@MMK_R_guillemetright.case" = -22;
"@MMK_R_guillemetright.sc" = -3;
"@MMK_R_i" = -20;
"@MMK_R_i.sc.ss01" = -15;
"@MMK_R_j" = -25;
"@MMK_R_j.sc" = -30;
"@MMK_R_j.sc.ss01" = -37;
"@MMK_R_nine" = -20;
"@MMK_R_nine.osf" = -23;
"@MMK_R_one" = 12;
"@MMK_R_ordfeminine" = 7;
"@MMK_R_paragraph" = 3;
"@MMK_R_periodcentered" = -30;
"@MMK_R_periodcentered.case" = -10;
"@MMK_R_questiondown" = -17;
"@MMK_R_quotedblleft" = -8;
"@MMK_R_quotedblright" = 8;
"@MMK_R_s" = -40;
"@MMK_R_s.sc" = -35;
"@MMK_R_section" = -10;
"@MMK_R_semisoftsign-cy" = -26;
"@MMK_R_seven" = 2;
"@MMK_R_seven.osf" = -12;
"@MMK_R_slash" = 14;
"@MMK_R_t" = -20;
"@MMK_R_three" = -10;
"@MMK_R_three.osf" = -26;
"@MMK_R_trademark" = 23;
"@MMK_R_two" = -10;
"@MMK_R_two.osf" = -15;
"@MMK_R_u" = -22;
"@MMK_R_u.sc" = -20;
"@MMK_R_underscore" = 12;
"@MMK_R_v" = -20;
"@MMK_R_x" = -25;
"@MMK_R_x.sc" = -20;
"@MMK_R_y.sc" = -3;
"@MMK_R_y.sc.ss01" = -33;
"@MMK_R_z" = -40;
"@MMK_R_z.sc" = -20;
"@MMK_R_zero" = -32;
"@MMK_R_zero.osf" = -19;
};
"@MMK_L_G" = {
"@MMK_R_J.ss01" = -10;
"@MMK_R_backslash" = -12;
"@MMK_R_comma" = 10;
"@MMK_R_j.sc.ss01" = -10;
"@MMK_R_quotedblleft" = -10;
"@MMK_R_t.sc" = -10;
"@MMK_R_v.sc" = 8;
"@MMK_R_y.sc" = 20;
};
"@MMK_L_Ge-cy" = {
"@MMK_R_A" = -138;
"@MMK_R_C" = -61;
"@MMK_R_Che-cy" = -6;
"@MMK_R_Cheabkhasian-cy" = -87;
"@MMK_R_De-cy" = -86;
"@MMK_R_De-cy.ss01" = -11;
"@MMK_R_b" = -2;
"@MMK_R_c" = -135;
"@MMK_R_cheabkhasian-cy" = -210;
"@MMK_R_comma" = -188;
"@MMK_R_de-cy" = -131;
"@MMK_R_ezhcaron" = -102;
"@MMK_R_i" = -28;
"@MMK_R_periodcentered" = -208;
"@MMK_R_reversedze-cy" = -122;
"@MMK_R_te-cy" = -26;
"@MMK_R_v" = -28;
"@MMK_R_x" = -29;
};
"@MMK_L_H" = {
"@MMK_R_Che-cy" = -20;
"@MMK_R_Cheabkhasian-cy" = -2;
"@MMK_R_De-cy" = -2;
"@MMK_R_V" = -2;
"@MMK_R_be-cy.loclSRB" = -3;
"@MMK_R_cheabkhasian-cy" = -2;
"@MMK_R_semisoftsign-cy" = -2;
"@MMK_R_tshe-cy" = 14;
};
"@MMK_L_I.ss01" = {
"@MMK_R_C" = -5;
"@MMK_R_eight" = -1;
"@MMK_R_four" = -10;
"@MMK_R_nine" = -1;
"@MMK_R_periodcentered.case" = -5;
"@MMK_R_trademark" = 20;
"@MMK_R_zero" = -10;
};
"@MMK_L_IJ" = {
"@MMK_R_A" = -15;
"@MMK_R_Che-cy" = -17;
"@MMK_R_Cheabkhasian-cy" = -16;
"@MMK_R_De-cy" = -24;
"@MMK_R_De-cy.ss01" = -2;
"@MMK_R_J.ss01" = -25;
"@MMK_R_T" = -11;
"@MMK_R_X" = -10;
"@MMK_R_Y" = -10;
"@MMK_R_a.sc" = -5;
"@MMK_R_cheabkhasian-cy" = -22;
"@MMK_R_comma" = -6;
"@MMK_R_de-cy" = -15;
"@MMK_R_ezhcaron" = -15;
"@MMK_R_four.osf" = -7;
"@MMK_R_j" = -5;
"@MMK_R_j.sc" = -4;
"@MMK_R_j.sc.ss01" = -14;
"@MMK_R_questiondown" = -2;
"@MMK_R_reversedze-cy" = -2;
"@MMK_R_semisoftsign-cy" = -12;
"@MMK_R_slash" = -10;
"@MMK_R_te-cy" = -15;
"@MMK_R_three.osf" = -3;
"@MMK_R_tshe-cy" = 14;
"@MMK_R_underscore" = -10;
"@MMK_R_x" = -2;
};
"@MMK_L_IJ.ss01" = {
"@MMK_R_J.ss01" = -20;
"@MMK_R_j.sc.ss01" = -10;
"@MMK_R_three.osf" = -2;
"@MMK_R_underscore" = -10;
};
"@MMK_L_K" = {
"@MMK_R_A" = -33;
"@MMK_R_A.ss01" = -10;
"@MMK_R_C" = -25;
"@MMK_R_Che-cy" = -15;
"@MMK_R_Cheabkhasian-cy" = -67;
"@MMK_R_De-cy" = 7;
"@MMK_R_E.ss01" = -10;
"@MMK_R_Ezh" = -21;
"@MMK_R_J.ss01" = -23;
"@MMK_R_S" = -15;
"@MMK_R_T" = -52;
"@MMK_R_T.ss01" = -20;
"@MMK_R_U" = -10;
"@MMK_R_V" = -40;
"@MMK_R_X" = -43;
"@MMK_R_Y" = -53;
"@MMK_R_Y.ss01" = -22;
"@MMK_R_a" = -11;
"@MMK_R_a.sc" = -27;
"@MMK_R_a.sc.ss01" = -2;
"@MMK_R_ampersand" = -20;
"@MMK_R_b.sc" = -10;
"@MMK_R_be-cy.loclSRB" = -25;
"@MMK_R_braceright" = 17;
"@MMK_R_braceright.case" = 17;
"@MMK_R_bracketleft" = -7;
"@MMK_R_c" = -21;
"@MMK_R_c.sc" = -24;
"@MMK_R_cheabkhasian-cy" = -101;
"@MMK_R_degree" = -10;
"@MMK_R_e.sc.ss01" = -25;
"@MMK_R_eight" = -24;
"@MMK_R_ezhcaron" = -22;
"@MMK_R_f.sc.ss01" = -1;
"@MMK_R_five.osf" = -3;
"@MMK_R_four" = -42;
"@MMK_R_four.osf" = -3;
"@MMK_R_guillemetright" = -8;
"@MMK_R_guillemetright.case" = -22;
"@MMK_R_hardsign-cy.ss01" = -75;
"@MMK_R_i" = -10;
"@MMK_R_i.sc.ss01" = -2;
"@MMK_R_j" = -1;
"@MMK_R_j.sc" = 20;
"@MMK_R_j.sc.ss01" = 41;
"@MMK_R_nine" = -10;
"@MMK_R_nine.osf" = -17;
"@MMK_R_one" = 20;
"@MMK_R_one.osf" = -15;
"@MMK_R_paragraph" = -17;
"@MMK_R_periodcentered" = -38;
"@MMK_R_periodcentered.case" = -29;
"@MMK_R_question" = -40;
"@MMK_R_quotedblleft" = -27;
"@MMK_R_reversedze-cy" = -29;
"@MMK_R_s" = -12;
"@MMK_R_s.sc" = -3;
"@MMK_R_semisoftsign-cy" = -53;
"@MMK_R_seven.osf" = -42;
"@MMK_R_slash" = 2;
"@MMK_R_t" = -22;
"@MMK_R_t.sc" = -58;
"@MMK_R_te-cy" = -52;
"@MMK_R_three" = -2;
"@MMK_R_three.osf" = 10;
"@MMK_R_trademark" = 20;
"@MMK_R_tshe-cy" = 34;
"@MMK_R_two" = 4;
"@MMK_R_two.osf" = 4;
"@MMK_R_u" = -16;
"@MMK_R_u.sc" = -25;
"@MMK_R_underscore" = 62;
"@MMK_R_v" = -39;
"@MMK_R_v.sc" = -16;
"@MMK_R_x" = -48;
"@MMK_R_x.sc" = -20;
"@MMK_R_y.sc" = -39;
"@MMK_R_y.sc.ss01" = -23;
"@MMK_R_z" = -28;
"@MMK_R_z.sc" = -2;
"@MMK_R_zero" = -24;
"@MMK_R_zero.osf" = -25;
};
"@MMK_L_L" = {
"@MMK_R_A" = 8;
"@MMK_R_C" = -11;
"@MMK_R_E.ss01" = -2;
"@MMK_R_J.ss01" = 30;
"@MMK_R_S" = -2;
"@MMK_R_T" = -65;
"@MMK_R_T.ss01" = -65;
"@MMK_R_U" = -7;
"@MMK_R_V" = -47;
"@MMK_R_X" = -10;
"@MMK_R_Y" = -71;
"@MMK_R_Y.ss01" = -22;
"@MMK_R_a" = 8;
"@MMK_R_a.sc" = 30;
"@MMK_R_a.sc.ss01" = 17;
"@MMK_R_ampersand" = 8;
"@MMK_R_b.sc" = 10;
"@MMK_R_backslash" = -70;
"@MMK_R_braceright.case" = 8;
"@MMK_R_c" = -2;
"@MMK_R_c.sc" = -2;
"@MMK_R_colon" = 20;
"@MMK_R_comma" = 30;
"@MMK_R_degree" = -65;
"@MMK_R_eight" = -2;
"@MMK_R_four" = -9;
"@MMK_R_four.osf" = 15;
"@MMK_R_guillemetright" = 2;
"@MMK_R_guillemetright.case" = -2;
"@MMK_R_i.sc.ss01" = 8;
"@MMK_R_j.sc" = 40;
"@MMK_R_j.sc.ss01" = 28;
"@MMK_R_nine" = -10;
"@MMK_R_nine.osf" = -5;
"@MMK_R_one" = -32;
"@MMK_R_one.osf" = -37;
"@MMK_R_ordfeminine" = -70;
"@MMK_R_paragraph" = -87;
"@MMK_R_periodcentered" = 5;
"@MMK_R_periodcentered.case" = -30;
"@MMK_R_question" = -83;
"@MMK_R_quotedblleft" = -48;
"@MMK_R_quotedblright" = -49;
"@MMK_R_seven" = -50;
"@MMK_R_seven.osf" = -44;
"@MMK_R_slash" = 13;
"@MMK_R_t" = -5;
"@MMK_R_t.sc" = -40;
"@MMK_R_three" = 8;
"@MMK_R_trademark" = -77;
"@MMK_R_two.osf" = 10;
"@MMK_R_u" = -2;
"@MMK_R_u.sc" = -3;
"@MMK_R_underscore" = 45;
"@MMK_R_v" = -36;
"@MMK_R_v.sc" = -26;
"@MMK_R_x" = -2;
"@MMK_R_x.sc" = 18;
"@MMK_R_y.sc" = -59;
"@MMK_R_y.sc.ss01" = -13;
"@MMK_R_z.sc" = 10;
"@MMK_R_zero" = -13;
"@MMK_R_zero.osf" = -2;
};
"@MMK_L_Lj" = {
"@MMK_R_Che-cy" = -33;
"@MMK_R_Cheabkhasian-cy" = -21;
"@MMK_R_Ezh" = -5;
"@MMK_R_S" = -4;
"@MMK_R_T" = -52;
"@MMK_R_U" = -3;
"@MMK_R_V" = -17;
"@MMK_R_X" = -29;
"@MMK_R_Y" = -35;
"@MMK_R_backslash" = -62;
"@MMK_R_ezhcaron" = -2;
"@MMK_R_one" = -2;
"@MMK_R_one.osf" = -2;
"@MMK_R_question" = 33;
"@MMK_R_reversedze-cy" = -2;
"@MMK_R_semisoftsign-cy" = -2;
};
"@MMK_L_M.ss01" = {
"@MMK_R_backslash" = -10;
"@MMK_R_one" = -1;
"@MMK_R_question" = -5;
"@MMK_R_quotedblleft" = -2;
"@MMK_R_trademark" = -10;
};
"@MMK_L_P" = {
"@MMK_R_A" = -45;
"@MMK_R_A.ss01" = -17;
"@MMK_R_B" = -10;
"@MMK_R_Che-cy" = -16;
"@MMK_R_Cheabkhasian-cy" = -13;
"@MMK_R_De-cy" = -47;
"@MMK_R_De-cy.ss01" = -33;
"@MMK_R_E.ss01" = -5;
"@MMK_R_El-cy.ss01" = -5;
"@MMK_R_Ezh" = -16;
"@MMK_R_I.ss01" = -10;
"@MMK_R_J" = -31;
"@MMK_R_J.ss01" = -42;
"@MMK_R_T" = -27;
"@MMK_R_U" = -17;
"@MMK_R_V" = -19;
"@MMK_R_X" = -25;
"@MMK_R_Y" = -10;
"@MMK_R_Z" = -12;
"@MMK_R_a" = -15;
"@MMK_R_a.sc" = -45;
"@MMK_R_a.sc.ss01" = -11;
"@MMK_R_ampersand" = -27;
"@MMK_R_backslash" = -20;
"@MMK_R_be-cy.loclSRB" = -22;
"@MMK_R_braceright" = -2;
"@MMK_R_c" = -11;
"@MMK_R_cheabkhasian-cy" = -16;
"@MMK_R_comma" = -26;
"@MMK_R_de-cy" = -33;
"@MMK_R_degree" = 20;
"@MMK_R_e.sc.ss01" = -10;
"@MMK_R_eight" = -9;
"@MMK_R_ezhcaron" = -18;
"@MMK_R_five" = -10;
"@MMK_R_four" = -30;
"@MMK_R_four.osf" = -62;
"@MMK_R_i" = -5;
"@MMK_R_j" = -10;
"@MMK_R_j.sc" = -10;
"@MMK_R_j.sc.ss01" = -10;
"@MMK_R_nine.osf" = 5;
"@MMK_R_one.osf" = 5;
"@MMK_R_parenright" = -2;
"@MMK_R_periodcentered" = -8;
"@MMK_R_periodcentered.case" = 11;
"@MMK_R_questiondown" = -47;
"@MMK_R_quotedblright" = 10;
"@MMK_R_reversedze-cy" = -17;
"@MMK_R_semisoftsign-cy" = -13;
"@MMK_R_seven.osf" = 5;
"@MMK_R_slash" = -42;
"@MMK_R_t" = 5;
"@MMK_R_t.sc" = 10;
"@MMK_R_te-cy" = -2;
"@MMK_R_three" = -15;
"@MMK_R_three.osf" = -2;
"@MMK_R_two" = -5;
"@MMK_R_underscore" = -38;
"@MMK_R_v" = -2;
"@MMK_R_x" = -31;
"@MMK_R_x.sc" = -10;
};
"@MMK_L_Pemiddlehook-cy" = {
"@MMK_R_A.ss01" = -2;
"@MMK_R_C" = -32;
"@MMK_R_Che-cy" = -47;
"@MMK_R_Cheabkhasian-cy" = -38;
"@MMK_R_De-cy" = -16;
"@MMK_R_Ezh" = -21;
"@MMK_R_S" = -16;
"@MMK_R_T" = -88;
"@MMK_R_T.ss01" = -7;
"@MMK_R_U" = -20;
"@MMK_R_V" = -49;
"@MMK_R_X" = -20;
"@MMK_R_Y" = -58;
"@MMK_R_Y.ss01" = -2;
"@MMK_R_braceright" = -2;
"@MMK_R_cheabkhasian-cy" = -25;
"@MMK_R_question" = -69;
"@MMK_R_quotedbl" = -34;
"@MMK_R_quotedblleft" = -32;
"@MMK_R_quotedblright" = -40;
"@MMK_R_semisoftsign-cy" = -12;
"@MMK_R_te-cy" = -28;
"@MMK_R_x" = -15;
};
"@MMK_L_R" = {
"@MMK_R_J" = -10;
"@MMK_R_J.ss01" = -30;
"@MMK_R_T" = -10;
"@MMK_R_X" = -20;
"@MMK_R_Y" = -10;
"@MMK_R_a" = -5;
"@MMK_R_a.sc" = -10;
"@MMK_R_backslash" = -20;
"@MMK_R_degree" = 15;
"@MMK_R_five.osf" = -5;
"@MMK_R_four" = -20;
"@MMK_R_j.sc.ss01" = 17;
"@MMK_R_periodcentered" = -4;
"@MMK_R_question" = -5;
"@MMK_R_questiondown" = -10;
"@MMK_R_quotedblleft" = 5;
"@MMK_R_seven.osf" = 5;
"@MMK_R_t" = 5;
"@MMK_R_t.sc" = 10;
"@MMK_R_three" = -2;
"@MMK_R_three.osf" = -3;
"@MMK_R_underscore" = 12;
};
"@MMK_L_S" = {
"@MMK_R_Che-cy" = -24;
"@MMK_R_Cheabkhasian-cy" = -34;
"@MMK_R_De-cy" = -16;
"@MMK_R_J.ss01" = -30;
"@MMK_R_T" = -10;
"@MMK_R_T.ss01" = -6;
"@MMK_R_X" = -11;
"@MMK_R_Y" = -15;
"@MMK_R_backslash" = -10;
"@MMK_R_be-cy.loclSRB" = 8;
"@MMK_R_cheabkhasian-cy" = -20;
"@MMK_R_colon" = -5;
"@MMK_R_comma" = 20;
"@MMK_R_degree" = -15;
"@MMK_R_exclamdown" = -4;
"@MMK_R_ezhcaron" = -13;
"@MMK_R_four" = 10;
"@MMK_R_four.osf" = 5;
"@MMK_R_j.sc.ss01" = -25;
"@MMK_R_nine" = -10;
"@MMK_R_one" = -10;
"@MMK_R_one.osf" = -10;
"@MMK_R_ordfeminine" = -20;
"@MMK_R_periodcentered" = 12;
"@MMK_R_question" = -20;
"@MMK_R_questiondown" = -10;
"@MMK_R_quotedbl" = -30;
"@MMK_R_quotedblleft" = -25;
"@MMK_R_quotedblright" = -10;
"@MMK_R_semisoftsign-cy" = -15;
"@MMK_R_seven" = -10;
"@MMK_R_seven.osf" = -4;
"@MMK_R_t.sc" = -18;
"@MMK_R_te-cy" = -14;
"@MMK_R_three" = -2;
"@MMK_R_three.osf" = -13;
"@MMK_R_tshe-cy" = 14;
"@MMK_R_two.osf" = -10;
"@MMK_R_underscore" = -20;
"@MMK_R_v" = -10;
"@MMK_R_v.sc" = -10;
"@MMK_R_x" = -10;
"@MMK_R_x.sc" = -10;
"@MMK_R_y.sc" = -20;
};
"@MMK_L_Softsign-cy" = {
"@MMK_R_A" = -17;
"@MMK_R_A.ss01" = -2;
"@MMK_R_Che-cy" = -25;
"@MMK_R_Cheabkhasian-cy" = -27;
"@MMK_R_De-cy" = -17;
"@MMK_R_Ezh" = -20;
"@MMK_R_J" = -8;
"@MMK_R_J.ss01" = -25;
"@MMK_R_S" = -16;
"@MMK_R_T" = -77;
"@MMK_R_T.ss01" = -48;
"@MMK_R_V" = -46;
"@MMK_R_X" = -39;
"@MMK_R_Y" = -52;
"@MMK_R_cheabkhasian-cy" = -15;
"@MMK_R_comma" = -6;
"@MMK_R_de-cy" = -15;
"@MMK_R_ezhcaron" = -15;
"@MMK_R_parenright" = -3;
"@MMK_R_question" = -36;
"@MMK_R_quotedbl" = -26;
"@MMK_R_quotedblleft" = -6;
"@MMK_R_quotedblright" = -22;
"@MMK_R_semisoftsign-cy" = -19;
"@MMK_R_te-cy" = -21;
"@MMK_R_tshe-cy" = -14;
"@MMK_R_v" = -20;
"@MMK_R_x" = -23;
};
"@MMK_L_T" = {
"@MMK_R_A" = -35;
"@MMK_R_A.ss01" = -11;
"@MMK_R_C" = -10;
"@MMK_R_Che-cy" = -3;
"@MMK_R_Cheabkhasian-cy" = -7;
"@MMK_R_De-cy" = -39;
"@MMK_R_De-cy.ss01" = -55;
"@MMK_R_E.ss01" = -1;
"@MMK_R_El-cy.ss01" = -6;
"@MMK_R_J" = -10;
"@MMK_R_J.ss01" = -10;
"@MMK_R_S" = -2;
"@MMK_R_T" = 10;
"@MMK_R_U" = -11;
"@MMK_R_V" = -17;
"@MMK_R_X" = -30;
"@MMK_R_Y" = -17;
"@MMK_R_a" = -26;
"@MMK_R_a.sc" = -59;
"@MMK_R_a.sc.ss01" = -21;
"@MMK_R_ampersand" = -23;
"@MMK_R_b.sc" = -2;
"@MMK_R_backslash" = 30;
"@MMK_R_be-cy.loclSRB" = -20;
"@MMK_R_braceright" = 20;
"@MMK_R_braceright.case" = 17;
"@MMK_R_c" = -55;
"@MMK_R_c.sc" = -34;
"@MMK_R_cheabkhasian-cy" = -102;
"@MMK_R_colon" = -10;
"@MMK_R_comma" = -34;
"@MMK_R_de-cy" = -62;
"@MMK_R_degree" = 40;
"@MMK_R_e.sc.ss01" = -29;
"@MMK_R_eight" = -10;
"@MMK_R_exclam" = 20;
"@MMK_R_exclamdown" = -20;
"@MMK_R_ezhcaron" = -29;
"@MMK_R_f.sc.ss01" = -19;
"@MMK_R_five" = -9;
"@MMK_R_five.osf" = -12;
"@MMK_R_four" = -82;
"@MMK_R_four.osf" = -78;
"@MMK_R_guillemetright" = -18;
"@MMK_R_guillemetright.case" = -3;
"@MMK_R_hardsign-cy.ss01" = -9;
"@MMK_R_i" = -11;
"@MMK_R_i.sc.ss01" = -2;
"@MMK_R_j" = 51;
"@MMK_R_j.sc" = -9;
"@MMK_R_j.sc.ss01" = -3;
"@MMK_R_nine.osf" = -11;
"@MMK_R_one" = 40;
"@MMK_R_one.osf" = 27;
"@MMK_R_ordfeminine" = 30;
"@MMK_R_paragraph" = 30;
"@MMK_R_parenleft" = -4;
"@MMK_R_periodcentered" = -38;
"@MMK_R_periodcentered.case" = -19;
"@MMK_R_question" = 25;
"@MMK_R_questiondown" = -48;
"@MMK_R_quotedbl" = 17;
"@MMK_R_quotedblleft" = 22;
"@MMK_R_quotedblright" = 22;
"@MMK_R_reversedze-cy" = -35;
"@MMK_R_s" = -36;
"@MMK_R_s.sc" = -17;
"@MMK_R_semisoftsign-cy" = -8;
"@MMK_R_seven" = 20;
"@MMK_R_seven.osf" = 4;
"@MMK_R_slash" = -20;
"@MMK_R_t" = 8;
"@MMK_R_t.sc" = 25;
"@MMK_R_te-cy" = -5;
"@MMK_R_three" = 10;
"@MMK_R_three.osf" = 2;
"@MMK_R_trademark" = 50;
"@MMK_R_tshe-cy" = 57;
"@MMK_R_two" = 27;
"@MMK_R_two.osf" = -12;
"@MMK_R_u" = -11;
"@MMK_R_u.sc" = -2;
"@MMK_R_v" = -31;
"@MMK_R_v.sc" = 23;
"@MMK_R_x" = -31;
"@MMK_R_x.sc" = 15;
"@MMK_R_y.sc" = 23;
"@MMK_R_y.sc.ss01" = -3;
"@MMK_R_z" = -10;
"@MMK_R_z.sc" = -2;
"@MMK_R_zero" = -20;
"@MMK_R_zero.osf" = -30;
};
"@MMK_L_T.ss01" = {
"@MMK_R_A" = -40;
"@MMK_R_A.ss01" = -10;
"@MMK_R_C" = -10;
"@MMK_R_De-cy" = -3;
"@MMK_R_De-cy.ss01" = -43;
"@MMK_R_E.ss01" = -10;
"@MMK_R_El-cy.ss01" = -3;
"@MMK_R_J.ss01" = -2;
"@MMK_R_V" = 12;
"@MMK_R_X" = -18;
"@MMK_R_Y" = 20;
"@MMK_R_a" = -30;
"@MMK_R_a.sc" = -63;
"@MMK_R_a.sc.ss01" = -36;
"@MMK_R_ampersand" = -30;
"@MMK_R_b.sc" = -11;
"@MMK_R_backslash" = 20;
"@MMK_R_be-cy.loclSRB" = -20;
"@MMK_R_braceright" = 25;
"@MMK_R_braceright.case" = 17;
"@MMK_R_c" = -55;
"@MMK_R_c.sc" = -39;
"@MMK_R_cheabkhasian-cy" = -59;
"@MMK_R_colon" = -10;
"@MMK_R_comma" = -34;
"@MMK_R_dagger" = -10;
"@MMK_R_de-cy" = -23;
"@MMK_R_degree" = 30;
"@MMK_R_e.sc.ss01" = -38;
"@MMK_R_eight" = -5;
"@MMK_R_er-cy.ss01" = -48;
"@MMK_R_exclam" = 20;
"@MMK_R_exclamdown" = -20;
"@MMK_R_ezhcaron" = -7;
"@MMK_R_f.sc.ss01" = -34;
"@MMK_R_five" = 2;
"@MMK_R_four" = -80;
"@MMK_R_four.osf" = -77;
"@MMK_R_ghestroke-cy" = -8;
"@MMK_R_guillemetright" = -18;
"@MMK_R_guillemetright.case" = -12;
"@MMK_R_hardsign-cy.ss01" = -11;
"@MMK_R_i" = -10;
"@MMK_R_i.sc.ss01" = -2;
"@MMK_R_j" = -10;
"@MMK_R_j.sc" = -10;
"@MMK_R_j.sc.ss01" = -12;
"@MMK_R_nine.osf" = -12;
"@MMK_R_one" = 40;
"@MMK_R_one.osf" = 28;
"@MMK_R_ordfeminine" = 40;
"@MMK_R_paragraph" = 33;
"@MMK_R_parenleft" = -3;
"@MMK_R_periodcentered" = -38;
"@MMK_R_periodcentered.case" = -39;
"@MMK_R_question" = 30;
"@MMK_R_questiondown" = -47;
"@MMK_R_quotedbl" = 3;
"@MMK_R_quotedblleft" = 23;
"@MMK_R_quotedblright" = 32;
"@MMK_R_reversedze-cy" = -15;
"@MMK_R_s" = -38;
"@MMK_R_s.sc" = -25;
"@MMK_R_semisoftsign-cy" = -14;
"@MMK_R_seven" = 30;
"@MMK_R_seven.osf" = 8;
"@MMK_R_slash" = -20;
"@MMK_R_t.sc" = 17;
"@MMK_R_three" = 10;
"@MMK_R_three.osf" = -2;
"@MMK_R_trademark" = 50;
"@MMK_R_two" = 20;
"@MMK_R_two.osf" = -3;
"@MMK_R_u" = -16;
"@MMK_R_u.sc" = -10;
"@MMK_R_underscore" = -2;
"@MMK_R_v.sc" = 23;
"@MMK_R_x" = -1;
"@MMK_R_x.sc" = 7;
"@MMK_R_y.sc" = 31;
"@MMK_R_y.sc.ss01" = -3;
"@MMK_R_z" = -20;
"@MMK_R_z.sc" = -10;
"@MMK_R_zero" = -15;
"@MMK_R_zero.osf" = -35;
};
"@MMK_L_Thorn" = {
"@MMK_R_A" = -30;
"@MMK_R_I.ss01" = -15;
"@MMK_R_J" = -40;
"@MMK_R_J.ss01" = -62;
"@MMK_R_T" = -25;
"@MMK_R_T.ss01" = -12;
"@MMK_R_V" = -10;
"@MMK_R_X" = -30;
"@MMK_R_Y" = -30;
"@MMK_R_Z" = -16;
"@MMK_R_a" = -10;
"@MMK_R_a.sc" = -30;
"@MMK_R_backslash" = -40;
"@MMK_R_comma" = -21;
"@MMK_R_e.sc.ss01" = -10;
"@MMK_R_five" = -10;
"@MMK_R_four.osf" = -30;
"@MMK_R_j" = -10;
"@MMK_R_j.sc" = -10;
"@MMK_R_j.sc.ss01" = -20;
"@MMK_R_one" = -20;
"@MMK_R_periodcentered.case" = 10;
"@MMK_R_question" = -30;
"@MMK_R_questiondown" = -25;
"@MMK_R_slash" = -30;
"@MMK_R_t" = 5;
"@MMK_R_three" = -20;
"@MMK_R_three.osf" = -5;
"@MMK_R_trademark" = -8;
"@MMK_R_two" = -25;
"@MMK_R_underscore" = -30;
"@MMK_R_x" = -10;
"@MMK_R_x.sc" = -20;
"@MMK_R_y.sc" = -20;
};
"@MMK_L_Tshe-cy" = {
"@MMK_R_C" = -20;
"@MMK_R_Che-cy" = -43;
"@MMK_R_Cheabkhasian-cy" = -53;
"@MMK_R_S" = -2;
"@MMK_R_T" = -63;
"@MMK_R_T.ss01" = -9;
"@MMK_R_U" = -40;
"@MMK_R_V" = -53;
"@MMK_R_X" = -20;
"@MMK_R_Y" = -57;
"@MMK_R_be-cy.loclSRB" = -1;
"@MMK_R_cheabkhasian-cy" = -23;
"@MMK_R_de-cy" = -2;
"@MMK_R_question" = -48;
"@MMK_R_quotedbl" = -43;
"@MMK_R_quotedblleft" = -48;
"@MMK_R_quotedblright" = -37;
"@MMK_R_semisoftsign-cy" = -10;
"@MMK_R_te-cy" = -23;
"@MMK_R_v" = -24;
};
"@MMK_L_Uhorn" = {
"@MMK_R_A" = -15;
"@MMK_R_J.ss01" = -4;
"@MMK_R_X" = -2;
"@MMK_R_Y" = -2;
"@MMK_R_a" = -17;
"@MMK_R_a.sc" = -22;
"@MMK_R_a.sc.ss01" = -17;
"@MMK_R_ampersand" = -17;
"@MMK_R_b" = 21;
"@MMK_R_b.sc" = -17;
"@MMK_R_backslash" = 111;
"@MMK_R_braceright" = 66;
"@MMK_R_braceright.case" = 66;
"@MMK_R_c" = -17;
"@MMK_R_c.sc" = -17;
"@MMK_R_colon" = -17;
"@MMK_R_comma" = -21;
"@MMK_R_dagger" = -20;
"@MMK_R_degree" = 25;
"@MMK_R_e.sc.ss01" = -17;
"@MMK_R_eight" = -17;
"@MMK_R_exclam" = 41;
"@MMK_R_exclamdown" = -17;
"@MMK_R_f.sc.ss01" = -17;
"@MMK_R_four" = -17;
"@MMK_R_four.osf" = -24;
"@MMK_R_guillemetright.case" = -17;
"@MMK_R_i" = -17;
"@MMK_R_i.sc.ss01" = -17;
"@MMK_R_j" = 32;
"@MMK_R_j.sc" = -17;
"@MMK_R_j.sc.ss01" = -17;
"@MMK_R_nine.osf" = -17;
"@MMK_R_one" = 59;
"@MMK_R_ordfeminine" = 37;
"@MMK_R_paragraph" = 25;
"@MMK_R_parenright.case" = 70;
"@MMK_R_periodcentered" = -17;
"@MMK_R_periodcentered.case" = -17;
"@MMK_R_question" = 33;
"@MMK_R_questiondown" = -18;
"@MMK_R_quotedblright" = 41;
"@MMK_R_s" = -17;
"@MMK_R_s.sc" = -17;
"@MMK_R_seven" = 43;
"@MMK_R_slash" = -25;
"@MMK_R_t.sc" = -17;
"@MMK_R_three" = 33;
"@MMK_R_three.osf" = -3;
"@MMK_R_trademark" = 79;
"@MMK_R_two" = 8;
"@MMK_R_two.osf" = -17;
"@MMK_R_u" = -17;
"@MMK_R_u.sc" = -17;
"@MMK_R_underscore" = -25;
"@MMK_R_v" = -17;
"@MMK_R_x" = -17;
"@MMK_R_y.sc.ss01" = -17;
"@MMK_R_z" = -17;
"@MMK_R_z.sc" = -17;
"@MMK_R_zero" = -17;
"@MMK_R_zero.osf" = -17;
};
"@MMK_L_V" = {
"@MMK_R_A" = -39;
"@MMK_R_A.ss01" = -20;
"@MMK_R_B" = -15;
"@MMK_R_C" = -24;
"@MMK_R_Cheabkhasian-cy" = -22;
"@MMK_R_De-cy" = -28;
"@MMK_R_De-cy.ss01" = -5;
"@MMK_R_E.ss01" = -24;
"@MMK_R_El-cy.ss01" = -5;
"@MMK_R_Ezh" = -13;
"@MMK_R_Germandbls" = -20;
"@MMK_R_J" = -15;
"@MMK_R_J.ss01" = -25;
"@MMK_R_S" = -15;
"@MMK_R_T" = -17;
"@MMK_R_T.ss01" = 12;
"@MMK_R_X" = -28;
"@MMK_R_Y" = -28;
"@MMK_R_Z" = -10;
"@MMK_R_a" = -55;
"@MMK_R_a.sc" = -66;
"@MMK_R_a.sc.ss01" = -36;
"@MMK_R_ampersand" = -22;
"@MMK_R_b.sc" = -18;
"@MMK_R_backslash" = 30;
"@MMK_R_be-cy.loclSRB" = -24;
"@MMK_R_braceright" = 28;
"@MMK_R_braceright.case" = 25;
"@MMK_R_c" = -55;
"@MMK_R_c.sc" = -43;
"@MMK_R_cheabkhasian-cy" = -63;
"@MMK_R_colon" = -28;
"@MMK_R_comma" = -39;
"@MMK_R_dagger" = -20;
"@MMK_R_de-cy" = -47;
"@MMK_R_degree" = 22;
"@MMK_R_e.sc.ss01" = -49;
"@MMK_R_eight" = -19;
"@MMK_R_exclam" = 10;
"@MMK_R_exclamdown" = -30;
"@MMK_R_ezhcaron" = -42;
"@MMK_R_f.sc.ss01" = -54;
"@MMK_R_five" = -13;
"@MMK_R_five.osf" = -23;
"@MMK_R_four" = -78;
"@MMK_R_four.osf" = -100;
"@MMK_R_guillemetright" = -18;
"@MMK_R_guillemetright.case" = -31;
"@MMK_R_i" = -35;
"@MMK_R_i.sc.ss01" = -25;
"@MMK_R_j" = -20;
"@MMK_R_j.sc" = -34;
"@MMK_R_j.sc.ss01" = -40;
"@MMK_R_nine" = -9;
"@MMK_R_nine.osf" = -33;
"@MMK_R_one" = 30;
"@MMK_R_ordfeminine" = 31;
"@MMK_R_paragraph" = 13;
"@MMK_R_parenright" = 17;
"@MMK_R_periodcentered" = -28;
"@MMK_R_periodcentered.case" = -48;
"@MMK_R_questiondown" = -67;
"@MMK_R_quotedblleft" = 5;
"@MMK_R_quotedblright" = 23;
"@MMK_R_reversedze-cy" = -39;
"@MMK_R_s" = -63;
"@MMK_R_s.sc" = -48;
"@MMK_R_semisoftsign-cy" = -35;
"@MMK_R_seven" = 10;
"@MMK_R_seven.osf" = -20;
"@MMK_R_slash" = -40;
"@MMK_R_t" = -8;
"@MMK_R_t.sc" = -13;
"@MMK_R_te-cy" = -20;
"@MMK_R_three" = 8;
"@MMK_R_three.osf" = -15;
"@MMK_R_trademark" = 40;
"@MMK_R_tshe-cy" = 51;
"@MMK_R_two.osf" = -24;
"@MMK_R_u" = -34;
"@MMK_R_u.sc" = -24;
"@MMK_R_underscore" = -10;
"@MMK_R_v" = -19;
"@MMK_R_x" = -31;
"@MMK_R_x.sc" = -20;
"@MMK_R_y.sc.ss01" = -25;
"@MMK_R_z" = -33;
"@MMK_R_z.sc" = -20;
"@MMK_R_zero" = -25;
"@MMK_R_zero.osf" = -43;
};
"@MMK_L_X" = {
"@MMK_R_A" = -38;
"@MMK_R_A.ss01" = -15;
"@MMK_R_B" = -21;
"@MMK_R_C" = -25;
"@MMK_R_Che-cy" = -39;
"@MMK_R_Cheabkhasian-cy" = -67;
"@MMK_R_De-cy" = -2;
"@MMK_R_E.ss01" = -15;
"@MMK_R_Ezh" = -47;
"@MMK_R_J.ss01" = -23;
"@MMK_R_S" = -11;
"@MMK_R_T" = -30;
"@MMK_R_T.ss01" = -18;
"@MMK_R_U" = -10;
"@MMK_R_V" = -28;
"@MMK_R_X" = -5;
"@MMK_R_Y" = -30;
"@MMK_R_Y.ss01" = -16;
"@MMK_R_Z" = -10;
"@MMK_R_a" = -19;
"@MMK_R_a.sc" = -36;
"@MMK_R_a.sc.ss01" = -2;
"@MMK_R_ampersand" = -20;
"@MMK_R_b.sc" = -9;
"@MMK_R_be-cy.loclSRB" = -29;
"@MMK_R_braceright" = 8;
"@MMK_R_braceright.case" = 8;
"@MMK_R_c" = -30;
"@MMK_R_c.sc" = -34;
"@MMK_R_cheabkhasian-cy" = -102;
"@MMK_R_colon" = -9;
"@MMK_R_de-cy" = -3;
"@MMK_R_degree" = -20;
"@MMK_R_e.sc.ss01" = -33;
"@MMK_R_eight" = -24;
"@MMK_R_exclamdown" = -10;
"@MMK_R_ezhcaron" = -35;
"@MMK_R_f.sc.ss01" = -10;
"@MMK_R_five.osf" = -10;
"@MMK_R_four" = -58;
"@MMK_R_four.osf" = -12;
"@MMK_R_guillemetright" = -17;
"@MMK_R_guillemetright.case" = -33;
"@MMK_R_i" = -10;
"@MMK_R_j.sc" = 10;
"@MMK_R_j.sc.ss01" = 33;
"@MMK_R_nine" = -19;
"@MMK_R_nine.osf" = -25;
"@MMK_R_one" = 10;
"@MMK_R_one.osf" = -19;
"@MMK_R_ordfeminine" = -10;
"@MMK_R_parenleft" = -2;
"@MMK_R_periodcentered" = -23;
"@MMK_R_periodcentered.case" = -49;
"@MMK_R_question" = -30;
"@MMK_R_questiondown" = 8;
"@MMK_R_quotedblleft" = -15;
"@MMK_R_quotedblright" = -5;
"@MMK_R_reversedze-cy" = -37;
"@MMK_R_s" = -20;
"@MMK_R_s.sc" = -10;
"@MMK_R_semisoftsign-cy" = -35;
"@MMK_R_seven" = -10;
"@MMK_R_seven.osf" = -60;
"@MMK_R_slash" = 12;
"@MMK_R_t" = -28;
"@MMK_R_t.sc" = -38;
"@MMK_R_te-cy" = -62;
"@MMK_R_trademark" = 30;
"@MMK_R_tshe-cy" = 34;
"@MMK_R_u" = -29;
"@MMK_R_u.sc" = -25;
"@MMK_R_underscore" = 42;
"@MMK_R_v" = -37;
"@MMK_R_v.sc" = -15;
"@MMK_R_x" = -47;
"@MMK_R_x.sc" = -25;
"@MMK_R_y.sc" = -20;
"@MMK_R_y.sc.ss01" = -35;
"@MMK_R_z" = -18;
"@MMK_R_z.sc" = -2;
"@MMK_R_zero" = -38;
"@MMK_R_zero.osf" = -33;
};
"@MMK_L_Y" = {
"@MMK_R_A" = -44;
"@MMK_R_A.ss01" = -29;
"@MMK_R_B" = -3;
"@MMK_R_C" = -30;
"@MMK_R_Che-cy" = -3;
"@MMK_R_Cheabkhasian-cy" = -33;
"@MMK_R_De-cy" = -38;
"@MMK_R_De-cy.ss01" = -5;
"@MMK_R_E.ss01" = -14;
"@MMK_R_El-cy.ss01" = -5;
"@MMK_R_J" = -10;
"@MMK_R_J.ss01" = -20;
"@MMK_R_S" = -15;
"@MMK_R_T" = -17;
"@MMK_R_T.ss01" = 20;
"@MMK_R_U" = -10;
"@MMK_R_V" = -28;
"@MMK_R_X" = -30;
"@MMK_R_Y" = -8;
"@MMK_R_a" = -65;
"@MMK_R_a.sc" = -73;
"@MMK_R_a.sc.ss01" = -41;
"@MMK_R_ampersand" = -50;
"@MMK_R_b.sc" = -20;
"@MMK_R_backslash" = 30;
"@MMK_R_be-cy.loclSRB" = -4;
"@MMK_R_braceright" = 37;
"@MMK_R_braceright.case" = 25;
"@MMK_R_c" = -60;
"@MMK_R_c.sc" = -64;
"@MMK_R_cheabkhasian-cy" = -97;
"@MMK_R_colon" = -39;
"@MMK_R_comma" = -39;
"@MMK_R_dagger" = -20;
"@MMK_R_de-cy" = -63;
"@MMK_R_degree" = 20;
"@MMK_R_e.sc.ss01" = -78;
"@MMK_R_eight" = -24;
"@MMK_R_exclam" = 20;
"@MMK_R_exclamdown" = -40;
"@MMK_R_ezhcaron" = -55;
"@MMK_R_f.sc.ss01" = -64;
"@MMK_R_five" = -23;
"@MMK_R_five.osf" = -33;
"@MMK_R_four" = -98;
"@MMK_R_four.osf" = -97;
"@MMK_R_guillemetright" = -27;
"@MMK_R_guillemetright.case" = -33;
"@MMK_R_i" = -36;
"@MMK_R_i.sc.ss01" = -20;
"@MMK_R_j" = 43;
"@MMK_R_j.sc" = -44;
"@MMK_R_j.sc.ss01" = -60;
"@MMK_R_nine" = -19;
"@MMK_R_nine.osf" = -45;
"@MMK_R_one" = 38;
"@MMK_R_ordfeminine" = 20;
"@MMK_R_paragraph" = 13;
"@MMK_R_parenleft" = -3;
"@MMK_R_parenright" = 13;
"@MMK_R_periodcentered" = -34;
"@MMK_R_periodcentered.case" = -39;
"@MMK_R_questiondown" = -77;
"@MMK_R_quotedblleft" = 3;
"@MMK_R_quotedblright" = 22;
"@MMK_R_reversedze-cy" = -67;
"@MMK_R_s" = -73;
"@MMK_R_s.sc" = -53;
"@MMK_R_section" = -20;
"@MMK_R_semisoftsign-cy" = -35;
"@MMK_R_seven" = 20;
"@MMK_R_seven.osf" = -25;
"@MMK_R_slash" = -20;
"@MMK_R_t" = -20;
"@MMK_R_t.sc" = -10;
"@MMK_R_te-cy" = -28;
"@MMK_R_three" = 5;
"@MMK_R_three.osf" = -30;
"@MMK_R_trademark" = 50;
"@MMK_R_tshe-cy" = 59;
"@MMK_R_two" = -10;
"@MMK_R_two.osf" = -35;
"@MMK_R_u" = -35;
"@MMK_R_u.sc" = -24;
"@MMK_R_underscore" = -2;
"@MMK_R_v" = -44;
"@MMK_R_v.sc" = -2;
"@MMK_R_x" = -50;
"@MMK_R_x.sc" = -30;
"@MMK_R_y.sc" = -10;
"@MMK_R_y.sc.ss01" = -40;
"@MMK_R_z" = -38;
"@MMK_R_z.sc" = -20;
"@MMK_R_zero" = -38;
"@MMK_R_zero.osf" = -48;
};
"@MMK_L_Yat-cy" = {
"@MMK_R_Che-cy" = -17;
"@MMK_R_T" = -68;
"@MMK_R_T.ss01" = -33;
"@MMK_R_V" = -45;
"@MMK_R_Y" = -51;
"@MMK_R_cheabkhasian-cy" = -13;
"@MMK_R_quotedblleft" = -5;
"@MMK_R_quotedblright" = -22;
"@MMK_R_semisoftsign-cy" = -19;
};
"@MMK_L_a" = {
"@MMK_R_Che-cy" = -47;
"@MMK_R_Cheabkhasian-cy" = -36;
"@MMK_R_backslash" = -62;
"@MMK_R_be-cy.loclSRB" = -15;
"@MMK_R_c" = 8;
"@MMK_R_cheabkhasian-cy" = -13;
"@MMK_R_degree" = -12;
"@MMK_R_nine" = -3;
"@MMK_R_one" = -17;
"@MMK_R_one.osf" = -10;
"@MMK_R_ordfeminine" = -22;
"@MMK_R_paragraph" = -13;
"@MMK_R_percent" = -26;
"@MMK_R_question" = -42;
"@MMK_R_quotedblleft" = -7;
"@MMK_R_quotedblright" = -2;
"@MMK_R_semisoftsign-cy" = -11;
"@MMK_R_seven" = -17;
"@MMK_R_te-cy" = -29;
"@MMK_R_three.osf" = -12;
"@MMK_R_trademark" = -22;
"@MMK_R_two" = -5;
"@MMK_R_v" = -10;
};
"@MMK_L_a.sc" = {
"@MMK_R_C" = -2;
"@MMK_R_backslash" = -67;
"@MMK_R_c.sc" = -10;
"@MMK_R_comma" = 20;
"@MMK_R_degree" = -107;
"@MMK_R_exclam" = 10;
"@MMK_R_exclamdown" = 10;
"@MMK_R_exclamdown.sc" = 8;
"@MMK_R_five" = 8;
"@MMK_R_four" = -11;
"@MMK_R_four.osf" = 15;
"@MMK_R_guillemetright" = 2;
"@MMK_R_guillemetright.sc" = -10;
"@MMK_R_j.sc" = 15;
"@MMK_R_nine" = -2;
"@MMK_R_nine.osf" = -10;
"@MMK_R_one" = -48;
"@MMK_R_one.osf" = -36;
"@MMK_R_ordfeminine" = -97;
"@MMK_R_paragraph" = -57;
"@MMK_R_periodcentered" = -13;
"@MMK_R_question" = -60;
"@MMK_R_question.sc" = -50;
"@MMK_R_questiondown" = 27;
"@MMK_R_quotedblleft" = -38;
"@MMK_R_quotedblleft.sc" = -38;
"@MMK_R_quotedblright" = -38;
"@MMK_R_quotedblright.sc" = -38;
"@MMK_R_seven" = -48;
"@MMK_R_seven.osf" = -40;
"@MMK_R_slash" = 30;
"@MMK_R_t.sc" = -35;
"@MMK_R_three" = 17;
"@MMK_R_trademark" = -33;
"@MMK_R_two" = 8;
"@MMK_R_two.osf" = 8;
"@MMK_R_u.sc" = -15;
"@MMK_R_underscore" = 50;
"@MMK_R_v.sc" = -39;
"@MMK_R_x.sc" = -38;
"@MMK_R_y.sc" = -44;
"@MMK_R_y.sc.ss01" = -10;
"@MMK_R_zero" = -14;
"@MMK_R_zero.osf" = -9;
};
"@MMK_L_a.sc.ss01" = {
"@MMK_R_backslash" = -36;
"@MMK_R_degree" = -22;
"@MMK_R_one" = -8;
"@MMK_R_one.osf" = -2;
"@MMK_R_ordfeminine" = -10;
"@MMK_R_paragraph" = -2;
"@MMK_R_question" = -40;
"@MMK_R_question.sc" = -7;
"@MMK_R_quotedblleft" = -7;
"@MMK_R_quotedblleft.sc" = -2;
"@MMK_R_quotedblright" = -3;
"@MMK_R_quotedblright.sc" = -3;
"@MMK_R_seven" = -10;
"@MMK_R_seven.osf" = -2;
"@MMK_R_three.osf" = -3;
"@MMK_R_trademark" = -8;
};
"@MMK_L_ae" = {
"@MMK_R_Che-cy" = -21;
"@MMK_R_Cheabkhasian-cy" = -20;
"@MMK_R_De-cy" = -4;
"@MMK_R_T" = -92;
"@MMK_R_V" = -20;
"@MMK_R_X" = -39;
"@MMK_R_Y" = -50;
"@MMK_R_a" = -15;
"@MMK_R_backslash" = -62;
"@MMK_R_cheabkhasian-cy" = -10;
"@MMK_R_de-cy" = -2;
"@MMK_R_degree" = -15;
"@MMK_R_ezhcaron" = -3;
"@MMK_R_four.osf" = -10;
"@MMK_R_nine" = -10;
"@MMK_R_one" = -22;
"@MMK_R_one.osf" = -5;
"@MMK_R_ordfeminine" = -20;
"@MMK_R_paragraph" = -20;
"@MMK_R_percent" = -2;
"@MMK_R_periodcentered" = 10;
"@MMK_R_question" = -42;
"@MMK_R_questiondown" = -10;
"@MMK_R_quotedbl" = -13;
"@MMK_R_quotedblleft" = -7;
"@MMK_R_quotedblright" = 3;
"@MMK_R_semisoftsign-cy" = -12;
"@MMK_R_seven" = -26;
"@MMK_R_te-cy" = -17;
"@MMK_R_three" = -20;
"@MMK_R_three.osf" = -20;
"@MMK_R_trademark" = -30;
"@MMK_R_two" = -10;
"@MMK_R_two.osf" = -9;
"@MMK_R_underscore" = -9;
"@MMK_R_v" = -10;
"@MMK_R_x" = -15;
"@MMK_R_z" = -5;
};
"@MMK_L_ae.sc" = {
"@MMK_R_ampersand" = -2;
"@MMK_R_ampersand.sc" = -2;
"@MMK_R_backslash" = -42;
"@MMK_R_c.sc" = -1;
"@MMK_R_colon" = -2;
"@MMK_R_comma" = 5;
"@MMK_R_eight" = -2;
"@MMK_R_exclamdown" = -2;
"@MMK_R_four" = -3;
"@MMK_R_nine" = -3;
"@MMK_R_one.osf" = 8;
"@MMK_R_question.sc" = -2;
"@MMK_R_seven" = 8;
"@MMK_R_slash" = 10;
"@MMK_R_three" = -2;
"@MMK_R_underscore" = 22;
"@MMK_R_v.sc" = -2;
"@MMK_R_x.sc" = -2;
"@MMK_R_y.sc" = -2;
};
"@MMK_L_ampersand" = {
"@MMK_R_A" = 3;
"@MMK_R_J" = 23;
"@MMK_R_J.ss01" = -13;
"@MMK_R_T" = -22;
"@MMK_R_T.ss01" = -30;
"@MMK_R_V" = -20;
"@MMK_R_Y" = -40;
"@MMK_R_Y.ss01" = -3;
"@MMK_R_Z" = 3;
"@MMK_R_a" = 10;
"@MMK_R_a.sc" = 2;
"@MMK_R_ampersand" = -2;
"@MMK_R_backslash" = -80;
"@MMK_R_braceright" = -17;
"@MMK_R_colon" = -9;
"@MMK_R_comma" = -7;
"@MMK_R_degree" = -55;
"@MMK_R_exclam" = -14;
"@MMK_R_exclamdown" = -10;
"@MMK_R_exclamdown.sc" = -8;
"@MMK_R_four" = 8;
"@MMK_R_guillemetright.case" = -10;
"@MMK_R_guillemetright.sc" = -18;
"@MMK_R_j.sc" = 22;
"@MMK_R_j.sc.ss01" = 2;
"@MMK_R_one" = -30;
"@MMK_R_one.osf" = -20;
"@MMK_R_ordfeminine" = -30;
"@MMK_R_paragraph" = -63;
"@MMK_R_percent" = -40;
"@MMK_R_question" = -60;
"@MMK_R_question.sc" = -40;
"@MMK_R_questiondown" = -8;
"@MMK_R_questiondown.sc" = -10;
"@MMK_R_quotedbl" = -35;
"@MMK_R_quotedblleft" = -23;
"@MMK_R_quotedblright" = -7;
"@MMK_R_seven" = -12;
"@MMK_R_seven.osf" = -3;
"@MMK_R_slash" = 25;
"@MMK_R_t" = 10;
"@MMK_R_t.sc" = -18;
"@MMK_R_three" = -8;
"@MMK_R_three.osf" = -15;
"@MMK_R_trademark" = -38;
"@MMK_R_two" = -17;
"@MMK_R_two.osf" = 3;
"@MMK_R_underscore" = 11;
"@MMK_R_v" = -18;
"@MMK_R_v.sc" = -10;
"@MMK_R_x" = -8;
"@MMK_R_y.sc" = -25;
};
"@MMK_L_ampersand.sc" = {
"@MMK_R_a.sc" = 10;
"@MMK_R_backslash" = -70;
"@MMK_R_comma" = 2;
"@MMK_R_j.sc" = 23;
"@MMK_R_j.sc.ss01" = 3;
"@MMK_R_ordfeminine" = -28;
"@MMK_R_paragraph" = -75;
"@MMK_R_percent" = -32;
"@MMK_R_question" = -20;
"@MMK_R_question.sc" = -3;
"@MMK_R_quotedbl" = -7;
"@MMK_R_quotedblleft" = -20;
"@MMK_R_quotedblright" = -3;
"@MMK_R_slash" = 32;
"@MMK_R_t.sc" = -10;
"@MMK_R_underscore" = 9;
"@MMK_R_v.sc" = -10;
"@MMK_R_y.sc" = -30;
};
"@MMK_L_b" = {
"@MMK_R_A" = -25;
"@MMK_R_Che-cy" = -29;
"@MMK_R_Cheabkhasian-cy" = -32;
"@MMK_R_De-cy" = -2;
"@MMK_R_De-cy.ss01" = -2;
"@MMK_R_Ezh" = -21;
"@MMK_R_J.ss01" = -27;
"@MMK_R_T" = -56;
"@MMK_R_T.ss01" = -55;
"@MMK_R_U" = -5;
"@MMK_R_V" = -40;
"@MMK_R_X" = -25;
"@MMK_R_Y" = -43;
"@MMK_R_a" = -12;
"@MMK_R_backslash" = -62;
"@MMK_R_cheabkhasian-cy" = -18;
"@MMK_R_comma" = -3;
"@MMK_R_de-cy" = -10;
"@MMK_R_degree" = -19;
"@MMK_R_ezhcaron" = -13;
"@MMK_R_hardsign-cy.ss01" = -27;
"@MMK_R_nine" = -10;
"@MMK_R_one" = -22;
"@MMK_R_one.osf" = -5;
"@MMK_R_ordfeminine" = -12;
"@MMK_R_paragraph" = -21;
"@MMK_R_percent" = -22;
"@MMK_R_periodcentered" = 10;
"@MMK_R_question" = -42;
"@MMK_R_questiondown" = -10;
"@MMK_R_quotedbl" = -15;
"@MMK_R_quotedblleft" = -7;
"@MMK_R_quotedblright" = 3;
"@MMK_R_reversedze-cy" = -2;
"@MMK_R_semisoftsign-cy" = -19;
"@MMK_R_seven" = -22;
"@MMK_R_te-cy" = -20;
"@MMK_R_three" = -21;
"@MMK_R_three.osf" = -20;
"@MMK_R_trademark" = -30;
"@MMK_R_two" = -10;
"@MMK_R_two.osf" = -13;
"@MMK_R_underscore" = -22;
"@MMK_R_v" = -15;
"@MMK_R_x" = -16;
"@MMK_R_z" = -6;
};
"@MMK_L_b.sc" = {
"@MMK_R_backslash" = -52;
"@MMK_R_comma" = 10;
"@MMK_R_one" = -10;
"@MMK_R_one.osf" = -2;
"@MMK_R_question" = -30;
"@MMK_R_t.sc" = -10;
"@MMK_R_v.sc" = -5;
"@MMK_R_x.sc" = -10;
"@MMK_R_y.sc" = -15;
};
"@MMK_L_backslash" = {
"@MMK_R_A" = 30;
"@MMK_R_C" = -20;
"@MMK_R_J" = 30;
"@MMK_R_J.ss01" = 50;
"@MMK_R_T" = -20;
"@MMK_R_T.ss01" = -20;
"@MMK_R_U" = -10;
"@MMK_R_V" = -40;
"@MMK_R_X" = 20;
"@MMK_R_Y" = -20;
"@MMK_R_a.sc" = 30;
"@MMK_R_ampersand" = 12;
"@MMK_R_backslash" = -77;
"@MMK_R_braceright" = 47;
"@MMK_R_braceright.case" = 47;
"@MMK_R_c.sc" = -10;
"@MMK_R_colon" = 57;
"@MMK_R_comma" = 85;
"@MMK_R_degree" = -60;
"@MMK_R_exclam.sc" = 5;
"@MMK_R_exclamdown" = 40;
"@MMK_R_exclamdown.sc" = 5;
"@MMK_R_five" = 8;
"@MMK_R_five.osf" = 28;
"@MMK_R_florin" = 130;
"@MMK_R_four" = -2;
"@MMK_R_four.osf" = 8;
"@MMK_R_guillemetright" = 2;
"@MMK_R_guillemetright.sc" = 5;
"@MMK_R_j" = 120;
"@MMK_R_j.sc" = 20;
"@MMK_R_j.sc.ss01" = 60;
"@MMK_R_nine.osf" = 18;
"@MMK_R_one" = -20;
"@MMK_R_ordfeminine" = -128;
"@MMK_R_paragraph" = -30;
"@MMK_R_parenright" = 30;
"@MMK_R_parenright.case" = 63;
"@MMK_R_percent" = -10;
"@MMK_R_periodcentered.case" = -28;
"@MMK_R_question" = -60;
"@MMK_R_question.sc" = -5;
"@MMK_R_questiondown" = 30;
"@MMK_R_questiondown.sc" = 3;
"@MMK_R_quotedbl" = -60;
"@MMK_R_quotedbl.sc" = -30;
"@MMK_R_quotedblleft" = -43;
"@MMK_R_quotedblleft.sc" = -20;
"@MMK_R_quotedblright" = -43;
"@MMK_R_quotedblright.sc" = -20;
"@MMK_R_rupeeIndian" = -18;
"@MMK_R_section" = 30;
"@MMK_R_seven" = -50;
"@MMK_R_seven.osf" = -12;
"@MMK_R_slash" = 3;
"@MMK_R_t.sc" = -10;
"@MMK_R_three" = 10;
"@MMK_R_three.osf" = 38;
"@MMK_R_trademark" = -60;
"@MMK_R_two" = 10;
"@MMK_R_two.osf" = 12;
"@MMK_R_u.sc" = -5;
"@MMK_R_underscore" = 140;
"@MMK_R_v" = 20;
"@MMK_R_v.sc" = -30;
"@MMK_R_x.sc" = 20;
"@MMK_R_y.sc" = -10;
"@MMK_R_zero" = -20;
};
"@MMK_L_braceleft" = {
"@MMK_R_Che-cy" = -2;
"@MMK_R_Cheabkhasian-cy" = -20;
"@MMK_R_De-cy" = -18;
"@MMK_R_Ezh" = -2;
"@MMK_R_J.ss01" = 17;
"@MMK_R_T" = 20;
"@MMK_R_T.ss01" = 25;
"@MMK_R_V" = 28;
"@MMK_R_X" = 8;
"@MMK_R_Y" = 37;
"@MMK_R_Y.ss01" = -4;
"@MMK_R_Yat-cy.ss01" = -5;
"@MMK_R_a" = -2;
"@MMK_R_backslash" = 30;
"@MMK_R_cheabkhasian-cy" = -38;
"@MMK_R_de-cy" = -24;
"@MMK_R_exclam" = 8;
"@MMK_R_exclamdown" = 8;
"@MMK_R_ezhcaron" = -23;
"@MMK_R_florin" = 97;
"@MMK_R_four" = -18;
"@MMK_R_four.osf" = -2;
"@MMK_R_hardsign-cy.ss01" = -4;
"@MMK_R_j" = 100;
"@MMK_R_j.sc.ss01" = 25;
"@MMK_R_one" = 27;
"@MMK_R_one.osf" = 25;
"@MMK_R_ordfeminine" = 8;
"@MMK_R_paragraph" = 8;
"@MMK_R_parenright" = 17;
"@MMK_R_periodcentered" = -2;
"@MMK_R_question" = 17;
"@MMK_R_quotedbl" = 17;
"@MMK_R_reversedze-cy" = -20;
"@MMK_R_rupeeIndian" = 3;
"@MMK_R_semisoftsign-cy" = -22;
"@MMK_R_seven" = 20;
"@MMK_R_slash" = 47;
"@MMK_R_t.sc" = 17;
"@MMK_R_te-cy" = -2;
"@MMK_R_three" = 8;
"@MMK_R_three.osf" = 8;
"@MMK_R_trademark" = 57;
"@MMK_R_tshe-cy" = 54;
"@MMK_R_two" = 8;
"@MMK_R_underscore" = 37;
"@MMK_R_v.sc" = 25;
"@MMK_R_x.sc" = 8;
"@MMK_R_y.sc" = 33;
"@MMK_R_yen" = 33;
};
"@MMK_L_braceleft.case" = {
"@MMK_R_A" = 30;
"@MMK_R_J.ss01" = 27;
"@MMK_R_T" = 17;
"@MMK_R_T.ss01" = 17;
"@MMK_R_V" = 25;
"@MMK_R_X" = 8;
"@MMK_R_Y" = 25;
"@MMK_R_backslash" = 47;
"@MMK_R_exclam" = 8;
"@MMK_R_exclamdown" = 17;
"@MMK_R_florin" = 68;
"@MMK_R_four" = -20;
"@MMK_R_four.osf" = -3;
"@MMK_R_lira" = 8;
"@MMK_R_one" = 17;
"@MMK_R_parenright" = 17;
"@MMK_R_questiondown.sc" = -8;
"@MMK_R_quotedbl" = 8;
"@MMK_R_seven" = 17;
"@MMK_R_slash" = 47;
"@MMK_R_trademark" = 37;
"@MMK_R_underscore" = 37;
"@MMK_R_yen" = 30;
};
"@MMK_L_bracketright" = {
"@MMK_R_Che-cy" = -4;
"@MMK_R_Cheabkhasian-cy" = -17;
"@MMK_R_De-cy" = -2;
"@MMK_R_Ezh" = -3;
"@MMK_R_J.ss01" = -3;
"@MMK_R_T" = -4;
"@MMK_R_T.ss01" = -4;
"@MMK_R_X" = -5;
"@MMK_R_Y" = -2;
"@MMK_R_Yat-cy.ss01" = -5;
"@MMK_R_cheabkhasian-cy" = -17;
"@MMK_R_de-cy" = -11;
"@MMK_R_ezhcaron" = -2;
"@MMK_R_hardsign-cy.ss01" = -4;
"@MMK_R_reversedze-cy" = -2;
"@MMK_R_tshe-cy" = 10;
};
"@MMK_L_c" = {
"@MMK_R_A.ss01" = -16;
"@MMK_R_C" = -8;
"@MMK_R_Che-cy" = -8;
"@MMK_R_Cheabkhasian-cy" = -17;
"@MMK_R_T" = -61;
"@MMK_R_U" = -17;
"@MMK_R_V" = -33;
"@MMK_R_Y" = -49;
"@MMK_R_ampersand" = -13;
"@MMK_R_b" = -2;
"@MMK_R_backslash" = -42;
"@MMK_R_be-cy.loclSRB" = -14;
"@MMK_R_braceright" = -2;
"@MMK_R_bracketleft" = -2;
"@MMK_R_c" = -6;
"@MMK_R_cheabkhasian-cy" = -22;
"@MMK_R_colon" = 9;
"@MMK_R_comma" = 20;
"@MMK_R_dagger" = 20;
"@MMK_R_de-cy" = -4;
"@MMK_R_degree" = 19;
"@MMK_R_eight" = -5;
"@MMK_R_ezhcaron" = -16;
"@MMK_R_four" = -5;
"@MMK_R_four.osf" = -2;
"@MMK_R_guillemetright.sc" = 20;
"@MMK_R_nine" = -2;
"@MMK_R_nine.osf" = 8;
"@MMK_R_one" = -21;
"@MMK_R_one.osf" = 5;
"@MMK_R_ordfeminine" = 18;
"@MMK_R_parenright" = -24;
"@MMK_R_periodcentered" = -25;
"@MMK_R_question" = -22;
"@MMK_R_questiondown" = -2;
"@MMK_R_quotedblleft" = 23;
"@MMK_R_quotedblright" = 28;
"@MMK_R_section" = -2;
"@MMK_R_semisoftsign-cy" = -1;
"@MMK_R_seven" = -3;
"@MMK_R_seven.osf" = 10;
"@MMK_R_t" = 9;
"@MMK_R_te-cy" = 2;
"@MMK_R_three" = -12;
"@MMK_R_three.osf" = -12;
"@MMK_R_trademark" = -11;
"@MMK_R_two" = -2;
"@MMK_R_v" = -10;
"@MMK_R_x" = -12;
"@MMK_R_z" = -2;
"@MMK_R_zero" = -2;
"@MMK_R_zero.osf" = -10;
};
"@MMK_L_c.sc" = {
"@MMK_R_C" = -2;
"@MMK_R_a.sc" = -12;
"@MMK_R_ampersand" = -20;
"@MMK_R_ampersand.sc" = -2;
"@MMK_R_backslash" = -42;
"@MMK_R_c.sc" = -15;
"@MMK_R_degree" = 18;
"@MMK_R_eight" = -11;
"@MMK_R_exclamdown" = -10;
"@MMK_R_five" = -8;
"@MMK_R_five.osf" = -25;
"@MMK_R_four" = -13;
"@MMK_R_four.osf" = -9;
"@MMK_R_nine" = -2;
"@MMK_R_nine.osf" = -6;
"@MMK_R_one" = -2;
"@MMK_R_one.osf" = 8;
"@MMK_R_ordfeminine" = 12;
"@MMK_R_periodcentered" = -18;
"@MMK_R_question" = -30;
"@MMK_R_question.sc" = 17;
"@MMK_R_questiondown.sc" = -2;
"@MMK_R_quotedblleft" = 20;
"@MMK_R_quotedblleft.sc" = -8;
"@MMK_R_quotedblright" = 11;
"@MMK_R_s.sc" = -1;
"@MMK_R_three" = -11;
"@MMK_R_three.osf" = -7;
"@MMK_R_trademark" = -10;
"@MMK_R_two" = -2;
"@MMK_R_v.sc" = -2;
"@MMK_R_x.sc" = -12;
"@MMK_R_y.sc" = -3;
"@MMK_R_zero" = -16;
"@MMK_R_zero.osf" = -19;
};
"@MMK_L_colon" = {
"@MMK_R_A" = 10;
"@MMK_R_J" = 32;
"@MMK_R_J.ss01" = 2;
"@MMK_R_T" = -10;
"@MMK_R_T.ss01" = -10;
"@MMK_R_V" = -28;
"@MMK_R_X" = -9;
"@MMK_R_Y" = -39;
"@MMK_R_backslash" = -23;
"@MMK_R_four.osf" = 8;
"@MMK_R_guillemetright.sc" = 8;
"@MMK_R_j.sc" = 30;
"@MMK_R_nine.osf" = 10;
"@MMK_R_one.osf" = 20;
"@MMK_R_question" = -10;
"@MMK_R_question.sc" = 8;
"@MMK_R_quotedbl" = 10;
"@MMK_R_semisoftsign-cy" = 25;
"@MMK_R_seven" = 2;
"@MMK_R_seven.osf" = 20;
"@MMK_R_slash" = 57;
"@MMK_R_t" = 17;
"@MMK_R_t.sc" = 20;
"@MMK_R_two.osf" = 10;
"@MMK_R_underscore" = 10;
"@MMK_R_v" = 2;
"@MMK_R_x" = -10;
"@MMK_R_x.sc" = -8;
"@MMK_R_y.sc" = -9;
"@MMK_R_yen" = -40;
};
"@MMK_L_comma" = {
"@MMK_R_A" = 31;
"@MMK_R_C" = -20;
"@MMK_R_Che-cy" = -54;
"@MMK_R_Cheabkhasian-cy" = -77;
"@MMK_R_De-cy" = 17;
"@MMK_R_J" = 52;
"@MMK_R_J.ss01" = 2;
"@MMK_R_S" = 10;
"@MMK_R_T" = -34;
"@MMK_R_T.ss01" = -34;
"@MMK_R_U" = -6;
"@MMK_R_V" = -39;
"@MMK_R_Y" = -39;
"@MMK_R_Y.ss01" = -10;
"@MMK_R_Z" = 12;
"@MMK_R_a" = 10;
"@MMK_R_a.sc" = 20;
"@MMK_R_backslash" = -92;
"@MMK_R_c" = -3;
"@MMK_R_c.sc" = -5;
"@MMK_R_cheabkhasian-cy" = -33;
"@MMK_R_currency" = -10;
"@MMK_R_de-cy" = 20;
"@MMK_R_degree" = -68;
"@MMK_R_eight" = 10;
"@MMK_R_exclam" = 8;
"@MMK_R_exclam.sc" = 8;
"@MMK_R_exclamdown" = 8;
"@MMK_R_exclamdown.sc" = 8;
"@MMK_R_four" = 5;
"@MMK_R_four.osf" = 15;
"@MMK_R_guillemetright" = 8;
"@MMK_R_guillemetright.case" = 8;
"@MMK_R_guillemetright.sc" = 8;
"@MMK_R_j" = 10;
"@MMK_R_j.sc" = 43;
"@MMK_R_one" = -18;
"@MMK_R_one.osf" = -10;
"@MMK_R_ordfeminine" = -38;
"@MMK_R_paragraph" = -151;
"@MMK_R_percent" = -68;
"@MMK_R_periodcentered" = -9;
"@MMK_R_periodcentered.case" = -15;
"@MMK_R_question" = -58;
"@MMK_R_question.sc" = -40;
"@MMK_R_questiondown" = 10;
"@MMK_R_questiondown.sc" = -5;
"@MMK_R_quotedbl" = -55;
"@MMK_R_quotedbl.sc" = -20;
"@MMK_R_quotedblleft" = -23;
"@MMK_R_quotedblleft.sc" = -12;
"@MMK_R_quotedblright" = -23;
"@MMK_R_quotedblright.sc" = -12;
"@MMK_R_rupeeIndian" = -10;
"@MMK_R_seven" = -18;
"@MMK_R_seven.osf" = -32;
"@MMK_R_slash" = 85;
"@MMK_R_t" = -2;
"@MMK_R_t.sc" = -23;
"@MMK_R_te-cy" = -55;
"@MMK_R_three" = 10;
"@MMK_R_three.osf" = 1;
"@MMK_R_trademark" = -40;
"@MMK_R_two" = 10;
"@MMK_R_two.osf" = 2;
"@MMK_R_u" = -3;
"@MMK_R_u.sc" = -3;
"@MMK_R_underscore" = 10;
"@MMK_R_v" = -31;
"@MMK_R_v.sc" = -28;
"@MMK_R_y.sc" = -29;
"@MMK_R_yen" = -30;
"@MMK_R_zero" = -14;
"@MMK_R_zero.osf" = -11;
};
"@MMK_L_currency" = {
"@MMK_R_comma" = -10;
"@MMK_R_five.osf" = 2;
"@MMK_R_nine.osf" = 10;
"@MMK_R_one.osf" = 20;
"@MMK_R_ordfeminine" = 2;
"@MMK_R_periodcentered" = 2;
"@MMK_R_questiondown" = -2;
"@MMK_R_seven" = -3;
"@MMK_R_seven.osf" = 18;
"@MMK_R_two" = -6;
"@MMK_R_two.osf" = 9;
"@MMK_R_underscore" = -2;
};
"@MMK_L_d" = {
"@MMK_R_cheabkhasian-cy" = -13;
"@MMK_R_t" = 54;
"@MMK_R_tshe-cy" = 14;
};
"@MMK_L_d.sc" = {
"@MMK_R_a.sc" = -10;
"@MMK_R_backslash" = -57;
"@MMK_R_comma" = -5;
"@MMK_R_degree" = -8;
"@MMK_R_four.osf" = -8;
"@MMK_R_j.sc" = -15;
"@MMK_R_nine" = -1;
"@MMK_R_one" = -18;
"@MMK_R_one.osf" = -2;
"@MMK_R_ordfeminine" = -8;
"@MMK_R_paragraph" = -8;
"@MMK_R_periodcentered" = 12;
"@MMK_R_question" = -40;
"@MMK_R_question.sc" = -10;
"@MMK_R_questiondown.sc" = -10;
"@MMK_R_quotedblleft" = -2;
"@MMK_R_quotedblleft.sc" = 2;
"@MMK_R_quotedblright" = -2;
"@MMK_R_quotedblright.sc" = 2;
"@MMK_R_seven" = -16;
"@MMK_R_seven.osf" = -2;
"@MMK_R_slash" = 60;
"@MMK_R_t.sc" = -10;
"@MMK_R_three" = -10;
"@MMK_R_three.osf" = -10;
"@MMK_R_two" = -13;
"@MMK_R_two.osf" = -13;
"@MMK_R_underscore" = -10;
"@MMK_R_v.sc" = -24;
"@MMK_R_x.sc" = -25;
"@MMK_R_y.sc" = -30;
"@MMK_R_z.sc" = -6;
};
"@MMK_L_dagger" = {
"@MMK_R_J" = 10;
"@MMK_R_T.ss01" = -10;
"@MMK_R_V" = -20;
"@MMK_R_Y" = -20;
"@MMK_R_t" = 40;
"@MMK_R_v" = 20;
"@MMK_R_x" = -10;
};
"@MMK_L_dcaron" = {
"@MMK_R_b" = 149;
"@MMK_R_i" = 17;
"@MMK_R_t" = 99;
"@MMK_R_u" = 17;
"@MMK_R_v" = 17;
"@MMK_R_x" = 17;
"@MMK_R_z" = 17;
};
"@MMK_L_degree" = {
"@MMK_R_A" = -98;
"@MMK_R_C" = 10;
"@MMK_R_J" = -10;
"@MMK_R_J.ss01" = -10;
"@MMK_R_S" = 20;
"@MMK_R_T" = 40;
"@MMK_R_T.ss01" = 30;
"@MMK_R_V" = 22;
"@MMK_R_X" = -20;
"@MMK_R_Y" = 20;
"@MMK_R_a.sc" = -105;
"@MMK_R_a.sc.ss01" = -22;
"@MMK_R_backslash" = 58;
"@MMK_R_c" = -19;
"@MMK_R_c.sc" = -8;
"@MMK_R_comma" = -68;
"@MMK_R_f.sc.ss01" = -17;
"@MMK_R_five" = 2;
"@MMK_R_four" = -40;
"@MMK_R_four.osf" = -60;
"@MMK_R_nine" = 32;
"@MMK_R_nine.osf" = 5;
"@MMK_R_one" = 48;
"@MMK_R_one.osf" = 60;
"@MMK_R_ordfeminine" = 30;
"@MMK_R_percent" = 28;
"@MMK_R_question" = 20;
"@MMK_R_question.sc" = 2;
"@MMK_R_questiondown" = -53;
"@MMK_R_questiondown.sc" = -30;
"@MMK_R_quotedbl" = 20;
"@MMK_R_s" = -8;
"@MMK_R_seven" = 33;
"@MMK_R_seven.osf" = 43;
"@MMK_R_slash" = -52;
"@MMK_R_t" = 20;
"@MMK_R_t.sc" = 40;
"@MMK_R_three" = 19;
"@MMK_R_three.osf" = 38;
"@MMK_R_two" = 30;
"@MMK_R_two.osf" = 32;
"@MMK_R_v" = 32;
"@MMK_R_v.sc" = 35;
"@MMK_R_x" = 10;
"@MMK_R_x.sc" = 8;
"@MMK_R_y.sc" = 35;
"@MMK_R_z.sc" = 17;
"@MMK_R_zero" = 1;
"@MMK_R_zero.osf" = -19;
};
"@MMK_L_dong" = {
"@MMK_R_backslash" = 20;
"@MMK_R_braceright" = 25;
"@MMK_R_braceright.case" = 8;
"@MMK_R_exclam" = 17;
"@MMK_R_four" = -2;
"@MMK_R_nine" = 3;
"@MMK_R_one" = 50;
"@MMK_R_one.osf" = 50;
"@MMK_R_ordfeminine" = 22;
"@MMK_R_parenright" = 8;
"@MMK_R_question" = 22;
"@MMK_R_quotedbl" = 10;
"@MMK_R_quotedblright" = 17;
"@MMK_R_seven" = 27;
"@MMK_R_seven.osf" = 22;
"@MMK_R_three" = 10;
"@MMK_R_two" = 15;
"@MMK_R_two.osf" = 2;
};
"@MMK_L_dzcaron.sc" = {
"@MMK_R_C" = -2;
"@MMK_R_backslash" = -47;
"@MMK_R_c.sc" = -6;
"@MMK_R_comma" = 10;
"@MMK_R_degree" = 10;
"@MMK_R_four" = -3;
"@MMK_R_four.osf" = -3;
"@MMK_R_one.osf" = 8;
"@MMK_R_paragraph" = 10;
"@MMK_R_periodcentered" = -3;
"@MMK_R_question.sc" = 10;
"@MMK_R_seven" = 8;
"@MMK_R_seven.osf" = 2;
"@MMK_R_slash" = 12;
"@MMK_R_three" = 7;
"@MMK_R_two" = 8;
"@MMK_R_underscore" = 30;
"@MMK_R_x.sc" = -10;
"@MMK_R_zero" = -1;
"@MMK_R_zero.osf" = -2;
};
"@MMK_L_e.sc.ss01" = {
"@MMK_R_C" = -2;
"@MMK_R_ampersand" = -2;
"@MMK_R_ampersand.sc" = -2;
"@MMK_R_backslash" = -45;
"@MMK_R_degree" = 8;
"@MMK_R_eight" = -10;
"@MMK_R_exclam" = -5;
"@MMK_R_exclamdown" = -2;
"@MMK_R_five" = -2;
"@MMK_R_four" = -20;
"@MMK_R_four.osf" = -2;
"@MMK_R_guillemetright" = -10;
"@MMK_R_guillemetright.sc" = -10;
"@MMK_R_nine" = -3;
"@MMK_R_nine.osf" = -8;
"@MMK_R_one.osf" = -3;
"@MMK_R_ordfeminine" = 10;
"@MMK_R_periodcentered" = -10;
"@MMK_R_question" = -2;
"@MMK_R_questiondown.sc" = -12;
"@MMK_R_quotedblleft.sc" = -10;
"@MMK_R_quotedblright.sc" = -10;
"@MMK_R_slash" = 20;
"@MMK_R_three" = -3;
"@MMK_R_three.osf" = -3;
"@MMK_R_underscore" = 20;
"@MMK_R_zero" = -20;
"@MMK_R_zero.osf" = -14;
};
"@MMK_L_eight" = {
"@MMK_R_A" = -5;
"@MMK_R_I.ss01" = -1;
"@MMK_R_J" = -1;
"@MMK_R_J.ss01" = -39;
"@MMK_R_T" = -10;
"@MMK_R_T.ss01" = -5;
"@MMK_R_V" = -19;
"@MMK_R_X" = -24;
"@MMK_R_Y" = -24;
"@MMK_R_Z" = -1;
"@MMK_R_backslash" = -30;
"@MMK_R_comma" = 10;
"@MMK_R_j" = -8;
"@MMK_R_j.sc.ss01" = -18;
"@MMK_R_ordfeminine" = 2;
"@MMK_R_percent" = -10;
"@MMK_R_question" = -10;
"@MMK_R_questiondown" = -20;
"@MMK_R_quotedbl" = 1;
"@MMK_R_quotedblleft" = -5;
"@MMK_R_rupeeIndian" = -2;
"@MMK_R_section" = 10;
"@MMK_R_t.sc" = 2;
"@MMK_R_v" = -3;
"@MMK_R_v.sc" = 1;
"@MMK_R_x" = -13;
"@MMK_R_x.sc" = -8;
"@MMK_R_yen" = -10;
};
"@MMK_L_eth" = {
"@MMK_R_backslash" = -10;
"@MMK_R_comma" = -16;
"@MMK_R_dagger" = 20;
"@MMK_R_degree" = 20;
"@MMK_R_five.osf" = 2;
"@MMK_R_four.osf" = -10;
"@MMK_R_nine.osf" = 22;
"@MMK_R_ordfeminine" = 10;
"@MMK_R_question" = -2;
"@MMK_R_questiondown" = -2;
"@MMK_R_quotedblright" = 10;
"@MMK_R_seven.osf" = 2;
"@MMK_R_three" = -2;
"@MMK_R_trademark" = 22;
"@MMK_R_underscore" = -20;
"@MMK_R_zero" = 2;
};
"@MMK_L_exclam" = {
"@MMK_R_J" = 21;
"@MMK_R_J.ss01" = -3;
"@MMK_R_T" = 20;
"@MMK_R_T.ss01" = 20;
"@MMK_R_V" = 10;
"@MMK_R_Y" = 20;
"@MMK_R_a.sc" = 10;
"@MMK_R_braceright" = 8;
"@MMK_R_braceright.case" = 8;
"@MMK_R_comma" = 8;
"@MMK_R_four.osf" = 10;
"@MMK_R_j.sc" = 18;
"@MMK_R_j.sc.ss01" = -10;
"@MMK_R_one" = 10;
"@MMK_R_one.osf" = 20;
"@MMK_R_ordfeminine" = 9;
"@MMK_R_quotedbl" = 8;
"@MMK_R_quotedblleft" = 8;
"@MMK_R_quotedblright" = 8;
"@MMK_R_seven" = 2;
"@MMK_R_seven.osf" = 12;
"@MMK_R_t.sc" = 20;
"@MMK_R_trademark" = 17;
"@MMK_R_two.osf" = 10;
"@MMK_R_v.sc" = 8;
"@MMK_R_y.sc" = 8;
"@MMK_R_yen" = 25;
};
"@MMK_L_exclam.sc" = {
"@MMK_R_backslash" = -5;
"@MMK_R_comma" = 8;
"@MMK_R_guillemetright.sc" = 10;
"@MMK_R_j.sc" = 17;
"@MMK_R_j.sc.ss01" = -10;
"@MMK_R_ordfeminine" = 20;
"@MMK_R_paragraph" = 20;
"@MMK_R_quotedbl" = 17;
"@MMK_R_quotedbl.sc" = 8;
"@MMK_R_quotedblleft" = 8;
"@MMK_R_quotedblleft.sc" = 8;
"@MMK_R_quotedblright" = 8;
"@MMK_R_quotedblright.sc" = 8;
"@MMK_R_slash" = 13;
"@MMK_R_t.sc" = 17;
"@MMK_R_v.sc" = 8;
"@MMK_R_y.sc" = 17;
"@MMK_R_yen" = -20;
};
"@MMK_L_exclamdown" = {
"@MMK_R_A" = 10;
"@MMK_R_J" = 10;
"@MMK_R_J.ss01" = 20;
"@MMK_R_T" = -20;
"@MMK_R_T.ss01" = -20;
"@MMK_R_V" = -30;
"@MMK_R_X" = -10;
"@MMK_R_Y" = -40;
"@MMK_R_a.sc" = 10;
"@MMK_R_backslash" = -55;
"@MMK_R_braceright" = 8;
"@MMK_R_braceright.case" = 17;
"@MMK_R_comma" = 8;
"@MMK_R_florin" = 100;
"@MMK_R_four.osf" = 20;
"@MMK_R_j" = 77;
"@MMK_R_j.sc" = 20;
"@MMK_R_j.sc.ss01" = 10;
"@MMK_R_one" = -20;
"@MMK_R_one.osf" = 10;
"@MMK_R_parenright.case" = 8;
"@MMK_R_question" = -8;
"@MMK_R_quotedblleft" = 8;
"@MMK_R_quotedblright" = 8;
"@MMK_R_slash" = 40;
"@MMK_R_t" = 13;
"@MMK_R_t.sc" = 17;
"@MMK_R_trademark" = -8;
"@MMK_R_underscore" = 25;
"@MMK_R_v.sc" = -10;
"@MMK_R_y.sc" = -10;
"@MMK_R_yen" = -20;
};
"@MMK_L_exclamdown.sc" = {
"@MMK_R_a.sc" = 8;
"@MMK_R_backslash" = -5;
"@MMK_R_comma" = 8;
"@MMK_R_guillemetright.sc" = 10;
"@MMK_R_j.sc" = 17;
"@MMK_R_j.sc.ss01" = 8;
"@MMK_R_ordfeminine" = 12;
"@MMK_R_paragraph" = 3;
"@MMK_R_question.sc" = 8;
"@MMK_R_quotedbl" = 17;
"@MMK_R_quotedbl.sc" = 8;
"@MMK_R_quotedblleft" = 8;
"@MMK_R_quotedblleft.sc" = 8;
"@MMK_R_quotedblright" = 8;
"@MMK_R_quotedblright.sc" = 8;
"@MMK_R_slash" = 22;
"@MMK_R_t.sc" = 8;
"@MMK_R_trademark" = -10;
"@MMK_R_underscore" = 17;
"@MMK_R_yen" = -20;
};
"@MMK_L_ezhcaron" = {
"@MMK_R_cheabkhasian-cy" = -17;
};
"@MMK_L_f" = {
"@MMK_R_a" = -10;
"@MMK_R_ampersand" = -18;
"@MMK_R_backslash" = 61;
"@MMK_R_braceright" = 42;
"@MMK_R_c" = -6;
"@MMK_R_colon" = 13;
"@MMK_R_comma" = -10;
"@MMK_R_dagger" = 20;
"@MMK_R_degree" = 32;
"@MMK_R_eight" = 3;
"@MMK_R_exclam" = 8;
"@MMK_R_five" = 3;
"@MMK_R_five.osf" = 2;
"@MMK_R_four" = -22;
"@MMK_R_four.osf" = -20;
"@MMK_R_guillemetright" = -8;
"@MMK_R_i" = 80;
"@MMK_R_j" = 48;
"@MMK_R_nine" = 22;
"@MMK_R_nine.osf" = 30;
"@MMK_R_one" = 35;
"@MMK_R_one.osf" = 42;
"@MMK_R_ordfeminine" = 35;
"@MMK_R_paragraph" = 33;
"@MMK_R_parenright" = 45;
"@MMK_R_percent" = 12;
"@MMK_R_periodcentered" = -10;
"@MMK_R_question" = 22;
"@MMK_R_questiondown" = -18;
"@MMK_R_quotedblleft" = 21;
"@MMK_R_quotedblright" = 49;
"@MMK_R_seven" = 33;
"@MMK_R_seven.osf" = 33;
"@MMK_R_slash" = -30;
"@MMK_R_three" = 13;
"@MMK_R_three.osf" = 10;
"@MMK_R_trademark" = 57;
"@MMK_R_two" = 12;
"@MMK_R_two.osf" = 13;
"@MMK_R_underscore" = -27;
"@MMK_R_v" = 10;
"@MMK_R_zero" = 3;
};
"@MMK_L_f.sc" = {
"@MMK_R_C" = -3;
"@MMK_R_a.sc" = -27;
"@MMK_R_ampersand" = -22;
"@MMK_R_ampersand.sc" = -12;
"@MMK_R_backslash" = -23;
"@MMK_R_c.sc" = -6;
"@MMK_R_comma" = -10;
"@MMK_R_degree" = 27;
"@MMK_R_exclam.sc" = 8;
"@MMK_R_exclamdown" = -2;
"@MMK_R_five" = -8;
"@MMK_R_five.osf" = 8;
"@MMK_R_four" = -27;
"@MMK_R_four.osf" = -50;
"@MMK_R_j.sc" = -15;
"@MMK_R_nine" = 18;
"@MMK_R_nine.osf" = 17;
"@MMK_R_one" = 17;
"@MMK_R_one.osf" = 27;
"@MMK_R_ordfeminine" = 23;
"@MMK_R_paragraph" = 18;
"@MMK_R_periodcentered" = 7;
"@MMK_R_question" = 20;
"@MMK_R_question.sc" = 17;
"@MMK_R_questiondown" = -15;
"@MMK_R_questiondown.sc" = -13;
"@MMK_R_quotedblleft" = 22;
"@MMK_R_quotedblleft.sc" = 10;
"@MMK_R_quotedblright" = 22;
"@MMK_R_quotedblright.sc" = 20;
"@MMK_R_s.sc" = -1;
"@MMK_R_seven" = 25;
"@MMK_R_seven.osf" = 27;
"@MMK_R_slash" = -12;
"@MMK_R_t.sc" = 5;
"@MMK_R_three" = -2;
"@MMK_R_three.osf" = 8;
"@MMK_R_trademark" = 2;
"@MMK_R_two" = 5;
"@MMK_R_two.osf" = 10;
"@MMK_R_underscore" = -10;
"@MMK_R_x.sc" = -12;
"@MMK_R_zero" = -10;
"@MMK_R_zero.osf" = -8;
};
"@MMK_L_five" = {
"@MMK_R_J" = -10;
"@MMK_R_J.ss01" = -48;
"@MMK_R_T" = -10;
"@MMK_R_V" = -9;
"@MMK_R_X" = -14;
"@MMK_R_Y" = -6;
"@MMK_R_a.sc" = -8;
"@MMK_R_backslash" = -10;
"@MMK_R_c.sc" = 2;
"@MMK_R_degree" = -3;
"@MMK_R_five" = -5;
"@MMK_R_j.sc" = -8;
"@MMK_R_j.sc.ss01" = -18;
"@MMK_R_ordfeminine" = -10;
"@MMK_R_percent" = -10;
"@MMK_R_seven" = -11;
"@MMK_R_three" = -5;
"@MMK_R_two" = -5;
"@MMK_R_v" = -13;
"@MMK_R_x" = -13;
"@MMK_R_x.sc" = -8;
};
"@MMK_L_five.osf" = {
"@MMK_R_A" = 1;
"@MMK_R_C" = -9;
"@MMK_R_J" = 15;
"@MMK_R_S" = -1;
"@MMK_R_T" = -2;
"@MMK_R_V" = -18;
"@MMK_R_Y" = -15;
"@MMK_R_a" = 15;
"@MMK_R_a.sc" = 2;
"@MMK_R_backslash" = -32;
"@MMK_R_comma" = 10;
"@MMK_R_florin" = 10;
"@MMK_R_j" = 20;
"@MMK_R_j.sc" = 20;
"@MMK_R_nine.osf" = -1;
"@MMK_R_seven.osf" = -12;
"@MMK_R_slash" = 40;
"@MMK_R_three.osf" = -10;
"@MMK_R_underscore" = 2;
"@MMK_R_v.sc" = 8;
"@MMK_R_yen" = -10;
};
"@MMK_L_florin" = {
"@MMK_R_backslash" = 70;
"@MMK_R_braceright" = 32;
"@MMK_R_braceright.case" = 25;
"@MMK_R_colon" = -20;
"@MMK_R_comma" = -60;
"@MMK_R_exclam" = 17;
"@MMK_R_exclam.sc" = -20;
"@MMK_R_exclamdown.sc" = -20;
"@MMK_R_five.osf" = -10;
"@MMK_R_four" = -38;
"@MMK_R_four.osf" = -60;
"@MMK_R_guillemetright.sc" = -20;
"@MMK_R_one" = 37;
"@MMK_R_one.osf" = 20;
"@MMK_R_ordfeminine" = 12;
"@MMK_R_parenright" = 41;
"@MMK_R_parenright.case" = 8;
"@MMK_R_periodcentered" = -30;
"@MMK_R_question" = 10;
"@MMK_R_questiondown" = -60;
"@MMK_R_questiondown.sc" = -40;
"@MMK_R_quotedbl" = 20;
"@MMK_R_quotedblright" = 20;
"@MMK_R_seven" = 25;
"@MMK_R_seven.osf" = 5;
"@MMK_R_slash" = -10;
"@MMK_R_three" = 7;
"@MMK_R_two" = 3;
"@MMK_R_two.osf" = -5;
"@MMK_R_underscore" = -20;
"@MMK_R_zero.osf" = -20;
};
"@MMK_L_four" = {
"@MMK_R_C" = 10;
"@MMK_R_E.ss01" = 20;
"@MMK_R_J" = 8;
"@MMK_R_J.ss01" = -2;
"@MMK_R_S" = -2;
"@MMK_R_T" = -54;
"@MMK_R_T.ss01" = -54;
"@MMK_R_V" = -58;
"@MMK_R_X" = -13;
"@MMK_R_Y" = -89;
"@MMK_R_Y.ss01" = -10;
"@MMK_R_Z" = -2;
"@MMK_R_a" = 26;
"@MMK_R_a.sc" = 20;
"@MMK_R_ampersand" = 20;
"@MMK_R_backslash" = -50;
"@MMK_R_c" = 18;
"@MMK_R_c.sc" = 10;
"@MMK_R_colon" = 9;
"@MMK_R_comma" = 20;
"@MMK_R_currency" = 10;
"@MMK_R_degree" = -30;
"@MMK_R_e.sc.ss01" = 10;
"@MMK_R_eight" = 10;
"@MMK_R_five" = -1;
"@MMK_R_florin" = 20;
"@MMK_R_j.sc" = 7;
"@MMK_R_j.sc.ss01" = -12;
"@MMK_R_lira" = 10;
"@MMK_R_nine" = -2;
"@MMK_R_one" = -25;
"@MMK_R_ordfeminine" = -20;
"@MMK_R_paragraph" = -27;
"@MMK_R_percent" = -30;
"@MMK_R_periodcentered" = 10;
"@MMK_R_question" = -58;
"@MMK_R_questiondown" = 10;
"@MMK_R_quotedbl" = -30;
"@MMK_R_quotedblleft" = -28;
"@MMK_R_quotedblright" = -10;
"@MMK_R_section" = 28;
"@MMK_R_seven" = -38;
"@MMK_R_slash" = 22;
"@MMK_R_t" = 4;
"@MMK_R_t.sc" = -8;
"@MMK_R_three" = -3;
"@MMK_R_trademark" = -20;
"@MMK_R_two" = -1;
"@MMK_R_underscore" = 20;
"@MMK_R_v" = -27;
"@MMK_R_v.sc" = 17;
"@MMK_R_x" = -18;
"@MMK_R_x.sc" = 17;
"@MMK_R_y.sc" = 7;
"@MMK_R_yen" = -10;
"@MMK_R_z.sc" = 2;
};
"@MMK_L_four.osf" = {
"@MMK_R_A" = 28;
"@MMK_R_C" = -10;
"@MMK_R_J" = 43;
"@MMK_R_J.ss01" = 17;
"@MMK_R_S" = 3;
"@MMK_R_T" = -27;
"@MMK_R_T.ss01" = -55;
"@MMK_R_U" = -1;
"@MMK_R_V" = -59;
"@MMK_R_X" = -2;
"@MMK_R_Y" = -65;
"@MMK_R_Y.ss01" = -3;
"@MMK_R_Z" = 18;
"@MMK_R_a" = 22;
"@MMK_R_a.sc" = 30;
"@MMK_R_ampersand" = 10;
"@MMK_R_backslash" = -52;
"@MMK_R_c" = 1;
"@MMK_R_c.sc" = 2;
"@MMK_R_colon" = 18;
"@MMK_R_comma" = 29;
"@MMK_R_currency" = 20;
"@MMK_R_degree" = -40;
"@MMK_R_e.sc.ss01" = 2;
"@MMK_R_exclam" = 25;
"@MMK_R_exclamdown" = 20;
"@MMK_R_five.osf" = -1;
"@MMK_R_florin" = 60;
"@MMK_R_four.osf" = 8;
"@MMK_R_guillemetright" = 10;
"@MMK_R_j" = 27;
"@MMK_R_j.sc" = 48;
"@MMK_R_j.sc.ss01" = 25;
"@MMK_R_lira" = 10;
"@MMK_R_nine.osf" = -2;
"@MMK_R_one.osf" = -15;
"@MMK_R_ordfeminine" = -20;
"@MMK_R_paragraph" = -29;
"@MMK_R_percent" = -30;
"@MMK_R_periodcentered" = 8;
"@MMK_R_question" = -55;
"@MMK_R_quotedbl" = -32;
"@MMK_R_quotedblleft" = -28;
"@MMK_R_quotedblright" = -30;
"@MMK_R_s" = 10;
"@MMK_R_seven.osf" = -47;
"@MMK_R_slash" = 40;
"@MMK_R_t.sc" = -18;
"@MMK_R_three.osf" = -2;
"@MMK_R_trademark" = -22;
"@MMK_R_two.osf" = 5;
"@MMK_R_underscore" = 35;
"@MMK_R_v" = -32;
"@MMK_R_v.sc" = -34;
"@MMK_R_x" = 10;
"@MMK_R_x.sc" = 20;
"@MMK_R_y.sc" = -39;
"@MMK_R_yen" = -20;
"@MMK_R_z" = 10;
"@MMK_R_z.sc" = 3;
"@MMK_R_zero" = -1;
};
"@MMK_L_g.sc" = {
"@MMK_R_backslash" = -42;
"@MMK_R_question" = -30;
"@MMK_R_seven" = -2;
};
"@MMK_L_ge-cy" = {
"@MMK_R_A" = -48;
"@MMK_R_Che-cy" = -10;
"@MMK_R_De-cy" = -44;
"@MMK_R_De-cy.ss01" = -28;
"@MMK_R_Ezh" = -8;
"@MMK_R_V" = -17;
"@MMK_R_X" = -43;
"@MMK_R_Y" = -24;
"@MMK_R_be-cy.loclSRB" = -17;
"@MMK_R_c" = -21;
"@MMK_R_cheabkhasian-cy" = -5;
"@MMK_R_comma" = -57;
"@MMK_R_de-cy" = -42;
"@MMK_R_ezhcaron" = -3;
"@MMK_R_parenright" = -17;
"@MMK_R_periodcentered" = -5;
"@MMK_R_quotedblright" = 12;
"@MMK_R_reversedze-cy" = -22;
"@MMK_R_semisoftsign-cy" = -2;
"@MMK_R_te-cy" = 3;
"@MMK_R_v" = 6;
"@MMK_R_x" = -2;
};
"@MMK_L_guillemetleft" = {
"@MMK_R_A" = 3;
"@MMK_R_J" = 30;
"@MMK_R_T" = -18;
"@MMK_R_T.ss01" = -18;
"@MMK_R_V" = -18;
"@MMK_R_X" = -17;
"@MMK_R_Y" = -27;
"@MMK_R_a.sc" = 2;
"@MMK_R_backslash" = -52;
"@MMK_R_comma" = 8;
"@MMK_R_five" = 2;
"@MMK_R_four" = 2;
"@MMK_R_j.sc" = 30;
"@MMK_R_j.sc.ss01" = -10;
"@MMK_R_one" = -8;
"@MMK_R_one.osf" = 8;
"@MMK_R_ordfeminine" = 18;
"@MMK_R_periodcentered" = -10;
"@MMK_R_question" = -10;
"@MMK_R_question.sc" = 17;
"@MMK_R_questiondown" = 2;
"@MMK_R_slash" = 2;
"@MMK_R_t" = 8;
"@MMK_R_t.sc" = 18;
"@MMK_R_three.osf" = -10;
"@MMK_R_two.osf" = 10;
"@MMK_R_underscore" = 10;
"@MMK_R_v.sc" = -10;
"@MMK_R_x.sc" = -10;
"@MMK_R_y.sc" = -15;
};
"@MMK_L_guillemetleft.case" = {
"@MMK_R_A" = -11;
"@MMK_R_J.ss01" = -21;
"@MMK_R_T" = -3;
"@MMK_R_T.ss01" = -12;
"@MMK_R_V" = -31;
"@MMK_R_X" = -33;
"@MMK_R_Y" = -33;
"@MMK_R_Z" = -2;
"@MMK_R_backslash" = -10;
"@MMK_R_comma" = 8;
"@MMK_R_florin" = -3;
"@MMK_R_ordfeminine" = 12;
"@MMK_R_periodcentered" = -10;
"@MMK_R_periodcentered.case" = -2;
"@MMK_R_trademark" = -10;
"@MMK_R_underscore" = 2;
"@MMK_R_yen" = -3;
};
"@MMK_L_guillemetleft.sc" = {
"@MMK_R_a.sc" = -10;
"@MMK_R_backslash" = -5;
"@MMK_R_colon" = 8;
"@MMK_R_comma" = 8;
"@MMK_R_exclam.sc" = 10;
"@MMK_R_exclamdown.sc" = 10;
"@MMK_R_j.sc" = 10;
"@MMK_R_j.sc.ss01" = -10;
"@MMK_R_ordfeminine" = 12;
"@MMK_R_periodcentered" = -10;
"@MMK_R_question" = -32;
"@MMK_R_question.sc" = 10;
"@MMK_R_quotedbl" = 8;
"@MMK_R_quotedbl.sc" = 8;
"@MMK_R_quotedblleft" = 8;
"@MMK_R_quotedblleft.sc" = 8;
"@MMK_R_quotedblright" = 8;
"@MMK_R_quotedblright.sc" = 8;
"@MMK_R_slash" = 5;
"@MMK_R_t.sc" = 10;
"@MMK_R_trademark" = -10;
"@MMK_R_v.sc" = -10;
"@MMK_R_x.sc" = -20;
"@MMK_R_y.sc" = -20;
"@MMK_R_yen" = -20;
};
"@MMK_L_h.sc" = {
"@MMK_R_backslash" = -47;
};
"@MMK_L_i.sc.ss01" = {
"@MMK_R_backslash" = -47;
"@MMK_R_four" = -2;
};
"@MMK_L_iacute_j.loclNLD.sc" = {
"@MMK_R_a.sc" = -15;
"@MMK_R_backslash" = -47;
"@MMK_R_comma" = -3;
"@MMK_R_four.osf" = -10;
"@MMK_R_questiondown" = -10;
"@MMK_R_slash" = -10;
"@MMK_R_three" = -2;
"@MMK_R_three.osf" = -3;
"@MMK_R_two" = -2;
"@MMK_R_underscore" = -10;
"@MMK_R_x.sc" = -10;
"@MMK_R_y.sc" = -10;
};
"@MMK_L_k" = {
"@MMK_R_Che-cy" = -4;
"@MMK_R_Cheabkhasian-cy" = -3;
"@MMK_R_De-cy" = 8;
"@MMK_R_V" = -2;
"@MMK_R_X" = -2;
"@MMK_R_Y" = -20;
"@MMK_R_a" = -10;
"@MMK_R_ampersand" = -17;
"@MMK_R_backslash" = -40;
"@MMK_R_be-cy.loclSRB" = -24;
"@MMK_R_bracketleft" = -2;
"@MMK_R_c" = -24;
"@MMK_R_cheabkhasian-cy" = -52;
"@MMK_R_comma" = 10;
"@MMK_R_de-cy" = 16;
"@MMK_R_eight" = -13;
"@MMK_R_ezhcaron" = -24;
"@MMK_R_five.osf" = 5;
"@MMK_R_four" = -30;
"@MMK_R_i" = -2;
"@MMK_R_nine" = 10;
"@MMK_R_nine.osf" = -10;
"@MMK_R_one" = 17;
"@MMK_R_one.osf" = 20;
"@MMK_R_periodcentered" = -28;
"@MMK_R_question" = 17;
"@MMK_R_quotedblleft" = 6;
"@MMK_R_reversedze-cy" = -38;
"@MMK_R_s" = -19;
"@MMK_R_semisoftsign-cy" = -5;
"@MMK_R_seven" = 7;
"@MMK_R_seven.osf" = 2;
"@MMK_R_three" = 10;
"@MMK_R_three.osf" = 18;
"@MMK_R_two" = 27;
"@MMK_R_two.osf" = 12;
"@MMK_R_u" = -10;
"@MMK_R_underscore" = 53;
"@MMK_R_v" = -33;
"@MMK_R_x" = -20;
"@MMK_R_z" = -14;
"@MMK_R_zero" = -10;
"@MMK_R_zero.osf" = -18;
};
"@MMK_L_k.sc" = {
"@MMK_R_C" = -10;
"@MMK_R_a.sc" = -33;
"@MMK_R_ampersand" = -20;
"@MMK_R_ampersand.sc" = -20;
"@MMK_R_backslash" = -22;
"@MMK_R_braceright" = 17;
"@MMK_R_c.sc" = -25;
"@MMK_R_colon" = -6;
"@MMK_R_comma" = 2;
"@MMK_R_degree" = 10;
"@MMK_R_eight" = -8;
"@MMK_R_four" = -47;
"@MMK_R_four.osf" = -3;
"@MMK_R_guillemetright.sc" = -10;
"@MMK_R_nine.osf" = -18;
"@MMK_R_one" = 17;
"@MMK_R_one.osf" = 17;
"@MMK_R_ordfeminine" = 18;
"@MMK_R_paragraph" = 17;
"@MMK_R_parenright" = -10;
"@MMK_R_periodcentered" = -38;
"@MMK_R_question" = 25;
"@MMK_R_question.sc" = -20;
"@MMK_R_questiondown" = -2;
"@MMK_R_questiondown.sc" = -20;
"@MMK_R_quotedblleft.sc" = -20;
"@MMK_R_quotedblright" = 12;
"@MMK_R_quotedblright.sc" = -10;
"@MMK_R_s.sc" = -15;
"@MMK_R_seven" = 8;
"@MMK_R_seven.osf" = 8;
"@MMK_R_t.sc" = -52;
"@MMK_R_three" = 7;
"@MMK_R_three.osf" = 8;
"@MMK_R_trademark" = 25;
"@MMK_R_two" = 17;
"@MMK_R_u.sc" = -10;
"@MMK_R_underscore" = 50;
"@MMK_R_v.sc" = -40;
"@MMK_R_x.sc" = -43;
"@MMK_R_y.sc" = -53;
"@MMK_R_zero" = -20;
"@MMK_R_zero.osf" = -16;
};
"@MMK_L_kip" = {
"@MMK_R_backslash" = 40;
"@MMK_R_braceright" = 33;
"@MMK_R_braceright.case" = 33;
"@MMK_R_comma" = 20;
"@MMK_R_exclam" = 17;
"@MMK_R_exclamdown" = 8;
"@MMK_R_four" = -12;
"@MMK_R_four.osf" = 7;
"@MMK_R_guillemetright.case" = -2;
"@MMK_R_guillemetright.sc" = -2;
"@MMK_R_nine" = 8;
"@MMK_R_one" = 30;
"@MMK_R_one.osf" = 10;
"@MMK_R_parenright" = 25;
"@MMK_R_parenright.case" = 8;
"@MMK_R_periodcentered" = -2;
"@MMK_R_question" = -2;
"@MMK_R_quotedbl" = 20;
"@MMK_R_quotedblright" = 17;
"@MMK_R_seven" = 17;
"@MMK_R_seven.osf" = 7;
"@MMK_R_slash" = 30;
"@MMK_R_three" = 17;
"@MMK_R_three.osf" = 8;
"@MMK_R_two" = 18;
"@MMK_R_underscore" = 60;
};
"@MMK_L_l.sc" = {
"@MMK_R_a.sc" = 8;
"@MMK_R_backslash" = -70;
"@MMK_R_c.sc" = -11;
"@MMK_R_colon" = 20;
"@MMK_R_comma" = 20;
"@MMK_R_degree" = -47;
"@MMK_R_eight" = 7;
"@MMK_R_exclamdown.sc" = 8;
"@MMK_R_five" = 8;
"@MMK_R_five.osf" = 4;
"@MMK_R_four" = -7;
"@MMK_R_four.osf" = 13;
"@MMK_R_guillemetright.sc" = 8;
"@MMK_R_nine" = -2;
"@MMK_R_nine.osf" = -6;
"@MMK_R_one" = -43;
"@MMK_R_one.osf" = -20;
"@MMK_R_ordfeminine" = -48;
"@MMK_R_paragraph" = -57;
"@MMK_R_periodcentered" = -10;
"@MMK_R_question" = -53;
"@MMK_R_question.sc" = -52;
"@MMK_R_questiondown" = 17;
"@MMK_R_questiondown.sc" = -2;
"@MMK_R_quotedblleft" = -25;
"@MMK_R_quotedblleft.sc" = -24;
"@MMK_R_quotedblright" = -48;
"@MMK_R_quotedblright.sc" = -29;
"@MMK_R_s.sc" = -2;
"@MMK_R_seven" = -40;
"@MMK_R_seven.osf" = -37;
"@MMK_R_slash" = 22;
"@MMK_R_t.sc" = -65;
"@MMK_R_three" = 17;
"@MMK_R_trademark" = -45;
"@MMK_R_two" = 10;
"@MMK_R_two.osf" = 10;
"@MMK_R_u.sc" = -7;
"@MMK_R_underscore" = 43;
"@MMK_R_v.sc" = -47;
"@MMK_R_x.sc" = -10;
"@MMK_R_y.sc" = -71;
"@MMK_R_zero" = -12;
"@MMK_R_zero.osf" = -2;
};
"@MMK_L_l.ss01" = {
"@MMK_R_backslash" = -48;
"@MMK_R_c" = -10;
"@MMK_R_colon" = 12;
"@MMK_R_comma" = 22;
"@MMK_R_degree" = -20;
"@MMK_R_eight" = 2;
"@MMK_R_five" = 1;
"@MMK_R_five.osf" = 12;
"@MMK_R_four.osf" = 20;
"@MMK_R_one" = -20;
"@MMK_R_one.osf" = -19;
"@MMK_R_ordfeminine" = -37;
"@MMK_R_paragraph" = -17;
"@MMK_R_question" = -20;
"@MMK_R_questiondown" = 2;
"@MMK_R_quotedblleft" = -10;
"@MMK_R_quotedblright" = -10;
"@MMK_R_seven" = -15;
"@MMK_R_seven.osf" = -17;
"@MMK_R_slash" = 7;
"@MMK_R_t" = -5;
"@MMK_R_three" = 10;
"@MMK_R_three.osf" = 2;
"@MMK_R_two" = 12;
"@MMK_R_two.osf" = 3;
"@MMK_R_underscore" = 39;
"@MMK_R_v" = -25;
"@MMK_R_x" = 2;
"@MMK_R_zero" = -7;
};
"@MMK_L_liraTurkish" = {
"@MMK_R_backslash" = -50;
"@MMK_R_braceright" = -28;
"@MMK_R_braceright.case" = -28;
"@MMK_R_colon" = -20;
"@MMK_R_comma" = -20;
"@MMK_R_exclam" = -20;
"@MMK_R_exclam.sc" = -21;
"@MMK_R_guillemetright.sc" = -20;
"@MMK_R_one" = -40;
"@MMK_R_ordfeminine" = -23;
"@MMK_R_parenright" = -20;
"@MMK_R_parenright.case" = -20;
"@MMK_R_periodcentered" = 2;
"@MMK_R_question" = -90;
"@MMK_R_question.sc" = -20;
"@MMK_R_questiondown" = -20;
"@MMK_R_quotedbl" = -20;
"@MMK_R_seven" = -43;
"@MMK_R_seven.osf" = -5;
"@MMK_R_three" = -20;
"@MMK_R_three.osf" = -22;
"@MMK_R_two" = -20;
"@MMK_R_two.osf" = -10;
"@MMK_R_underscore" = -20;
};
"@MMK_L_m.sc.ss01" = {
"@MMK_R_backslash" = -47;
"@MMK_R_degree" = -20;
"@MMK_R_one" = -8;
"@MMK_R_ordfeminine" = -2;
"@MMK_R_paragraph" = -10;
"@MMK_R_question" = -25;
"@MMK_R_question.sc" = -2;
"@MMK_R_quotedblleft" = -2;
"@MMK_R_quotedblleft.sc" = -2;
"@MMK_R_quotedblright" = -2;
"@MMK_R_quotedblright.sc" = -2;
"@MMK_R_seven" = -2;
"@MMK_R_trademark" = -8;
};
"@MMK_L_nine.osf" = {
"@MMK_R_A" = 2;
"@MMK_R_J" = 4;
"@MMK_R_J.ss01" = -20;
"@MMK_R_T" = -20;
"@MMK_R_T.ss01" = -19;
"@MMK_R_V" = -28;
"@MMK_R_X" = -9;
"@MMK_R_Y" = -30;
"@MMK_R_Y.ss01" = -10;
"@MMK_R_a" = 2;
"@MMK_R_a.sc" = -7;
"@MMK_R_backslash" = -32;
"@MMK_R_comma" = 10;
"@MMK_R_currency" = 2;
"@MMK_R_degree" = -20;
"@MMK_R_j.sc.ss01" = -17;
"@MMK_R_paragraph" = -8;
"@MMK_R_percent" = -10;
"@MMK_R_periodcentered" = 10;
"@MMK_R_question" = -30;
"@MMK_R_quotedblleft" = -2;
"@MMK_R_slash" = 20;
"@MMK_R_t" = 10;
"@MMK_R_v.sc" = -17;
"@MMK_R_y.sc" = -17;
"@MMK_R_yen" = -1;
};
"@MMK_L_ohorn" = {
"@MMK_R_braceright" = 25;
"@MMK_R_comma" = -3;
"@MMK_R_degree" = 30;
"@MMK_R_nine" = 8;
"@MMK_R_one" = 17;
"@MMK_R_one.osf" = 25;
"@MMK_R_ordfeminine" = 40;
"@MMK_R_paragraph" = 30;
"@MMK_R_periodcentered" = 10;
"@MMK_R_question" = 40;
"@MMK_R_questiondown" = -2;
"@MMK_R_quotedblleft" = 20;
"@MMK_R_quotedblright" = 30;
"@MMK_R_seven" = 20;
"@MMK_R_seven.osf" = 17;
"@MMK_R_t" = 8;
"@MMK_R_three" = -4;
"@MMK_R_three.osf" = -3;
"@MMK_R_trademark" = 30;
"@MMK_R_two" = 15;
"@MMK_R_two.osf" = -1;
"@MMK_R_underscore" = -22;
"@MMK_R_v" = -2;
"@MMK_R_x" = -3;
"@MMK_R_z" = -6;
};
"@MMK_L_one" = {
"@MMK_R_j.sc.ss01" = -8;
};
"@MMK_L_one.osf" = {
"@MMK_R_J.ss01" = -3;
"@MMK_R_T" = -3;
"@MMK_R_V" = -10;
"@MMK_R_Y" = -10;
"@MMK_R_backslash" = -2;
};
"@MMK_L_ordfeminine" = {
"@MMK_R_A" = -98;
"@MMK_R_A.ss01" = -2;
"@MMK_R_J" = -14;
"@MMK_R_S" = 10;
"@MMK_R_T" = 30;
"@MMK_R_T.ss01" = 40;
"@MMK_R_V" = 31;
"@MMK_R_X" = -10;
"@MMK_R_Y" = 20;
"@MMK_R_Z" = 10;
"@MMK_R_a.sc" = -97;
"@MMK_R_a.sc.ss01" = -10;
"@MMK_R_ampersand" = -10;
"@MMK_R_braceright" = 8;
"@MMK_R_c" = -12;
"@MMK_R_c.sc" = -8;
"@MMK_R_comma" = -38;
"@MMK_R_currency" = 2;
"@MMK_R_degree" = 30;
"@MMK_R_exclam" = 9;
"@MMK_R_exclam.sc" = 20;
"@MMK_R_exclamdown.sc" = 12;
"@MMK_R_f.sc.ss01" = -20;
"@MMK_R_florin" = -2;
"@MMK_R_four" = -11;
"@MMK_R_four.osf" = -25;
"@MMK_R_guillemetright" = 18;
"@MMK_R_guillemetright.case" = 12;
"@MMK_R_guillemetright.sc" = 12;
"@MMK_R_i" = 80;
"@MMK_R_j.sc.ss01" = -8;
"@MMK_R_nine" = 23;
"@MMK_R_nine.osf" = 30;
"@MMK_R_one" = 22;
"@MMK_R_one.osf" = 42;
"@MMK_R_ordfeminine" = 20;
"@MMK_R_paragraph" = 32;
"@MMK_R_percent" = 30;
"@MMK_R_periodcentered" = -10;
"@MMK_R_question" = 23;
"@MMK_R_question.sc" = 35;
"@MMK_R_questiondown" = -73;
"@MMK_R_questiondown.sc" = -37;
"@MMK_R_quotedbl" = 20;
"@MMK_R_quotedbl.sc" = 20;
"@MMK_R_quotedblleft" = 30;
"@MMK_R_quotedblleft.sc" = 12;
"@MMK_R_quotedblright" = 30;
"@MMK_R_quotedblright.sc" = 12;
"@MMK_R_rupeeIndian" = 9;
"@MMK_R_s.sc" = 10;
"@MMK_R_seven" = 17;
"@MMK_R_seven.osf" = 50;
"@MMK_R_slash" = -128;
"@MMK_R_t" = 30;
"@MMK_R_t.sc" = 45;
"@MMK_R_three" = -3;
"@MMK_R_three.osf" = 20;
"@MMK_R_trademark" = 40;
"@MMK_R_two" = 20;
"@MMK_R_two.osf" = 40;
"@MMK_R_underscore" = -10;
"@MMK_R_v" = 33;
"@MMK_R_v.sc" = 42;
"@MMK_R_x" = 18;
"@MMK_R_x.sc" = 30;
"@MMK_R_y.sc" = 50;
"@MMK_R_z" = 12;
"@MMK_R_zero" = 2;
"@MMK_R_zero.osf" = -10;
};
"@MMK_L_p.sc" = {
"@MMK_R_a.sc" = -45;
"@MMK_R_ampersand" = -20;
"@MMK_R_ampersand.sc" = -10;
"@MMK_R_backslash" = -47;
"@MMK_R_comma" = -30;
"@MMK_R_five" = -8;
"@MMK_R_five.osf" = -8;
"@MMK_R_four" = -8;
"@MMK_R_four.osf" = -48;
"@MMK_R_guillemetright" = -10;
"@MMK_R_j.sc" = -31;
"@MMK_R_nine.osf" = 8;
"@MMK_R_one" = -8;
"@MMK_R_one.osf" = -2;
"@MMK_R_question" = -40;
"@MMK_R_questiondown" = -42;
"@MMK_R_questiondown.sc" = -37;
"@MMK_R_quotedblleft" = 8;
"@MMK_R_seven" = -5;
"@MMK_R_seven.osf" = 8;
"@MMK_R_slash" = -30;
"@MMK_R_three" = -38;
"@MMK_R_three.osf" = -20;
"@MMK_R_two" = -28;
"@MMK_R_underscore" = -10;
"@MMK_R_x.sc" = -25;
"@MMK_R_y.sc" = -10;
"@MMK_R_z.sc" = -12;
};
"@MMK_L_parenleft" = {
"@MMK_R_Che-cy" = -14;
"@MMK_R_Cheabkhasian-cy" = -40;
"@MMK_R_De-cy" = -27;
"@MMK_R_Ezh" = -21;
"@MMK_R_J.ss01" = -2;
"@MMK_R_T" = -3;
"@MMK_R_Yat-cy.ss01" = -3;
"@MMK_R_backslash" = 47;
"@MMK_R_braceright" = 17;
"@MMK_R_braceright.case" = 17;
"@MMK_R_cheabkhasian-cy" = -44;
"@MMK_R_de-cy" = -18;
"@MMK_R_ezhcaron" = -21;
"@MMK_R_florin" = 108;
"@MMK_R_four" = -20;
"@MMK_R_four.osf" = -12;
"@MMK_R_j" = 111;
"@MMK_R_one" = 10;
"@MMK_R_reversedze-cy" = -21;
"@MMK_R_semisoftsign-cy" = -18;
"@MMK_R_slash" = 38;
"@MMK_R_te-cy" = -29;
"@MMK_R_trademark" = 37;
"@MMK_R_tshe-cy" = 34;
"@MMK_R_underscore" = 8;
"@MMK_R_yen" = 33;
};
"@MMK_L_parenleft.case" = {
"@MMK_R_backslash" = 63;
"@MMK_R_exclamdown" = 8;
"@MMK_R_florin" = 81;
"@MMK_R_four" = -12;
"@MMK_R_four.osf" = -2;
"@MMK_R_slash" = 47;
"@MMK_R_underscore" = 33;
};
"@MMK_L_parenright" = {
"@MMK_R_Che-cy" = -31;
"@MMK_R_T" = -32;
};
"@MMK_L_percent" = {
"@MMK_R_a" = 3;
"@MMK_R_ampersand.sc" = 45;
"@MMK_R_backslash" = -32;
"@MMK_R_c" = 28;
"@MMK_R_comma" = 30;
"@MMK_R_degree" = -22;
"@MMK_R_eight" = 20;
"@MMK_R_five" = 20;
"@MMK_R_four" = 31;
"@MMK_R_four.osf" = 30;
"@MMK_R_nine.osf" = 10;
"@MMK_R_one" = -20;
"@MMK_R_one.osf" = -20;
"@MMK_R_ordfeminine" = -50;
"@MMK_R_parenright" = -20;
"@MMK_R_percent" = -128;
"@MMK_R_periodcentered" = 20;
"@MMK_R_question" = -52;
"@MMK_R_question.sc" = -30;
"@MMK_R_quotedbl" = -22;
"@MMK_R_quotedblleft" = -20;
"@MMK_R_quotedblright" = -20;
"@MMK_R_seven" = -12;
"@MMK_R_seven.osf" = -2;
"@MMK_R_three" = 10;
"@MMK_R_three.osf" = -2;
"@MMK_R_two" = 10;
"@MMK_R_two.osf" = 2;
"@MMK_R_zero.osf" = 10;
};
"@MMK_L_periodcentered" = {
"@MMK_R_A" = -27;
"@MMK_R_C" = 2;
"@MMK_R_Che-cy" = -21;
"@MMK_R_Cheabkhasian-cy" = -28;
"@MMK_R_De-cy" = -20;
"@MMK_R_De-cy.ss01" = -3;
"@MMK_R_Ezh" = -3;
"@MMK_R_J" = -20;
"@MMK_R_J.ss01" = -35;
"@MMK_R_S" = -12;
"@MMK_R_T" = -38;
"@MMK_R_T.ss01" = -38;
"@MMK_R_V" = -28;
"@MMK_R_X" = -23;
"@MMK_R_Y" = -34;
"@MMK_R_Y.ss01" = -2;
"@MMK_R_Yat-cy.ss01" = -6;
"@MMK_R_a.sc" = -15;
"@MMK_R_backslash" = -65;
"@MMK_R_c" = 10;
"@MMK_R_c.sc" = 12;
"@MMK_R_cheabkhasian-cy" = -3;
"@MMK_R_comma" = -9;
"@MMK_R_currency" = 2;
"@MMK_R_de-cy" = -2;
"@MMK_R_ezhcaron" = -4;
"@MMK_R_four" = 2;
"@MMK_R_guillemetright" = -10;
"@MMK_R_guillemetright.case" = -10;
"@MMK_R_guillemetright.sc" = -10;
"@MMK_R_hardsign-cy.ss01" = -9;
"@MMK_R_j.sc" = -20;
"@MMK_R_j.sc.ss01" = -30;
"@MMK_R_nine.osf" = 18;
"@MMK_R_one" = -23;
"@MMK_R_ordfeminine" = -10;
"@MMK_R_paragraph" = -82;
"@MMK_R_percent" = -32;
"@MMK_R_periodcentered" = 8;
"@MMK_R_question" = -40;
"@MMK_R_question.sc" = -27;
"@MMK_R_questiondown.sc" = -2;
"@MMK_R_quotedbl.sc" = 8;
"@MMK_R_quotedblleft.sc" = 8;
"@MMK_R_quotedblright.sc" = 8;
"@MMK_R_section" = 10;
"@MMK_R_semisoftsign-cy" = -4;
"@MMK_R_seven" = -10;
"@MMK_R_seven.osf" = 17;
"@MMK_R_t" = 10;
"@MMK_R_t.sc" = -8;
"@MMK_R_te-cy" = -5;
"@MMK_R_three" = -20;
"@MMK_R_three.osf" = -10;
"@MMK_R_trademark" = -20;
"@MMK_R_two" = -18;
"@MMK_R_two.osf" = -8;
"@MMK_R_v" = -18;
"@MMK_R_v.sc" = -23;
"@MMK_R_x" = -28;
"@MMK_R_x.sc" = -23;
"@MMK_R_y.sc" = -23;
"@MMK_R_yen" = -28;
"@MMK_R_z" = -11;
"@MMK_R_zero" = 2;
"@MMK_R_zero.osf" = 2;
};
"@MMK_L_periodcentered.case" = {
"@MMK_R_A" = -39;
"@MMK_R_C" = 2;
"@MMK_R_I.ss01" = -5;
"@MMK_R_J" = -27;
"@MMK_R_J.ss01" = -43;
"@MMK_R_T" = -19;
"@MMK_R_T.ss01" = -39;
"@MMK_R_V" = -48;
"@MMK_R_X" = -49;
"@MMK_R_Y" = -39;
"@MMK_R_backslash" = -33;
"@MMK_R_comma" = -15;
"@MMK_R_five.osf" = 2;
"@MMK_R_four.osf" = -10;
"@MMK_R_guillemetright.case" = -2;
"@MMK_R_one" = -15;
"@MMK_R_question" = -40;
"@MMK_R_questiondown" = -7;
"@MMK_R_questiondown.sc" = -3;
"@MMK_R_seven" = -1;
"@MMK_R_three" = -25;
"@MMK_R_two" = -30;
"@MMK_R_zero.osf" = 2;
};
"@MMK_L_question" = {
"@MMK_R_A" = -48;
"@MMK_R_A.ss01" = -10;
"@MMK_R_C" = -8;
"@MMK_R_J" = -33;
"@MMK_R_J.ss01" = -45;
"@MMK_R_V" = -18;
"@MMK_R_X" = -23;
"@MMK_R_Y" = -18;
"@MMK_R_Z" = -10;
"@MMK_R_a.sc" = -20;
"@MMK_R_a.sc.ss01" = -10;
"@MMK_R_ampersand" = -5;
"@MMK_R_bracketleft" = -4;
"@MMK_R_c" = -10;
"@MMK_R_comma" = -50;
"@MMK_R_degree" = 10;
"@MMK_R_eight" = -10;
"@MMK_R_exclam" = -2;
"@MMK_R_exclamdown" = -2;
"@MMK_R_four" = -50;
"@MMK_R_four.osf" = -50;
"@MMK_R_guillemetright" = 10;
"@MMK_R_guillemetright.case" = 8;
"@MMK_R_j.sc" = -8;
"@MMK_R_nine" = 10;
"@MMK_R_nine.osf" = 10;
"@MMK_R_one.osf" = 20;
"@MMK_R_ordfeminine" = 3;
"@MMK_R_question" = -11;
"@MMK_R_questiondown" = -98;
"@MMK_R_quotedblleft" = 28;
"@MMK_R_quotedblright" = 28;
"@MMK_R_s.sc" = 2;
"@MMK_R_seven.osf" = 10;
"@MMK_R_slash" = -30;
"@MMK_R_t.sc" = 30;
"@MMK_R_three" = -15;
"@MMK_R_tshe-cy" = 17;
"@MMK_R_underscore" = -12;
"@MMK_R_v" = 10;
"@MMK_R_v.sc" = 42;
"@MMK_R_x.sc" = 20;
"@MMK_R_y.sc" = 42;
"@MMK_R_yen" = -15;
"@MMK_R_zero.osf" = -8;
};
"@MMK_L_question.sc" = {
"@MMK_R_a.sc" = -50;
"@MMK_R_a.sc.ss01" = -2;
"@MMK_R_ampersand" = -30;
"@MMK_R_ampersand.sc" = -2;
"@MMK_R_backslash" = -22;
"@MMK_R_braceright.case" = -8;
"@MMK_R_c.sc" = -10;
"@MMK_R_comma" = -40;
"@MMK_R_degree" = -2;
"@MMK_R_f.sc.ss01" = -2;
"@MMK_R_guillemetright.sc" = 5;
"@MMK_R_j.sc" = -10;
"@MMK_R_j.sc.ss01" = -10;
"@MMK_R_periodcentered" = -18;
"@MMK_R_question.sc" = -11;
"@MMK_R_questiondown.sc" = -83;
"@MMK_R_quotedbl.sc" = 10;
"@MMK_R_quotedblleft" = 3;
"@MMK_R_quotedblright" = 3;
"@MMK_R_slash" = -30;
"@MMK_R_t.sc" = 17;
"@MMK_R_underscore" = -12;
"@MMK_R_v.sc" = 17;
"@MMK_R_x.sc" = -20;
"@MMK_R_yen" = -20;
};
"@MMK_L_questiondown" = {
"@MMK_R_A" = 33;
"@MMK_R_C" = -58;
"@MMK_R_E.ss01" = -28;
"@MMK_R_J.ss01" = 60;
"@MMK_R_T" = -63;
"@MMK_R_T.ss01" = -63;
"@MMK_R_U" = -35;
"@MMK_R_V" = -73;
"@MMK_R_X" = 17;
"@MMK_R_Y" = -83;
"@MMK_R_Y.ss01" = -10;
"@MMK_R_a" = -12;
"@MMK_R_a.sc" = 33;
"@MMK_R_ampersand" = -12;
"@MMK_R_backslash" = -80;
"@MMK_R_braceright" = 17;
"@MMK_R_braceright.case" = 17;
"@MMK_R_c" = -38;
"@MMK_R_c.sc" = -40;
"@MMK_R_colon" = -8;
"@MMK_R_comma" = 8;
"@MMK_R_currency" = -5;
"@MMK_R_degree" = -67;
"@MMK_R_eight" = -48;
"@MMK_R_exclam" = -8;
"@MMK_R_five.osf" = 8;
"@MMK_R_florin" = 90;
"@MMK_R_four" = -48;
"@MMK_R_guillemetright" = -10;
"@MMK_R_guillemetright.case" = -18;
"@MMK_R_guillemetright.sc" = -32;
"@MMK_R_i" = -3;
"@MMK_R_j" = 70;
"@MMK_R_j.sc" = 12;
"@MMK_R_j.sc.ss01" = 60;
"@MMK_R_lira" = 17;
"@MMK_R_one" = -48;
"@MMK_R_one.osf" = -30;
"@MMK_R_ordfeminine" = -88;
"@MMK_R_paragraph" = -93;
"@MMK_R_percent" = -60;
"@MMK_R_periodcentered" = -40;
"@MMK_R_periodcentered.case" = -33;
"@MMK_R_question" = -138;
"@MMK_R_questiondown" = -7;
"@MMK_R_quotedbl" = -53;
"@MMK_R_quotedblleft" = -28;
"@MMK_R_quotedblright" = -20;
"@MMK_R_rupeeIndian" = -20;
"@MMK_R_s" = -2;
"@MMK_R_section" = 8;
"@MMK_R_seven" = -48;
"@MMK_R_seven.osf" = -28;
"@MMK_R_slash" = 40;
"@MMK_R_t" = -3;
"@MMK_R_t.sc" = -48;
"@MMK_R_three.osf" = 20;
"@MMK_R_trademark" = -47;
"@MMK_R_u" = -50;
"@MMK_R_u.sc" = -30;
"@MMK_R_underscore" = 50;
"@MMK_R_v" = -57;
"@MMK_R_v.sc" = -40;
"@MMK_R_x" = 17;
"@MMK_R_x.sc" = 17;
"@MMK_R_y.sc" = -67;
"@MMK_R_yen" = -50;
"@MMK_R_zero" = -57;
"@MMK_R_zero.osf" = -38;
};
"@MMK_L_questiondown.sc" = {
"@MMK_R_a.sc" = 30;
"@MMK_R_ampersand" = 10;
"@MMK_R_backslash" = -52;
"@MMK_R_c.sc" = -2;
"@MMK_R_colon" = 8;
"@MMK_R_comma" = 33;
"@MMK_R_degree" = -30;
"@MMK_R_e.sc.ss01" = 10;
"@MMK_R_guillemetright.sc" = 10;
"@MMK_R_j.sc" = 50;
"@MMK_R_ordfeminine" = -70;
"@MMK_R_paragraph" = -40;
"@MMK_R_percent" = -60;
"@MMK_R_periodcentered" = -27;
"@MMK_R_periodcentered.case" = -3;
"@MMK_R_question.sc" = -83;
"@MMK_R_quotedbl" = -28;
"@MMK_R_quotedbl.sc" = -22;
"@MMK_R_quotedblleft" = -30;
"@MMK_R_quotedblleft.sc" = -13;
"@MMK_R_quotedblright" = -30;
"@MMK_R_quotedblright.sc" = -13;
"@MMK_R_s.sc" = 10;
"@MMK_R_slash" = 20;
"@MMK_R_t.sc" = -30;
"@MMK_R_trademark" = -50;
"@MMK_R_underscore" = 23;
"@MMK_R_v.sc" = -40;
"@MMK_R_y.sc" = -50;
"@MMK_R_yen" = -20;
"@MMK_R_z.sc" = 10;
};
"@MMK_L_quotedbl" = {
"@MMK_R_A" = -41;
"@MMK_R_De-cy" = -56;
"@MMK_R_De-cy.ss01" = -3;
"@MMK_R_T" = 17;
"@MMK_R_T.ss01" = 3;
"@MMK_R_ampersand" = -13;
"@MMK_R_backslash" = 60;
"@MMK_R_braceright" = 17;
"@MMK_R_braceright.case" = 8;
"@MMK_R_colon" = 10;
"@MMK_R_comma" = -55;
"@MMK_R_currency" = -20;
"@MMK_R_degree" = 20;
"@MMK_R_eight" = 1;
"@MMK_R_exclam" = 8;
"@MMK_R_exclam.sc" = 17;
"@MMK_R_exclamdown.sc" = 17;
"@MMK_R_five" = 2;
"@MMK_R_five.osf" = -8;
"@MMK_R_florin" = -10;
"@MMK_R_four" = -40;
"@MMK_R_four.osf" = -12;
"@MMK_R_guillemetright.sc" = 8;
"@MMK_R_nine" = 33;
"@MMK_R_nine.osf" = 13;
"@MMK_R_one" = 42;
"@MMK_R_one.osf" = 72;
"@MMK_R_ordfeminine" = 20;
"@MMK_R_paragraph" = 27;
"@MMK_R_percent" = 22;
"@MMK_R_question" = 23;
"@MMK_R_question.sc" = 33;
"@MMK_R_questiondown" = -23;
"@MMK_R_questiondown.sc" = -20;
"@MMK_R_quotedbl" = 45;
"@MMK_R_rupeeIndian" = 7;
"@MMK_R_seven" = 35;
"@MMK_R_seven.osf" = 28;
"@MMK_R_slash" = -60;
"@MMK_R_three" = 12;
"@MMK_R_three.osf" = 30;
"@MMK_R_trademark" = 32;
"@MMK_R_tshe-cy" = 39;
"@MMK_R_two" = 13;
"@MMK_R_two.osf" = 43;
"@MMK_R_underscore" = -2;
"@MMK_R_yen" = 20;
"@MMK_R_zero" = 2;
"@MMK_R_zero.osf" = -9;
};
"@MMK_L_quotedbl.sc" = {
"@MMK_R_backslash" = 30;
"@MMK_R_comma" = -20;
"@MMK_R_exclam.sc" = 8;
"@MMK_R_exclamdown.sc" = 8;
"@MMK_R_guillemetright.sc" = 8;
"@MMK_R_ordfeminine" = 20;
"@MMK_R_paragraph" = 7;
"@MMK_R_periodcentered" = 8;
"@MMK_R_question.sc" = 30;
"@MMK_R_questiondown.sc" = -23;
"@MMK_R_quotedbl.sc" = 30;
"@MMK_R_slash" = -20;
};
"@MMK_L_quotedblleft" = {
"@MMK_R_A" = -38;
"@MMK_R_A.ss01" = -3;
"@MMK_R_Cheabkhasian-cy" = 8;
"@MMK_R_De-cy" = -56;
"@MMK_R_De-cy.ss01" = -16;
"@MMK_R_J" = -8;
"@MMK_R_J.ss01" = -17;
"@MMK_R_S" = 10;
"@MMK_R_T" = 22;
"@MMK_R_T.ss01" = 23;
"@MMK_R_V" = 5;
"@MMK_R_X" = -15;
"@MMK_R_Y" = 3;
"@MMK_R_a" = -13;
"@MMK_R_a.sc" = -38;
"@MMK_R_a.sc.ss01" = -7;
"@MMK_R_ampersand" = -3;
"@MMK_R_backslash" = 43;
"@MMK_R_c" = -7;
"@MMK_R_c.sc" = -2;
"@MMK_R_cheabkhasian-cy" = -5;
"@MMK_R_comma" = -23;
"@MMK_R_de-cy" = -7;
"@MMK_R_eight" = -5;
"@MMK_R_exclam" = 8;
"@MMK_R_exclam.sc" = 8;
"@MMK_R_exclamdown" = 8;
"@MMK_R_exclamdown.sc" = 8;
"@MMK_R_five.osf" = -5;
"@MMK_R_four" = -32;
"@MMK_R_four.osf" = -32;
"@MMK_R_guillemetright.sc" = 8;
"@MMK_R_i" = 30;
"@MMK_R_nine" = 23;
"@MMK_R_nine.osf" = 32;
"@MMK_R_one" = 32;
"@MMK_R_one.osf" = 53;
"@MMK_R_ordfeminine" = 30;
"@MMK_R_paragraph" = 32;
"@MMK_R_percent" = 40;
"@MMK_R_question" = 32;
"@MMK_R_question.sc" = 30;
"@MMK_R_questiondown" = -30;
"@MMK_R_questiondown.sc" = -23;
"@MMK_R_quotedblleft" = 37;
"@MMK_R_quotedblright" = 37;
"@MMK_R_reversedze-cy" = -5;
"@MMK_R_rupeeIndian" = 3;
"@MMK_R_s.sc" = 10;
"@MMK_R_section" = 10;
"@MMK_R_semisoftsign-cy" = 8;
"@MMK_R_seven" = 33;
"@MMK_R_seven.osf" = 32;
"@MMK_R_slash" = -43;
"@MMK_R_t" = 27;
"@MMK_R_t.sc" = 33;
"@MMK_R_te-cy" = 8;
"@MMK_R_three" = 5;
"@MMK_R_three.osf" = 20;
"@MMK_R_trademark" = 5;
"@MMK_R_tshe-cy" = 28;
"@MMK_R_two" = 3;
"@MMK_R_two.osf" = 32;
"@MMK_R_v" = 31;
"@MMK_R_v.sc" = 22;
"@MMK_R_y.sc" = 20;
"@MMK_R_zero.osf" = -2;
};
"@MMK_L_quotedblleft.sc" = {
"@MMK_R_a.sc" = -38;
"@MMK_R_a.sc.ss01" = -2;
"@MMK_R_backslash" = 22;
"@MMK_R_c.sc" = 2;
"@MMK_R_comma" = -20;
"@MMK_R_exclam.sc" = 8;
"@MMK_R_exclamdown.sc" = 8;
"@MMK_R_guillemetright.sc" = 8;
"@MMK_R_ordfeminine" = 12;
"@MMK_R_paragraph" = 7;
"@MMK_R_periodcentered" = 8;
"@MMK_R_question.sc" = 5;
"@MMK_R_questiondown.sc" = -15;
"@MMK_R_s.sc" = 10;
"@MMK_R_slash" = -2;
"@MMK_R_t.sc" = 23;
"@MMK_R_v.sc" = 2;
"@MMK_R_x.sc" = -18;
};
"@MMK_L_quotedblright" = {
"@MMK_R_A" = -38;
"@MMK_R_A.ss01" = -3;
"@MMK_R_Che-cy" = 13;
"@MMK_R_Cheabkhasian-cy" = -3;
"@MMK_R_De-cy" = -58;
"@MMK_R_De-cy.ss01" = -3;
"@MMK_R_El-cy.ss01" = -21;
"@MMK_R_Ghestroke-cy" = -21;
"@MMK_R_J" = -4;
"@MMK_R_J.ss01" = -8;
"@MMK_R_S" = 10;
"@MMK_R_T" = 22;
"@MMK_R_T.ss01" = 32;
"@MMK_R_V" = 23;
"@MMK_R_X" = 2;
"@MMK_R_Y" = 22;
"@MMK_R_a" = -10;
"@MMK_R_a.sc" = -38;
"@MMK_R_a.sc.ss01" = -3;
"@MMK_R_ampersand" = -3;
"@MMK_R_backslash" = 43;
"@MMK_R_c" = -22;
"@MMK_R_c.sc" = -2;
"@MMK_R_cheabkhasian-cy" = -5;
"@MMK_R_comma" = -23;
"@MMK_R_de-cy" = -67;
"@MMK_R_exclam" = 8;
"@MMK_R_exclam.sc" = 8;
"@MMK_R_exclamdown" = 8;
"@MMK_R_exclamdown.sc" = 8;
"@MMK_R_ezhcaron" = -4;
"@MMK_R_f.sc.ss01" = -10;
"@MMK_R_four" = -59;
"@MMK_R_four.osf" = -42;
"@MMK_R_guillemetright.sc" = 8;
"@MMK_R_nine" = 10;
"@MMK_R_one" = 42;
"@MMK_R_one.osf" = 42;
"@MMK_R_ordfeminine" = 30;
"@MMK_R_paragraph" = 32;
"@MMK_R_percent" = 40;
"@MMK_R_question" = 32;
"@MMK_R_question.sc" = 30;
"@MMK_R_questiondown" = -30;
"@MMK_R_questiondown.sc" = -23;
"@MMK_R_quotedblleft" = 37;
"@MMK_R_quotedblright" = 37;
"@MMK_R_reversedze-cy" = -5;
"@MMK_R_s" = -19;
"@MMK_R_section" = 10;
"@MMK_R_seven" = 22;
"@MMK_R_seven.osf" = 20;
"@MMK_R_slash" = -43;
"@MMK_R_t" = 8;
"@MMK_R_t.sc" = 32;
"@MMK_R_three" = 12;
"@MMK_R_three.osf" = 10;
"@MMK_R_trademark" = 38;
"@MMK_R_tshe-cy" = 44;
"@MMK_R_two" = 20;
"@MMK_R_two.osf" = 10;
"@MMK_R_v" = 12;
"@MMK_R_v.sc" = 22;
"@MMK_R_x.sc" = 2;
"@MMK_R_y.sc" = 30;
"@MMK_R_yen" = 17;
"@MMK_R_zero.osf" = -10;
};
"@MMK_L_quotedblright.sc" = {
"@MMK_R_a.sc" = -38;
"@MMK_R_a.sc.ss01" = -3;
"@MMK_R_backslash" = 22;
"@MMK_R_c.sc" = 2;
"@MMK_R_comma" = -20;
"@MMK_R_exclam.sc" = 8;
"@MMK_R_exclamdown.sc" = 8;
"@MMK_R_guillemetright.sc" = 8;
"@MMK_R_ordfeminine" = 12;
"@MMK_R_paragraph" = 7;
"@MMK_R_periodcentered" = 8;
"@MMK_R_question.sc" = 30;
"@MMK_R_questiondown.sc" = -15;
"@MMK_R_s.sc" = 10;
"@MMK_R_slash" = -22;
"@MMK_R_t.sc" = 41;
"@MMK_R_v.sc" = 21;
"@MMK_R_x.sc" = -7;
"@MMK_R_y.sc" = 11;
};
"@MMK_L_r" = {
"@MMK_R_A" = -47;
"@MMK_R_A.ss01" = -3;
"@MMK_R_B" = -3;
"@MMK_R_C" = -17;
"@MMK_R_Che-cy" = -4;
"@MMK_R_Cheabkhasian-cy" = -3;
"@MMK_R_De-cy" = -32;
"@MMK_R_De-cy.ss01" = -33;
"@MMK_R_Ezh" = -5;
"@MMK_R_S" = -4;
"@MMK_R_T" = -11;
"@MMK_R_U" = -5;
"@MMK_R_V" = -22;
"@MMK_R_X" = -37;
"@MMK_R_Y" = -32;
"@MMK_R_a" = -6;
"@MMK_R_ampersand" = -23;
"@MMK_R_b" = -2;
"@MMK_R_backslash" = -20;
"@MMK_R_be-cy.loclSRB" = -22;
"@MMK_R_braceright" = -3;
"@MMK_R_bracketleft" = -4;
"@MMK_R_c" = -7;
"@MMK_R_cheabkhasian-cy" = -8;
"@MMK_R_colon" = 8;
"@MMK_R_comma" = -10;
"@MMK_R_dagger" = 30;
"@MMK_R_de-cy" = -37;
"@MMK_R_degree" = 38;
"@MMK_R_eight" = 4;
"@MMK_R_ezhcaron" = -6;
"@MMK_R_five" = 4;
"@MMK_R_five.osf" = 5;
"@MMK_R_four" = -18;
"@MMK_R_four.osf" = -28;
"@MMK_R_guillemetright" = 8;
"@MMK_R_i" = -2;
"@MMK_R_nine" = 17;
"@MMK_R_nine.osf" = 24;
"@MMK_R_one" = 13;
"@MMK_R_one.osf" = 27;
"@MMK_R_ordfeminine" = 30;
"@MMK_R_paragraph" = 30;
"@MMK_R_parenleft" = -3;
"@MMK_R_parenright" = -2;
"@MMK_R_periodcentered" = -9;
"@MMK_R_question" = 17;
"@MMK_R_questiondown" = -32;
"@MMK_R_quotedblleft" = 38;
"@MMK_R_quotedblright" = 38;
"@MMK_R_reversedze-cy" = -23;
"@MMK_R_s" = -1;
"@MMK_R_section" = 10;
"@MMK_R_semisoftsign-cy" = -3;
"@MMK_R_seven" = 24;
"@MMK_R_seven.osf" = 30;
"@MMK_R_slash" = -40;
"@MMK_R_t" = 15;
"@MMK_R_three" = -2;
"@MMK_R_three.osf" = 7;
"@MMK_R_two" = 8;
"@MMK_R_two.osf" = 10;
"@MMK_R_underscore" = -18;
"@MMK_R_v" = 15;
"@MMK_R_x" = -2;
"@MMK_R_zero" = 8;
"@MMK_R_zero.osf" = -2;
};
"@MMK_L_r.sc" = {
"@MMK_R_backslash" = -47;
"@MMK_R_exclam" = -5;
"@MMK_R_four" = -8;
"@MMK_R_j.sc" = -10;
"@MMK_R_one" = -8;
"@MMK_R_question" = -45;
"@MMK_R_questiondown" = -20;
"@MMK_R_questiondown.sc" = -5;
"@MMK_R_seven" = -2;
"@MMK_R_t.sc" = -10;
"@MMK_R_three.osf" = -12;
"@MMK_R_underscore" = 22;
"@MMK_R_x.sc" = -20;
"@MMK_R_y.sc" = -10;
};
"@MMK_L_rupeeIndian" = {
"@MMK_R_comma" = -30;
"@MMK_R_eight" = -2;
"@MMK_R_four" = -37;
"@MMK_R_four.osf" = -24;
"@MMK_R_one" = 3;
"@MMK_R_one.osf" = 21;
"@MMK_R_questiondown" = -20;
"@MMK_R_questiondown.sc" = -20;
"@MMK_R_seven" = 2;
"@MMK_R_zero" = -20;
"@MMK_R_zero.osf" = -22;
};
"@MMK_L_s" = {
"@MMK_R_backslash" = -60;
"@MMK_R_cheabkhasian-cy" = -25;
"@MMK_R_degree" = -11;
"@MMK_R_nine" = -5;
"@MMK_R_nine.osf" = -5;
"@MMK_R_one" = -2;
"@MMK_R_paragraph" = -21;
"@MMK_R_question" = -12;
"@MMK_R_semisoftsign-cy" = -13;
"@MMK_R_seven" = -22;
"@MMK_R_three" = -10;
"@MMK_R_three.osf" = -16;
"@MMK_R_trademark" = -12;
"@MMK_R_two" = -10;
"@MMK_R_v" = -10;
"@MMK_R_x" = -10;
};
"@MMK_L_s.sc" = {
"@MMK_R_ampersand" = 10;
"@MMK_R_backslash" = -47;
"@MMK_R_comma" = 10;
"@MMK_R_nine" = -2;
"@MMK_R_ordfeminine" = -10;
"@MMK_R_periodcentered" = 10;
"@MMK_R_question" = -2;
"@MMK_R_question.sc" = -10;
"@MMK_R_questiondown" = -10;
"@MMK_R_quotedblleft.sc" = -10;
"@MMK_R_seven" = -2;
"@MMK_R_t.sc" = -10;
"@MMK_R_three.osf" = -3;
"@MMK_R_trademark" = -8;
"@MMK_R_x.sc" = -11;
"@MMK_R_y.sc" = -15;
};
"@MMK_L_section" = {
"@MMK_R_J" = 2;
"@MMK_R_a" = 2;
"@MMK_R_b" = 2;
"@MMK_R_c" = 2;
"@MMK_R_eight" = 10;
"@MMK_R_four" = 12;
"@MMK_R_i" = 2;
"@MMK_R_j" = 2;
"@MMK_R_periodcentered" = 20;
"@MMK_R_quotedblleft" = 10;
"@MMK_R_quotedblright" = 10;
"@MMK_R_s" = 2;
"@MMK_R_seven" = 2;
"@MMK_R_slash" = 13;
"@MMK_R_t" = 2;
"@MMK_R_u" = 2;
"@MMK_R_underscore" = 2;
"@MMK_R_v" = 2;
"@MMK_R_x" = 2;
"@MMK_R_z" = 2;
};
"@MMK_L_seven" = {
"@MMK_R_A" = -57;
"@MMK_R_A.ss01" = -16;
"@MMK_R_C" = -16;
"@MMK_R_E.ss01" = -1;
"@MMK_R_J" = -22;
"@MMK_R_J.ss01" = -12;
"@MMK_R_S" = -2;
"@MMK_R_T.ss01" = 10;
"@MMK_R_V" = 5;
"@MMK_R_X" = -1;
"@MMK_R_Y" = 13;
"@MMK_R_Z" = -2;
"@MMK_R_a" = -36;
"@MMK_R_a.sc" = -48;
"@MMK_R_a.sc.ss01" = -10;
"@MMK_R_ampersand" = -23;
"@MMK_R_backslash" = 10;
"@MMK_R_braceright" = 15;
"@MMK_R_braceright.case" = 15;
"@MMK_R_c" = -50;
"@MMK_R_c.sc" = -20;
"@MMK_R_colon" = -20;
"@MMK_R_comma" = -47;
"@MMK_R_currency" = -20;
"@MMK_R_degree" = 13;
"@MMK_R_eight" = -16;
"@MMK_R_exclamdown" = -22;
"@MMK_R_f.sc.ss01" = -8;
"@MMK_R_five" = -16;
"@MMK_R_florin" = -20;
"@MMK_R_four" = -65;
"@MMK_R_guillemetright" = -12;
"@MMK_R_guillemetright.case" = -12;
"@MMK_R_i" = -17;
"@MMK_R_j" = -22;
"@MMK_R_j.sc" = -12;
"@MMK_R_j.sc.ss01" = -12;
"@MMK_R_lira" = -11;
"@MMK_R_one" = 10;
"@MMK_R_ordfeminine" = 22;
"@MMK_R_paragraph" = 22;
"@MMK_R_parenright.case" = -3;
"@MMK_R_percent" = 8;
"@MMK_R_periodcentered" = -50;
"@MMK_R_periodcentered.case" = -30;
"@MMK_R_question" = 15;
"@MMK_R_questiondown" = -53;
"@MMK_R_quotedbl" = 30;
"@MMK_R_quotedblleft" = 10;
"@MMK_R_quotedblright" = 20;
"@MMK_R_s" = -30;
"@MMK_R_s.sc" = -2;
"@MMK_R_section" = -10;
"@MMK_R_slash" = -37;
"@MMK_R_t" = -3;
"@MMK_R_t.sc" = 18;
"@MMK_R_three" = -6;
"@MMK_R_trademark" = 40;
"@MMK_R_u" = -22;
"@MMK_R_underscore" = -30;
"@MMK_R_v" = 7;
"@MMK_R_v.sc" = 10;
"@MMK_R_x" = -5;
"@MMK_R_x.sc" = 8;
"@MMK_R_y.sc" = 27;
"@MMK_R_yen" = 18;
"@MMK_R_z" = -18;
"@MMK_R_zero" = -20;
};
"@MMK_L_seven.osf" = {
"@MMK_R_A" = -41;
"@MMK_R_J" = -13;
"@MMK_R_J.ss01" = -23;
"@MMK_R_T" = 18;
"@MMK_R_T.ss01" = 10;
"@MMK_R_X" = -15;
"@MMK_R_Y" = -2;
"@MMK_R_Y.ss01" = -2;
"@MMK_R_Z" = -3;
"@MMK_R_a" = -11;
"@MMK_R_a.sc" = -39;
"@MMK_R_a.sc.ss01" = -2;
"@MMK_R_ampersand" = -22;
"@MMK_R_backslash" = -22;
"@MMK_R_braceright.case" = -3;
"@MMK_R_c" = -16;
"@MMK_R_c.sc" = -2;
"@MMK_R_colon" = 8;
"@MMK_R_comma" = -32;
"@MMK_R_degree" = 37;
"@MMK_R_f.sc.ss01" = -2;
"@MMK_R_five.osf" = -10;
"@MMK_R_florin" = -3;
"@MMK_R_four.osf" = -67;
"@MMK_R_guillemetright" = -2;
"@MMK_R_i" = -1;
"@MMK_R_j" = -8;
"@MMK_R_one.osf" = 10;
"@MMK_R_ordfeminine" = 40;
"@MMK_R_paragraph" = 20;
"@MMK_R_parenright.case" = -2;
"@MMK_R_percent" = 10;
"@MMK_R_periodcentered" = -20;
"@MMK_R_question" = 10;
"@MMK_R_questiondown" = -32;
"@MMK_R_quotedbl" = 20;
"@MMK_R_quotedblleft" = 20;
"@MMK_R_quotedblright" = 10;
"@MMK_R_s" = -1;
"@MMK_R_seven.osf" = -2;
"@MMK_R_slash" = -20;
"@MMK_R_t" = 30;
"@MMK_R_t.sc" = 28;
"@MMK_R_three.osf" = -2;
"@MMK_R_trademark" = 30;
"@MMK_R_underscore" = -12;
"@MMK_R_v" = 20;
"@MMK_R_v.sc" = 25;
"@MMK_R_x" = -1;
"@MMK_R_x.sc" = 8;
"@MMK_R_y.sc" = 33;
"@MMK_R_yen" = -2;
"@MMK_R_z" = -2;
"@MMK_R_z.sc" = 2;
"@MMK_R_zero.osf" = -15;
};
"@MMK_L_six" = {
"@MMK_R_A" = 2;
"@MMK_R_J.ss01" = -25;
"@MMK_R_T" = -10;
"@MMK_R_T.ss01" = -3;
"@MMK_R_V" = -10;
"@MMK_R_X" = -2;
"@MMK_R_Y" = -3;
"@MMK_R_Y.ss01" = -2;
"@MMK_R_a.sc" = 10;
"@MMK_R_ampersand" = 10;
"@MMK_R_c" = 6;
"@MMK_R_comma" = 10;
"@MMK_R_currency" = 10;
"@MMK_R_degree" = -12;
"@MMK_R_j" = -8;
"@MMK_R_j.sc" = -2;
"@MMK_R_j.sc.ss01" = -20;
"@MMK_R_one.osf" = -1;
"@MMK_R_ordfeminine" = -3;
"@MMK_R_percent" = -20;
"@MMK_R_periodcentered" = 5;
"@MMK_R_quotedbl" = -2;
"@MMK_R_quotedblleft" = -10;
"@MMK_R_section" = 20;
"@MMK_R_seven" = -2;
"@MMK_R_seven.osf" = -2;
"@MMK_R_slash" = 10;
"@MMK_R_t.sc" = -8;
"@MMK_R_three.osf" = -2;
"@MMK_R_v" = -18;
"@MMK_R_v.sc" = -12;
"@MMK_R_x" = -15;
"@MMK_R_x.sc" = -8;
"@MMK_R_y.sc" = -8;
};
"@MMK_L_slash" = {
"@MMK_R_A" = -40;
"@MMK_R_A.ss01" = -10;
"@MMK_R_C" = -20;
"@MMK_R_E.ss01" = -20;
"@MMK_R_J" = -10;
"@MMK_R_J.ss01" = -10;
"@MMK_R_S" = -20;
"@MMK_R_T" = 30;
"@MMK_R_T.ss01" = 30;
"@MMK_R_V" = 30;
"@MMK_R_Y" = 30;
"@MMK_R_a" = -62;
"@MMK_R_a.sc" = -67;
"@MMK_R_a.sc.ss01" = -57;
"@MMK_R_ampersand" = -32;
"@MMK_R_ampersand.sc" = -38;
"@MMK_R_b.sc" = -47;
"@MMK_R_backslash" = 7;
"@MMK_R_braceright" = 30;
"@MMK_R_braceright.case" = 47;
"@MMK_R_c" = -62;
"@MMK_R_c.sc" = -57;
"@MMK_R_colon" = -15;
"@MMK_R_comma" = -92;
"@MMK_R_degree" = 42;
"@MMK_R_e.sc.ss01" = -52;
"@MMK_R_eight" = -28;
"@MMK_R_exclam.sc" = -5;
"@MMK_R_exclamdown" = -65;
"@MMK_R_exclamdown.sc" = -5;
"@MMK_R_f.sc.ss01" = -57;
"@MMK_R_five.osf" = -30;
"@MMK_R_four" = -62;
"@MMK_R_four.osf" = -80;
"@MMK_R_guillemetright" = -35;
"@MMK_R_guillemetright.case" = -2;
"@MMK_R_guillemetright.sc" = -5;
"@MMK_R_i" = -62;
"@MMK_R_i.sc.ss01" = -45;
"@MMK_R_j" = 8;
"@MMK_R_j.sc" = -22;
"@MMK_R_j.sc.ss01" = -40;
"@MMK_R_lira" = -10;
"@MMK_R_nine.osf" = -30;
"@MMK_R_one" = 30;
"@MMK_R_parenright" = 38;
"@MMK_R_parenright.case" = 47;
"@MMK_R_periodcentered" = -73;
"@MMK_R_periodcentered.case" = -20;
"@MMK_R_question.sc" = -5;
"@MMK_R_questiondown" = -75;
"@MMK_R_questiondown.sc" = -52;
"@MMK_R_quotedbl" = 60;
"@MMK_R_quotedbl.sc" = 30;
"@MMK_R_quotedblleft" = 35;
"@MMK_R_quotedblleft.sc" = 2;
"@MMK_R_quotedblright" = 43;
"@MMK_R_quotedblright.sc" = 22;
"@MMK_R_rupeeIndian" = 3;
"@MMK_R_s" = -62;
"@MMK_R_s.sc" = -57;
"@MMK_R_section" = -20;
"@MMK_R_seven" = 3;
"@MMK_R_slash" = -77;
"@MMK_R_t" = -22;
"@MMK_R_t.sc" = -10;
"@MMK_R_three.osf" = -30;
"@MMK_R_trademark" = 42;
"@MMK_R_two.osf" = -28;
"@MMK_R_u" = -62;
"@MMK_R_u.sc" = -47;
"@MMK_R_underscore" = -113;
"@MMK_R_v" = -30;
"@MMK_R_v.sc" = -3;
"@MMK_R_x" = -45;
"@MMK_R_x.sc" = -22;
"@MMK_R_y.sc" = -2;
"@MMK_R_y.sc.ss01" = -40;
"@MMK_R_yen" = 40;
"@MMK_R_z" = -62;
"@MMK_R_z.sc" = -47;
"@MMK_R_zero" = -20;
"@MMK_R_zero.osf" = -40;
};
"@MMK_L_softsign-cy" = {
"@MMK_R_Che-cy" = -59;
"@MMK_R_Cheabkhasian-cy" = -58;
"@MMK_R_De-cy" = -3;
"@MMK_R_T" = -110;
"@MMK_R_V" = -36;
"@MMK_R_X" = -30;
"@MMK_R_Y" = -38;
"@MMK_R_braceright" = -23;
"@MMK_R_cheabkhasian-cy" = -27;
"@MMK_R_comma" = -2;
"@MMK_R_de-cy" = -4;
"@MMK_R_ezhcaron" = -17;
"@MMK_R_question" = -48;
"@MMK_R_quotedblleft" = -46;
"@MMK_R_quotedblright" = -37;
"@MMK_R_reversedze-cy" = -3;
"@MMK_R_semisoftsign-cy" = -17;
"@MMK_R_te-cy" = -47;
"@MMK_R_v" = -38;
"@MMK_R_x" = -36;
};
"@MMK_L_t" = {
"@MMK_R_ampersand" = -6;
"@MMK_R_backslash" = -62;
"@MMK_R_c" = -16;
"@MMK_R_comma" = 10;
"@MMK_R_degree" = -5;
"@MMK_R_eight" = -9;
"@MMK_R_five" = -2;
"@MMK_R_four" = -15;
"@MMK_R_nine" = -3;
"@MMK_R_nine.osf" = -2;
"@MMK_R_one" = -12;
"@MMK_R_one.osf" = -2;
"@MMK_R_ordfeminine" = -12;
"@MMK_R_paragraph" = -20;
"@MMK_R_periodcentered" = -10;
"@MMK_R_question" = -12;
"@MMK_R_quotedblleft" = -2;
"@MMK_R_section" = -2;
"@MMK_R_seven" = -13;
"@MMK_R_t" = -11;
"@MMK_R_three.osf" = -13;
"@MMK_R_trademark" = -22;
"@MMK_R_two" = -2;
"@MMK_R_underscore" = 23;
"@MMK_R_v" = -10;
"@MMK_R_zero" = -12;
"@MMK_R_zero.osf" = -12;
};
"@MMK_L_t.sc" = {
"@MMK_R_a.sc" = -35;
"@MMK_R_ampersand" = -18;
"@MMK_R_ampersand.sc" = -10;
"@MMK_R_backslash" = -10;
"@MMK_R_braceright" = 17;
"@MMK_R_c.sc" = -10;
"@MMK_R_colon" = 20;
"@MMK_R_comma" = -23;
"@MMK_R_degree" = 40;
"@MMK_R_eight" = 2;
"@MMK_R_exclam" = 20;
"@MMK_R_exclam.sc" = 17;
"@MMK_R_exclamdown" = 17;
"@MMK_R_exclamdown.sc" = 8;
"@MMK_R_five" = 2;
"@MMK_R_four" = -29;
"@MMK_R_four.osf" = -40;
"@MMK_R_guillemetright" = 18;
"@MMK_R_guillemetright.sc" = 10;
"@MMK_R_j.sc" = -10;
"@MMK_R_nine" = 30;
"@MMK_R_nine.osf" = 27;
"@MMK_R_one" = 20;
"@MMK_R_one.osf" = 38;
"@MMK_R_ordfeminine" = 45;
"@MMK_R_paragraph" = 33;
"@MMK_R_periodcentered" = -8;
"@MMK_R_question" = 28;
"@MMK_R_question.sc" = 37;
"@MMK_R_questiondown" = -50;
"@MMK_R_questiondown.sc" = -32;
"@MMK_R_quotedblleft" = 33;
"@MMK_R_quotedblleft.sc" = 23;
"@MMK_R_quotedblright" = 32;
"@MMK_R_quotedblright.sc" = 41;
"@MMK_R_seven" = 28;
"@MMK_R_seven.osf" = 28;
"@MMK_R_slash" = -18;
"@MMK_R_t.sc" = 10;
"@MMK_R_three" = 8;
"@MMK_R_three.osf" = 17;
"@MMK_R_trademark" = 28;
"@MMK_R_two" = 18;
"@MMK_R_two.osf" = 26;
"@MMK_R_v.sc" = -17;
"@MMK_R_x.sc" = -30;
"@MMK_R_y.sc" = -17;
"@MMK_R_zero" = 8;
};
"@MMK_L_thorn.sc" = {
"@MMK_R_a.sc" = -30;
"@MMK_R_backslash" = -52;
"@MMK_R_comma" = -15;
"@MMK_R_degree" = -8;
"@MMK_R_five" = -8;
"@MMK_R_four.osf" = -17;
"@MMK_R_guillemetright" = -10;
"@MMK_R_j.sc" = -40;
"@MMK_R_nine" = -2;
"@MMK_R_one" = -25;
"@MMK_R_one.osf" = -12;
"@MMK_R_ordfeminine" = -10;
"@MMK_R_paragraph" = -18;
"@MMK_R_periodcentered" = 5;
"@MMK_R_question" = -50;
"@MMK_R_question.sc" = -12;
"@MMK_R_questiondown" = -40;
"@MMK_R_questiondown.sc" = -10;
"@MMK_R_seven" = -15;
"@MMK_R_slash" = -20;
"@MMK_R_t.sc" = -25;
"@MMK_R_three" = -35;
"@MMK_R_three.osf" = -28;
"@MMK_R_two" = -33;
"@MMK_R_two.osf" = -10;
"@MMK_R_underscore" = -10;
"@MMK_R_v.sc" = -10;
"@MMK_R_x.sc" = -30;
"@MMK_R_y.sc" = -30;
"@MMK_R_z.sc" = -16;
};
"@MMK_L_three" = {
"@MMK_R_A" = 1;
"@MMK_R_J.ss01" = -29;
"@MMK_R_T" = -9;
"@MMK_R_V" = -10;
"@MMK_R_X" = -10;
"@MMK_R_Y" = -10;
"@MMK_R_a.sc" = -8;
"@MMK_R_degree" = -15;
"@MMK_R_five" = -10;
"@MMK_R_j" = -7;
"@MMK_R_j.sc" = -7;
"@MMK_R_j.sc.ss01" = -20;
"@MMK_R_percent" = -10;
"@MMK_R_quotedbl" = -10;
"@MMK_R_seven" = -7;
"@MMK_R_t.sc" = 2;
"@MMK_R_three" = -5;
"@MMK_R_two" = -5;
"@MMK_R_v" = -9;
"@MMK_R_v.sc" = 3;
"@MMK_R_x" = -18;
"@MMK_R_y.sc" = 2;
};
"@MMK_L_three.osf" = {
"@MMK_R_A" = 2;
"@MMK_R_C" = -9;
"@MMK_R_J" = 18;
"@MMK_R_T" = -2;
"@MMK_R_V" = -9;
"@MMK_R_Y" = -15;
"@MMK_R_a" = 12;
"@MMK_R_backslash" = -22;
"@MMK_R_comma" = 10;
"@MMK_R_currency" = 2;
"@MMK_R_florin" = 10;
"@MMK_R_four.osf" = 1;
"@MMK_R_j.sc" = 12;
"@MMK_R_j.sc.ss01" = 2;
"@MMK_R_question" = -20;
"@MMK_R_quotedblright" = -10;
"@MMK_R_seven.osf" = -10;
"@MMK_R_slash" = 10;
"@MMK_R_three.osf" = -5;
"@MMK_R_underscore" = 10;
"@MMK_R_v" = 2;
};
"@MMK_L_trademark" = {
"@MMK_R_A" = -20;
"@MMK_R_J" = -20;
"@MMK_R_J.ss01" = -10;
"@MMK_R_a" = 22;
"@MMK_R_a.sc" = 17;
"@MMK_R_backslash" = 40;
"@MMK_R_c" = 22;
"@MMK_R_exclamdown" = 8;
"@MMK_R_four.osf" = -10;
"@MMK_R_nine" = 30;
"@MMK_R_nine.osf" = 30;
"@MMK_R_one.osf" = 30;
"@MMK_R_ordfeminine" = 20;
"@MMK_R_periodcentered" = 10;
"@MMK_R_questiondown" = -3;
"@MMK_R_s" = 22;
"@MMK_R_s.sc" = 8;
"@MMK_R_seven" = 18;
"@MMK_R_seven.osf" = 30;
"@MMK_R_slash" = -33;
"@MMK_R_t" = 38;
"@MMK_R_t.sc" = 28;
"@MMK_R_three.osf" = 8;
"@MMK_R_two.osf" = 10;
"@MMK_R_v" = 3;
"@MMK_R_v.sc" = 10;
"@MMK_R_y.sc" = 17;
"@MMK_R_zero.osf" = 10;
};
"@MMK_L_two" = {
"@MMK_R_A" = 8;
"@MMK_R_J" = 18;
"@MMK_R_J.ss01" = 8;
"@MMK_R_T" = -2;
"@MMK_R_V" = -14;
"@MMK_R_Y" = -19;
"@MMK_R_a.sc" = 8;
"@MMK_R_ampersand" = -2;
"@MMK_R_backslash" = -2;
"@MMK_R_c" = -10;
"@MMK_R_comma" = 10;
"@MMK_R_four" = -5;
"@MMK_R_j.sc" = 17;
"@MMK_R_j.sc.ss01" = 18;
"@MMK_R_percent" = 10;
"@MMK_R_periodcentered" = -2;
"@MMK_R_seven" = -1;
"@MMK_R_slash" = 10;
"@MMK_R_t.sc" = 20;
"@MMK_R_u" = -1;
"@MMK_R_underscore" = 30;
"@MMK_R_v" = 1;
"@MMK_R_v.sc" = 2;
"@MMK_R_x" = -2;
"@MMK_R_y.sc" = 10;
"@MMK_R_z" = -2;
"@MMK_R_z.sc" = 8;
"@MMK_R_zero" = -1;
};
"@MMK_L_two.osf" = {
"@MMK_R_A" = 7;
"@MMK_R_J" = 17;
"@MMK_R_J.ss01" = 8;
"@MMK_R_T" = -10;
"@MMK_R_T.ss01" = -11;
"@MMK_R_V" = -20;
"@MMK_R_X" = -2;
"@MMK_R_Y" = -15;
"@MMK_R_Z" = -2;
"@MMK_R_a" = 9;
"@MMK_R_a.sc" = 17;
"@MMK_R_ampersand" = -2;
"@MMK_R_backslash" = -23;
"@MMK_R_colon" = 4;
"@MMK_R_comma" = 8;
"@MMK_R_currency" = 10;
"@MMK_R_degree" = -2;
"@MMK_R_florin" = 8;
"@MMK_R_four.osf" = -4;
"@MMK_R_j.sc" = 25;
"@MMK_R_j.sc.ss01" = 17;
"@MMK_R_lira" = 10;
"@MMK_R_percent" = -1;
"@MMK_R_question" = -20;
"@MMK_R_quotedblleft" = -2;
"@MMK_R_quotedblright" = -10;
"@MMK_R_seven.osf" = -1;
"@MMK_R_slash" = 20;
"@MMK_R_t" = 10;
"@MMK_R_three.osf" = -2;
"@MMK_R_underscore" = 28;
"@MMK_R_x" = -2;
"@MMK_R_x.sc" = 8;
"@MMK_R_y.sc" = -8;
"@MMK_R_yen" = -2;
};
"@MMK_L_uhorn" = {
"@MMK_R_a" = -7;
"@MMK_R_b" = 13;
"@MMK_R_backslash" = 47;
"@MMK_R_braceright" = 49;
"@MMK_R_c" = -20;
"@MMK_R_colon" = 8;
"@MMK_R_comma" = -20;
"@MMK_R_dagger" = 20;
"@MMK_R_degree" = 63;
"@MMK_R_eight" = 13;
"@MMK_R_exclam" = 49;
"@MMK_R_exclamdown" = -2;
"@MMK_R_five" = -2;
"@MMK_R_five.osf" = -3;
"@MMK_R_four" = -20;
"@MMK_R_four.osf" = -20;
"@MMK_R_guillemetright" = 5;
"@MMK_R_i" = -3;
"@MMK_R_j" = 5;
"@MMK_R_nine" = 49;
"@MMK_R_nine.osf" = 13;
"@MMK_R_one" = 59;
"@MMK_R_one.osf" = 59;
"@MMK_R_ordfeminine" = 68;
"@MMK_R_paragraph" = 61;
"@MMK_R_parenright" = 33;
"@MMK_R_periodcentered" = -20;
"@MMK_R_question" = 80;
"@MMK_R_questiondown" = -20;
"@MMK_R_quotedblleft" = 48;
"@MMK_R_quotedblright" = 58;
"@MMK_R_s" = -3;
"@MMK_R_section" = 25;
"@MMK_R_seven" = 57;
"@MMK_R_seven.osf" = 49;
"@MMK_R_slash" = -20;
"@MMK_R_t" = 33;
"@MMK_R_three" = 46;
"@MMK_R_three.osf" = 31;
"@MMK_R_trademark" = 79;
"@MMK_R_two" = 51;
"@MMK_R_two.osf" = 17;
"@MMK_R_u" = -3;
"@MMK_R_underscore" = -20;
"@MMK_R_v" = -3;
"@MMK_R_x" = -3;
"@MMK_R_z" = -3;
"@MMK_R_zero" = 5;
"@MMK_R_zero.osf" = -3;
};
"@MMK_L_uhorn.sc" = {
"@MMK_R_C" = -3;
"@MMK_R_a.sc" = -2;
"@MMK_R_ampersand" = -3;
"@MMK_R_ampersand.sc" = -3;
"@MMK_R_b.sc" = -3;
"@MMK_R_backslash" = 76;
"@MMK_R_braceright" = 83;
"@MMK_R_colon" = 5;
"@MMK_R_comma" = -20;
"@MMK_R_degree" = 66;
"@MMK_R_eight" = 21;
"@MMK_R_exclam" = 54;
"@MMK_R_exclam.sc" = 38;
"@MMK_R_exclamdown" = 5;
"@MMK_R_exclamdown.sc" = 21;
"@MMK_R_five" = 7;
"@MMK_R_five.osf" = -3;
"@MMK_R_four" = -20;
"@MMK_R_four.osf" = -20;
"@MMK_R_guillemetright" = -3;
"@MMK_R_guillemetright.sc" = -3;
"@MMK_R_nine" = 48;
"@MMK_R_nine.osf" = 5;
"@MMK_R_one" = 74;
"@MMK_R_one.osf" = 66;
"@MMK_R_ordfeminine" = 79;
"@MMK_R_paragraph" = 74;
"@MMK_R_parenright" = 71;
"@MMK_R_periodcentered" = -20;
"@MMK_R_question" = 78;
"@MMK_R_question.sc" = 41;
"@MMK_R_questiondown" = -20;
"@MMK_R_questiondown.sc" = -20;
"@MMK_R_quotedblleft" = 49;
"@MMK_R_quotedblleft.sc" = 8;
"@MMK_R_quotedblright" = 66;
"@MMK_R_quotedblright.sc" = 33;
"@MMK_R_seven" = 66;
"@MMK_R_seven.osf" = 58;
"@MMK_R_slash" = -20;
"@MMK_R_three" = 58;
"@MMK_R_three.osf" = 38;
"@MMK_R_trademark" = 96;
"@MMK_R_two" = 66;
"@MMK_R_two.osf" = 21;
"@MMK_R_underscore" = -20;
"@MMK_R_x.sc" = -2;
"@MMK_R_y.sc" = -2;
"@MMK_R_zero" = -3;
"@MMK_R_zero.osf" = -3;
};
"@MMK_L_uhornacute.sc.ss01" = {
"@MMK_R_backslash" = 100;
"@MMK_R_colon" = 20;
"@MMK_R_ordfeminine" = 100;
};
"@MMK_L_underscore" = {
"@MMK_R_A" = 52;
"@MMK_R_B" = 30;
"@MMK_R_C" = -30;
"@MMK_R_E.ss01" = -20;
"@MMK_R_J" = 73;
"@MMK_R_J.ss01" = 82;
"@MMK_R_S" = 20;
"@MMK_R_T.ss01" = -2;
"@MMK_R_U" = -10;
"@MMK_R_V" = -10;
"@MMK_R_X" = 42;
"@MMK_R_Y" = -2;
"@MMK_R_Y.ss01" = 8;
"@MMK_R_Z" = 20;
"@MMK_R_a" = -10;
"@MMK_R_a.sc" = 50;
"@MMK_R_backslash" = -130;
"@MMK_R_braceright" = 37;
"@MMK_R_braceright.case" = 37;
"@MMK_R_c" = -22;
"@MMK_R_c.sc" = -10;
"@MMK_R_colon" = 10;
"@MMK_R_comma" = 10;
"@MMK_R_currency" = -2;
"@MMK_R_e.sc.ss01" = -10;
"@MMK_R_exclamdown" = 25;
"@MMK_R_exclamdown.sc" = 17;
"@MMK_R_five" = 10;
"@MMK_R_five.osf" = 42;
"@MMK_R_florin" = 100;
"@MMK_R_four" = -22;
"@MMK_R_four.osf" = 17;
"@MMK_R_guillemetright" = 10;
"@MMK_R_guillemetright.case" = 2;
"@MMK_R_j" = 117;
"@MMK_R_j.sc" = 50;
"@MMK_R_j.sc.ss01" = 62;
"@MMK_R_lira" = 12;
"@MMK_R_nine" = 10;
"@MMK_R_nine.osf" = 18;
"@MMK_R_one" = -6;
"@MMK_R_one.osf" = -8;
"@MMK_R_ordfeminine" = -10;
"@MMK_R_paragraph" = -41;
"@MMK_R_parenright" = 8;
"@MMK_R_parenright.case" = 33;
"@MMK_R_percent" = -22;
"@MMK_R_question" = -22;
"@MMK_R_question.sc" = -20;
"@MMK_R_quotedbl" = -2;
"@MMK_R_s" = 10;
"@MMK_R_s.sc" = 30;
"@MMK_R_section" = 22;
"@MMK_R_seven.osf" = 7;
"@MMK_R_slash" = 115;
"@MMK_R_t" = -20;
"@MMK_R_three" = 22;
"@MMK_R_three.osf" = 60;
"@MMK_R_trademark" = -50;
"@MMK_R_two" = 23;
"@MMK_R_two.osf" = 22;
"@MMK_R_u" = -22;
"@MMK_R_u.sc" = -10;
"@MMK_R_v" = -18;
"@MMK_R_v.sc" = -10;
"@MMK_R_x" = 32;
"@MMK_R_x.sc" = 42;
"@MMK_R_y.sc" = -2;
"@MMK_R_yen" = -10;
"@MMK_R_z" = 7;
"@MMK_R_z.sc" = 20;
"@MMK_R_zero" = -20;
"@MMK_R_zero.osf" = -10;
};
"@MMK_L_v" = {
"@MMK_R_A" = -29;
"@MMK_R_A.ss01" = -13;
"@MMK_R_C" = -2;
"@MMK_R_Che-cy" = -3;
"@MMK_R_Cheabkhasian-cy" = -3;
"@MMK_R_De-cy" = -24;
"@MMK_R_De-cy.ss01" = -18;
"@MMK_R_S" = -2;
"@MMK_R_T" = -4;
"@MMK_R_X" = -30;
"@MMK_R_Y" = -22;
"@MMK_R_a" = -19;
"@MMK_R_ampersand" = -28;
"@MMK_R_backslash" = -20;
"@MMK_R_be-cy.loclSRB" = -15;
"@MMK_R_c" = -15;
"@MMK_R_cheabkhasian-cy" = -22;
"@MMK_R_colon" = 2;
"@MMK_R_comma" = -31;
"@MMK_R_dagger" = 20;
"@MMK_R_de-cy" = -44;
"@MMK_R_degree" = 32;
"@MMK_R_eight" = 2;
"@MMK_R_ezhcaron" = -11;
"@MMK_R_five" = 2;
"@MMK_R_five.osf" = 2;
"@MMK_R_four" = -37;
"@MMK_R_four.osf" = -48;
"@MMK_R_j" = -15;
"@MMK_R_nine" = 30;
"@MMK_R_nine.osf" = 2;
"@MMK_R_one" = 25;
"@MMK_R_one.osf" = 30;
"@MMK_R_ordfeminine" = 33;
"@MMK_R_paragraph" = 30;
"@MMK_R_periodcentered" = -18;
"@MMK_R_question" = 38;
"@MMK_R_questiondown" = -42;
"@MMK_R_quotedblleft" = 31;
"@MMK_R_quotedblright" = 12;
"@MMK_R_reversedze-cy" = -18;
"@MMK_R_s" = -9;
"@MMK_R_semisoftsign-cy" = -2;
"@MMK_R_seven" = 15;
"@MMK_R_seven.osf" = 20;
"@MMK_R_slash" = -38;
"@MMK_R_t" = 15;
"@MMK_R_te-cy" = 6;
"@MMK_R_three" = 7;
"@MMK_R_three.osf" = -2;
"@MMK_R_two" = 25;
"@MMK_R_two.osf" = 10;
"@MMK_R_underscore" = -18;
"@MMK_R_v" = -17;
"@MMK_R_x" = -30;
"@MMK_R_z" = -10;
"@MMK_R_zero" = 2;
"@MMK_R_zero.osf" = -4;
};
"@MMK_L_v.sc" = {
"@MMK_R_C" = -10;
"@MMK_R_a.sc" = -39;
"@MMK_R_ampersand" = -30;
"@MMK_R_ampersand.sc" = -20;
"@MMK_R_backslash" = -2;
"@MMK_R_braceright" = 25;
"@MMK_R_c.sc" = -24;
"@MMK_R_comma" = -38;
"@MMK_R_degree" = 35;
"@MMK_R_eight" = 1;
"@MMK_R_exclam" = 8;
"@MMK_R_exclam.sc" = 8;
"@MMK_R_exclamdown" = -10;
"@MMK_R_f.sc.ss01" = -20;
"@MMK_R_five" = 2;
"@MMK_R_five.osf" = -8;
"@MMK_R_four" = -18;
"@MMK_R_four.osf" = -45;
"@MMK_R_guillemetright" = -10;
"@MMK_R_guillemetright.sc" = -10;
"@MMK_R_j.sc" = -15;
"@MMK_R_nine" = 14;
"@MMK_R_nine.osf" = 10;
"@MMK_R_one" = 25;
"@MMK_R_one.osf" = 27;
"@MMK_R_ordfeminine" = 42;
"@MMK_R_paragraph" = 28;
"@MMK_R_periodcentered" = -23;
"@MMK_R_question" = 47;
"@MMK_R_question.sc" = 17;
"@MMK_R_questiondown" = -40;
"@MMK_R_questiondown.sc" = -40;
"@MMK_R_quotedblleft" = 22;
"@MMK_R_quotedblleft.sc" = 2;
"@MMK_R_quotedblright" = 22;
"@MMK_R_quotedblright.sc" = 21;
"@MMK_R_s.sc" = -15;
"@MMK_R_seven" = 18;
"@MMK_R_seven.osf" = 27;
"@MMK_R_slash" = -30;
"@MMK_R_t.sc" = -17;
"@MMK_R_three" = 7;
"@MMK_R_three.osf" = 8;
"@MMK_R_trademark" = 43;
"@MMK_R_two" = 25;
"@MMK_R_two.osf" = 2;
"@MMK_R_underscore" = -10;
"@MMK_R_x.sc" = -28;
"@MMK_R_y.sc" = -28;
"@MMK_R_z.sc" = -10;
"@MMK_R_zero" = -8;
"@MMK_R_zero.osf" = -10;
};
"@MMK_L_w.ss01" = {
"@MMK_R_backslash" = -50;
"@MMK_R_comma" = -3;
"@MMK_R_one" = -2;
"@MMK_R_three" = -10;
"@MMK_R_two" = -2;
"@MMK_R_underscore" = -22;
};
"@MMK_L_x" = {
"@MMK_R_C" = -17;
"@MMK_R_Che-cy" = -13;
"@MMK_R_Cheabkhasian-cy" = -16;
"@MMK_R_Ezh" = -17;
"@MMK_R_S" = -2;
"@MMK_R_T" = -11;
"@MMK_R_U" = -3;
"@MMK_R_V" = -24;
"@MMK_R_Y" = -30;
"@MMK_R_a" = -10;
"@MMK_R_ampersand" = -20;
"@MMK_R_backslash" = -42;
"@MMK_R_be-cy.loclSRB" = -17;
"@MMK_R_c" = -16;
"@MMK_R_cheabkhasian-cy" = -42;
"@MMK_R_colon" = -10;
"@MMK_R_dagger" = -10;
"@MMK_R_degree" = 10;
"@MMK_R_eight" = -8;
"@MMK_R_ezhcaron" = -22;
"@MMK_R_four" = -38;
"@MMK_R_j" = 38;
"@MMK_R_nine.osf" = -2;
"@MMK_R_one" = 17;
"@MMK_R_one.osf" = 18;
"@MMK_R_ordfeminine" = 18;
"@MMK_R_paragraph" = 8;
"@MMK_R_periodcentered" = -28;
"@MMK_R_question" = 25;
"@MMK_R_reversedze-cy" = -29;
"@MMK_R_s" = -10;
"@MMK_R_semisoftsign-cy" = -12;
"@MMK_R_seven" = -2;
"@MMK_R_seven.osf" = 8;
"@MMK_R_slash" = 10;
"@MMK_R_te-cy" = -2;
"@MMK_R_two" = 15;
"@MMK_R_u" = -10;
"@MMK_R_underscore" = 32;
"@MMK_R_v" = -30;
"@MMK_R_z" = -10;
"@MMK_R_zero" = -10;
"@MMK_R_zero.osf" = -9;
};
"@MMK_L_x.sc" = {
"@MMK_R_a.sc" = -38;
"@MMK_R_ampersand" = -10;
"@MMK_R_ampersand.sc" = -2;
"@MMK_R_backslash" = -32;
"@MMK_R_braceright" = 8;
"@MMK_R_c.sc" = -25;
"@MMK_R_colon" = -8;
"@MMK_R_degree" = 8;
"@MMK_R_eight" = -8;
"@MMK_R_five.osf" = 8;
"@MMK_R_four" = -18;
"@MMK_R_four.osf" = 7;
"@MMK_R_guillemetright" = -10;
"@MMK_R_guillemetright.sc" = -20;
"@MMK_R_one" = 8;
"@MMK_R_one.osf" = 8;
"@MMK_R_ordfeminine" = 30;
"@MMK_R_paragraph" = 8;
"@MMK_R_periodcentered" = -23;
"@MMK_R_question" = 17;
"@MMK_R_question.sc" = -20;
"@MMK_R_questiondown" = 20;
"@MMK_R_questiondown.sc" = -20;
"@MMK_R_quotedblleft.sc" = -18;
"@MMK_R_quotedblright" = 2;
"@MMK_R_quotedblright.sc" = -7;
"@MMK_R_s.sc" = -11;
"@MMK_R_seven" = 8;
"@MMK_R_seven.osf" = 10;
"@MMK_R_slash" = 22;
"@MMK_R_t.sc" = -30;
"@MMK_R_trademark" = 17;
"@MMK_R_two" = 8;
"@MMK_R_u.sc" = -10;
"@MMK_R_underscore" = 42;
"@MMK_R_v.sc" = -28;
"@MMK_R_y.sc" = -30;
"@MMK_R_z.sc" = -10;
"@MMK_R_zero" = -18;
"@MMK_R_zero.osf" = -18;
};
"@MMK_L_y.sc" = {
"@MMK_R_C" = -10;
"@MMK_R_a.sc" = -44;
"@MMK_R_ampersand" = -30;
"@MMK_R_ampersand.sc" = -30;
"@MMK_R_backslash" = -2;
"@MMK_R_braceright" = 33;
"@MMK_R_c.sc" = -30;
"@MMK_R_colon" = -9;
"@MMK_R_comma" = -29;
"@MMK_R_degree" = 35;
"@MMK_R_exclam" = 8;
"@MMK_R_exclam.sc" = 17;
"@MMK_R_exclamdown" = -10;
"@MMK_R_five" = 2;
"@MMK_R_four" = -37;
"@MMK_R_four.osf" = -61;
"@MMK_R_guillemetright" = -15;
"@MMK_R_guillemetright.sc" = -20;
"@MMK_R_j.sc" = -10;
"@MMK_R_nine" = 21;
"@MMK_R_nine.osf" = 10;
"@MMK_R_one" = 33;
"@MMK_R_one.osf" = 35;
"@MMK_R_ordfeminine" = 50;
"@MMK_R_paragraph" = 33;
"@MMK_R_periodcentered" = -23;
"@MMK_R_question" = 47;
"@MMK_R_questiondown" = -50;
"@MMK_R_questiondown.sc" = -58;
"@MMK_R_quotedblleft" = 20;
"@MMK_R_quotedblright" = 30;
"@MMK_R_quotedblright.sc" = 11;
"@MMK_R_s.sc" = -15;
"@MMK_R_seven" = 27;
"@MMK_R_seven.osf" = 35;
"@MMK_R_slash" = -30;
"@MMK_R_t.sc" = -17;
"@MMK_R_three" = 7;
"@MMK_R_three.osf" = 8;
"@MMK_R_trademark" = 41;
"@MMK_R_two" = 41;
"@MMK_R_two.osf" = 10;
"@MMK_R_u.sc" = -10;
"@MMK_R_underscore" = -2;
"@MMK_R_v.sc" = -28;
"@MMK_R_x.sc" = -30;
"@MMK_R_y.sc" = -17;
"@MMK_R_zero" = -10;
"@MMK_R_zero.osf" = -18;
};
"@MMK_L_yat-cy" = {
"@MMK_R_A.ss01" = -13;
"@MMK_R_T" = -54;
"@MMK_R_be-cy.loclSRB" = 8;
"@MMK_R_c" = -2;
"@MMK_R_cheabkhasian-cy" = -27;
"@MMK_R_colon" = -2;
"@MMK_R_de-cy" = -2;
"@MMK_R_ezhcaron" = -8;
"@MMK_R_hardsign-cy.ss01" = -53;
"@MMK_R_parenleft" = -3;
"@MMK_R_question" = -63;
"@MMK_R_quotedbl" = -20;
"@MMK_R_quotedblleft" = -32;
"@MMK_R_quotedblright" = -28;
"@MMK_R_semisoftsign-cy" = -32;
"@MMK_R_te-cy" = -40;
"@MMK_R_u" = -8;
"@MMK_R_v" = -41;
"@MMK_R_x" = -33;
};
"@MMK_L_yen" = {
"@MMK_R_backslash" = 50;
"@MMK_R_braceright" = 33;
"@MMK_R_braceright.case" = 30;
"@MMK_R_colon" = -40;
"@MMK_R_comma" = -30;
"@MMK_R_eight" = -10;
"@MMK_R_exclam" = 25;
"@MMK_R_exclam.sc" = -20;
"@MMK_R_exclamdown" = -20;
"@MMK_R_exclamdown.sc" = -20;
"@MMK_R_five.osf" = -10;
"@MMK_R_four" = -10;
"@MMK_R_four.osf" = -20;
"@MMK_R_guillemetright.case" = -3;
"@MMK_R_guillemetright.sc" = -20;
"@MMK_R_one" = 30;
"@MMK_R_parenright" = 33;
"@MMK_R_periodcentered" = -28;
"@MMK_R_question.sc" = -20;
"@MMK_R_questiondown" = -40;
"@MMK_R_questiondown.sc" = -20;
"@MMK_R_quotedbl" = 20;
"@MMK_R_quotedblright" = 17;
"@MMK_R_seven" = 22;
"@MMK_R_slash" = -30;
"@MMK_R_three" = 10;
"@MMK_R_three.osf" = -10;
"@MMK_R_two.osf" = -18;
"@MMK_R_underscore" = -10;
"@MMK_R_zero" = -14;
"@MMK_R_zero.osf" = -30;
};
"@MMK_L_zero" = {
"@MMK_R_A" = -13;
"@MMK_R_I.ss01" = -10;
"@MMK_R_J" = -28;
"@MMK_R_J.ss01" = -50;
"@MMK_R_T" = -20;
"@MMK_R_T.ss01" = -15;
"@MMK_R_V" = -25;
"@MMK_R_X" = -38;
"@MMK_R_Y" = -38;
"@MMK_R_Z" = -12;
"@MMK_R_a.sc" = -14;
"@MMK_R_backslash" = -20;
"@MMK_R_comma" = -14;
"@MMK_R_degree" = 1;
"@MMK_R_j" = -8;
"@MMK_R_j.sc" = -14;
"@MMK_R_j.sc.ss01" = -30;
"@MMK_R_one" = -8;
"@MMK_R_ordfeminine" = 2;
"@MMK_R_periodcentered" = 2;
"@MMK_R_question" = -20;
"@MMK_R_questiondown" = -30;
"@MMK_R_quotedbl" = 2;
"@MMK_R_seven" = -2;
"@MMK_R_slash" = -20;
"@MMK_R_t" = 10;
"@MMK_R_t.sc" = 8;
"@MMK_R_three" = -10;
"@MMK_R_two" = -8;
"@MMK_R_underscore" = -20;
"@MMK_R_v" = 2;
"@MMK_R_v.sc" = -8;
"@MMK_R_x" = -10;
"@MMK_R_x.sc" = -18;
"@MMK_R_y.sc" = -10;
"@MMK_R_yen" = -14;
"@MMK_R_z.sc" = -1;
};
"@MMK_L_zero.osf" = {
"@MMK_R_A" = -5;
"@MMK_R_J" = -15;
"@MMK_R_J.ss01" = -45;
"@MMK_R_T" = -30;
"@MMK_R_T.ss01" = -35;
"@MMK_R_V" = -43;
"@MMK_R_X" = -33;
"@MMK_R_Y" = -48;
"@MMK_R_Y.ss01" = -10;
"@MMK_R_Z" = -3;
"@MMK_R_a.sc" = -9;
"@MMK_R_backslash" = -42;
"@MMK_R_comma" = -11;
"@MMK_R_degree" = -19;
"@MMK_R_five.osf" = -4;
"@MMK_R_four.osf" = -10;
"@MMK_R_j" = -8;
"@MMK_R_j.sc.ss01" = -28;
"@MMK_R_lira" = 10;
"@MMK_R_ordfeminine" = -10;
"@MMK_R_paragraph" = -10;
"@MMK_R_percent" = -20;
"@MMK_R_periodcentered" = 2;
"@MMK_R_periodcentered.case" = 2;
"@MMK_R_question" = -40;
"@MMK_R_questiondown" = -10;
"@MMK_R_quotedbl" = -9;
"@MMK_R_quotedblleft" = -2;
"@MMK_R_quotedblright" = -10;
"@MMK_R_rupeeIndian" = -2;
"@MMK_R_seven.osf" = -1;
"@MMK_R_three.osf" = -15;
"@MMK_R_trademark" = -30;
"@MMK_R_two.osf" = -8;
"@MMK_R_underscore" = -10;
"@MMK_R_v" = -4;
"@MMK_R_v.sc" = -10;
"@MMK_R_x" = -9;
"@MMK_R_x.sc" = -18;
"@MMK_R_y.sc" = -18;
"@MMK_R_yen" = -30;
"@MMK_R_z" = -2;
"@MMK_R_z.sc" = -2;
};
"@MMK_L_zero.sinf" = {
"@MMK_R_five" = 20;
"@MMK_R_four" = 30;
"@MMK_R_one" = -20;
"@MMK_R_three" = 10;
"@MMK_R_two" = 10;
};
F = {
};
Q = {
braceright = 17;
bracketright = 17;
divisionslash = 55;
slash = 55;
underscore = 40;
};
T = {
};
V = {
i = 0;
j = 0;
};
W = {
i = 0;
j = 0;
};
Y = {
i = -3;
};
asciitilde = {
};
asterisk = {
};
braceleft = {
};
bracketleft = {
};
bullet = {
};
divide = {
};
divisionslash = {
i = 17;
};
f = {
};
guillemetright = {
};
guilsinglright = {
};
hyphen = {
};
hyphentwo = {
};
i = {
backslash = -4;
};
j = {
backslash = -4;
};
minus = {
};
parenleft = {
};
plus = {
};
q = {
j = 50;
};
quotedblleft = {
};
quoteleft = {
};
slash = {
i = 17;
};
softhyphen = {
};
underscore = {
y = 20;
};
};
};
manufacturer = "Julieta Ulanovsky";
manufacturerURL = "http://www.zkysky.com.ar/";
unitsPerEm = 1000;
versionMajor = 7;
versionMinor = 200;
}
